
3fazemotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000014f6  0000158a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080019e  0080019e  00001628  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000527  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d21  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010e0  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002fe9  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00007b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008a4  00000000  00000000  00007f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b8c  00000000  00000000  00008830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00068030  00000000  00000000  000093bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000713ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	a9 c0       	rjmp	.+338    	; 0x156 <__bad_interrupt>
       4:	43 c6       	rjmp	.+3206   	; 0xc8c <__vector_2>
       6:	a7 c0       	rjmp	.+334    	; 0x156 <__bad_interrupt>
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	a5 c0       	rjmp	.+330    	; 0x156 <__bad_interrupt>
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	a3 c0       	rjmp	.+326    	; 0x156 <__bad_interrupt>
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	a1 c0       	rjmp	.+322    	; 0x156 <__bad_interrupt>
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	9f c0       	rjmp	.+318    	; 0x156 <__bad_interrupt>
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	9d c0       	rjmp	.+314    	; 0x156 <__bad_interrupt>
      1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
      1e:	6f c4       	rjmp	.+2270   	; 0x8fe <__vector_15>
      20:	3d c7       	rjmp	.+3706   	; 0xe9c <__vector_16>
      22:	99 c0       	rjmp	.+306    	; 0x156 <__bad_interrupt>
      24:	cf c0       	rjmp	.+414    	; 0x1c4 <__vector_18>
      26:	97 c0       	rjmp	.+302    	; 0x156 <__bad_interrupt>
      28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
      2a:	95 c0       	rjmp	.+298    	; 0x156 <__bad_interrupt>
      2c:	94 c0       	rjmp	.+296    	; 0x156 <__bad_interrupt>
      2e:	93 c0       	rjmp	.+294    	; 0x156 <__bad_interrupt>
      30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
      32:	91 c0       	rjmp	.+290    	; 0x156 <__bad_interrupt>
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	8f c0       	rjmp	.+286    	; 0x156 <__bad_interrupt>
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	8d c0       	rjmp	.+282    	; 0x156 <__bad_interrupt>
      3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
      3e:	8b c0       	rjmp	.+278    	; 0x156 <__bad_interrupt>

00000040 <__c.1776>:
      40:	45 46 47 65 66 67 00                                EFGefg.

00000047 <__c.1770>:
      47:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000057 <ASSERTION_FAILED.1674>:
      57:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
      67:	20 61 74 20 6c 69 6e 65 3a 20 25 64 0a 00            at line: %d..

00000075 <AMPL.1720>:
      75:	61 6d 70 6c 69 74 75 64 65 3a 20 25 75 25 25 20     amplitude: %u%% 
      85:	28 25 75 20 5b 56 5d 29 0a 0a 00                    (%u [V])...

00000090 <FREQ_REGUL.1719>:
      90:	66 72 65 71 75 65 6e 63 79 20 28 73 70 65 65 64     frequency (speed
      a0:	20 72 65 67 75 6c 61 74 69 6f 6e 29 3a 20 25 69      regulation): %i
      b0:	20 5b 48 7a 5d 0a 00                                 [Hz]..

000000b7 <FREQ_POT.1718>:
      b7:	66 72 65 71 75 65 6e 63 79 20 28 73 70 65 65 64     frequency (speed
      c7:	20 70 6f 74 65 6e 74 69 6f 6d 65 74 65 72 29 3a      potentiometer):
      d7:	20 25 69 20 5b 48 7a 5d 0a 00                        %i [Hz]..

000000e1 <VOLTAGE.1717>:
      e1:	76 6f 6c 74 61 67 65 3a 20 25 75 0a 00              voltage: %u..

000000ee <CURRENT.1716>:
      ee:	63 75 72 72 65 6e 74 3a 20 25 75 0a 00              current: %u..

000000fb <COUNTER.1715>:
      fb:	69 6e 66 6f 20 6e 75 6d 62 65 72 3a 20 25 75 0a     info number: %u.
	...

0000010c <TIME.1714>:
     10c:	54 69 6d 65 3a 20 25 6c 75 20 5b 74 69 63 6b 73     Time: %lu [ticks
     11c:	5d 0a 00 00                                         ]...

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d2 e0       	ldi	r29, 0x02	; 2
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e6 ef       	ldi	r30, 0xF6	; 246
     134:	f4 e1       	ldi	r31, 0x14	; 20
     136:	02 c0       	rjmp	.+4      	; 0x13c <.do_copy_data_start>

00000138 <.do_copy_data_loop>:
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0

0000013c <.do_copy_data_start>:
     13c:	ae 39       	cpi	r26, 0x9E	; 158
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <.do_copy_data_loop>

00000142 <__do_clear_bss>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	ae e9       	ldi	r26, 0x9E	; 158
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	a0 3c       	cpi	r26, 0xC0	; 192
     14e:	b1 07       	cpc	r27, r17
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
     152:	42 d2       	rcall	.+1156   	; 0x5d8 <main>
     154:	ce c9       	rjmp	.-3172   	; 0xfffff4f2 <__eeprom_end+0xff7ef4f2>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <adc_init>:
		 [INDEX_CURRENT]   = MUX_CONST_PART | MUX_SPEED_POT
		};

void adc_init(void) {
	/* enable VCC ref, right adjust the ADC result, cannel ADC010 */
	ADMUX = adc_mux[0];
     158:	82 e4       	ldi	r24, 0x42	; 66
     15a:	80 93 7c 00 	sts	0x007C, r24

	/* enable ADC, enable interrupts,  ADC Prescaler = 128, Auto trigger mode */
    ADCSRA = (1 << ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADATE);
     15e:	ea e7       	ldi	r30, 0x7A	; 122
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	8f ea       	ldi	r24, 0xAF	; 175
     164:	80 83       	st	Z, r24
    /* Free Running Mode */
    ADCSRB = 0;
     166:	10 92 7b 00 	sts	0x007B, r1

    /* start conversion */
    ADCSRA |= 1<<ADSC;
     16a:	80 81       	ld	r24, Z
     16c:	80 64       	ori	r24, 0x40	; 64
     16e:	80 83       	st	Z, r24
}
     170:	08 95       	ret

00000172 <adc_get_speed_pot_value>:

int16_t adc_get_speed_pot_value(void) {
	int16_t ret;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     172:	8f b7       	in	r24, 0x3f	; 63
     174:	f8 94       	cli
		ret = adc_speed_pot_value;
     176:	90 91 9f 01 	lds	r25, 0x019F
     17a:	40 91 a0 01 	lds	r20, 0x01A0
     17e:	8f bf       	out	0x3f, r24	; 63
     180:	89 2f       	mov	r24, r25
     182:	94 2f       	mov	r25, r20
     184:	99 23       	and	r25, r25
     186:	0c f4       	brge	.+2      	; 0x18a <adc_get_speed_pot_value+0x18>
     188:	cf 96       	adiw	r24, 0x3f	; 63
     18a:	9c 01       	movw	r18, r24
     18c:	02 2e       	mov	r0, r18
     18e:	23 2f       	mov	r18, r19
     190:	00 0c       	add	r0, r0
     192:	22 1f       	adc	r18, r18
     194:	33 0b       	sbc	r19, r19
     196:	00 0c       	add	r0, r0
     198:	22 1f       	adc	r18, r18
     19a:	33 1f       	adc	r19, r19
	/* fast */
	//	cassert(ADC_FILTER_LEN == 64);
	//	DivS16_64(retval, retval);

	return ret;
}
     19c:	82 2f       	mov	r24, r18
     19e:	93 2f       	mov	r25, r19
     1a0:	08 95       	ret

000001a2 <adc_get_voltage_value>:

uint16_t adc_get_voltage_value(void) {
	uint16_t ret;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     1a2:	8f b7       	in	r24, 0x3f	; 63
     1a4:	f8 94       	cli
		ret = adc_voltage_value;
     1a6:	20 91 a1 01 	lds	r18, 0x01A1
     1aa:	30 91 a2 01 	lds	r19, 0x01A2
     1ae:	8f bf       	out	0x3f, r24	; 63
     1b0:	36 95       	lsr	r19
     1b2:	27 95       	ror	r18
     1b4:	36 95       	lsr	r19
     1b6:	27 95       	ror	r18
	}
	ret /= ADC_VOLTAGE_FILTER_LEN;
	return ret;
}
     1b8:	82 2f       	mov	r24, r18
     1ba:	93 2f       	mov	r25, r19
     1bc:	08 95       	ret

000001be <adc_get_current_value>:

uint8_t adc_get_current_value(void) {
	return adc_current_value;
}
     1be:	80 91 a3 01 	lds	r24, 0x01A3
     1c2:	08 95       	ret

000001c4 <__vector_18>:

	return val;
}

/* adc_value = (adc_value * (ADC_FILTER_LEN - 1) / ADC_FILTER_LEN) + ADC; */
ISR(ADC_vect) {
     1c4:	1f 92       	push	r1
     1c6:	0f 92       	push	r0
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	0f 92       	push	r0
     1cc:	11 24       	eor	r1, r1
     1ce:	2f 93       	push	r18
     1d0:	3f 93       	push	r19
     1d2:	4f 93       	push	r20
     1d4:	5f 93       	push	r21
     1d6:	6f 93       	push	r22
     1d8:	7f 93       	push	r23
     1da:	8f 93       	push	r24
     1dc:	9f 93       	push	r25
     1de:	af 93       	push	r26
     1e0:	bf 93       	push	r27
     1e2:	ef 93       	push	r30
     1e4:	ff 93       	push	r31
	static uint8_t last_index = INDEX_SPEED_POT;

	switch (last_index) {
     1e6:	60 91 9e 01 	lds	r22, 0x019E
     1ea:	61 30       	cpi	r22, 0x01	; 1
     1ec:	49 f1       	breq	.+82     	; 0x240 <end+0x2e>
     1ee:	61 30       	cpi	r22, 0x01	; 1
     1f0:	20 f0       	brcs	.+8      	; 0x1fa <__vector_18+0x36>
     1f2:	62 30       	cpi	r22, 0x02	; 2
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <__vector_18+0x34>
     1f6:	46 c0       	rjmp	.+140    	; 0x284 <end+0x72>
     1f8:	38 c0       	rjmp	.+112    	; 0x26a <end+0x58>
	case INDEX_SPEED_POT:
		/* adc_value * (ADC_FILTER_LEN - 1) / ADC_FILTER_LEN =>
		 * adc_value - adc_value / ADC_FILTER_LEN */
		/* slow (use DivS16_64() to speed it up) */
		adc_speed_pot_value -= adc_speed_pot_value / ADC_SPEED_FILTER_LEN;
     1fa:	40 91 9f 01 	lds	r20, 0x019F
     1fe:	50 91 a0 01 	lds	r21, 0x01A0

/* convert from shifted code to 2's complement code
 *	when the ADC output is higher than 512, the measure is positive
 *	when the ADC output is lower  then 512, the measure is negative */
static inline int16_t adc_get_complement(void) {
	int16_t val = ADC;
     202:	20 91 78 00 	lds	r18, 0x0078
     206:	30 91 79 00 	lds	r19, 0x0079
	asm ("bst	%B[new_val], 1;	\n\t"
     20a:	31 fb       	bst	r19, 1
     20c:	3d 7f       	andi	r19, 0xFD	; 253
     20e:	0e f0       	brts	.+2      	; 0x212 <end>
     210:	3e 6f       	ori	r19, 0xFE	; 254

00000212 <end>:
	case INDEX_SPEED_POT:
		/* adc_value * (ADC_FILTER_LEN - 1) / ADC_FILTER_LEN =>
		 * adc_value - adc_value / ADC_FILTER_LEN */
		/* slow (use DivS16_64() to speed it up) */
		adc_speed_pot_value -= adc_speed_pot_value / ADC_SPEED_FILTER_LEN;
		adc_speed_pot_value += adc_get_complement();
     212:	ca 01       	movw	r24, r20
     214:	55 23       	and	r21, r21
     216:	0c f4       	brge	.+2      	; 0x21a <end+0x8>
     218:	cf 96       	adiw	r24, 0x3f	; 63
     21a:	08 2e       	mov	r0, r24
     21c:	89 2f       	mov	r24, r25
     21e:	00 0c       	add	r0, r0
     220:	88 1f       	adc	r24, r24
     222:	99 0b       	sbc	r25, r25
     224:	00 0c       	add	r0, r0
     226:	88 1f       	adc	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	fa 01       	movw	r30, r20
     22c:	e8 1b       	sub	r30, r24
     22e:	f9 0b       	sbc	r31, r25
     230:	cf 01       	movw	r24, r30
     232:	82 0f       	add	r24, r18
     234:	93 1f       	adc	r25, r19
     236:	90 93 a0 01 	sts	0x01A0, r25
     23a:	80 93 9f 01 	sts	0x019F, r24
     23e:	25 c0       	rjmp	.+74     	; 0x28a <end+0x78>
		break;
	case INDEX_VOLTAGE:
		adc_voltage_value -= adc_voltage_value / ADC_VOLTAGE_FILTER_LEN;
     240:	20 91 a1 01 	lds	r18, 0x01A1
     244:	30 91 a2 01 	lds	r19, 0x01A2
		adc_voltage_value += ADC;
     248:	80 91 78 00 	lds	r24, 0x0078
     24c:	90 91 79 00 	lds	r25, 0x0079
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	36 95       	lsr	r19
     256:	27 95       	ror	r18
     258:	36 95       	lsr	r19
     25a:	27 95       	ror	r18
     25c:	82 1b       	sub	r24, r18
     25e:	93 0b       	sbc	r25, r19
     260:	90 93 a2 01 	sts	0x01A2, r25
     264:	80 93 a1 01 	sts	0x01A1, r24
     268:	10 c0       	rjmp	.+32     	; 0x28a <end+0x78>
		break;
	case INDEX_CURRENT:
		adc_current_value = (uint8_t)(ADC >> 2);
     26a:	80 91 78 00 	lds	r24, 0x0078
     26e:	90 91 79 00 	lds	r25, 0x0079
     272:	96 95       	lsr	r25
     274:	87 95       	ror	r24
     276:	96 95       	lsr	r25
     278:	87 95       	ror	r24
     27a:	80 93 a3 01 	sts	0x01A3, r24
		assert_soft(0);
	}

	last_index++;
	if (last_index == countof(adc_mux)) {
		last_index = 0;
     27e:	10 92 9e 01 	sts	0x019E, r1
     282:	07 c0       	rjmp	.+14     	; 0x292 <end+0x80>
		break;
	case INDEX_CURRENT:
		adc_current_value = (uint8_t)(ADC >> 2);
		break;
	default:
		assert_soft(0);
     284:	8f e6       	ldi	r24, 0x6F	; 111
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	1e d0       	rcall	.+60     	; 0x2c6 <assert_handle>
	}

	last_index++;
     28a:	86 2f       	mov	r24, r22
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 9e 01 	sts	0x019E, r24
	if (last_index == countof(adc_mux)) {
		last_index = 0;
	}

	ADMUX = adc_mux[last_index];
     292:	80 91 9e 01 	lds	r24, 0x019E
     296:	e0 e0       	ldi	r30, 0x00	; 0
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	e8 0f       	add	r30, r24
     29c:	f1 1d       	adc	r31, r1
     29e:	80 81       	ld	r24, Z
     2a0:	80 93 7c 00 	sts	0x007C, r24
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	5f 91       	pop	r21
     2b6:	4f 91       	pop	r20
     2b8:	3f 91       	pop	r19
     2ba:	2f 91       	pop	r18
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <assert_handle>:
#include <util/delay.h>
#include <stdio.h>

void print_info(void);

void assert_handle(int line) {
     2c6:	8c 01       	movw	r16, r24
	cli();
     2c8:	f8 94       	cli
	psc_halt();
     2ca:	1c d4       	rcall	.+2104   	; 0xb04 <psc_halt>
	led_init();
     2cc:	79 d0       	rcall	.+242    	; 0x3c0 <led_init>
	print_info();
     2ce:	c0 d0       	rcall	.+384    	; 0x450 <print_info>

#ifdef DEBUG
	static const char ASSERTION_FAILED[] PROGMEM = "Assertion failed at line: %d\n";
	printf_P(ASSERTION_FAILED, line);
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <assert_handle+0xc>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <assert_handle+0xe>
     2d4:	ed b7       	in	r30, 0x3d	; 61
     2d6:	fe b7       	in	r31, 0x3e	; 62
     2d8:	31 96       	adiw	r30, 0x01	; 1
     2da:	87 e5       	ldi	r24, 0x57	; 87
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	91 83       	std	Z+1, r25	; 0x01
     2e0:	80 83       	st	Z, r24
     2e2:	13 83       	std	Z+3, r17	; 0x03
     2e4:	02 83       	std	Z+2, r16	; 0x02
     2e6:	84 d8       	rcall	.-3832   	; 0xfffff3f0 <__eeprom_end+0xff7ef3f0>
	static const char ASSERTION_FAILED[] PROGMEM = "Assertion failed at line: ";
	uart_puts_P(ASSERTION_FAILED);
	uart_putx(line);
#endif

	led1_set_state(OFF);
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	78 d0       	rcall	.+240    	; 0x3e4 <led1_set_state>
	led2_set_state(ON);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	8b d0       	rcall	.+278    	; 0x40e <led2_set_state>
	while(1) {
		led1_toggle();
		led2_toggle();
     2f8:	00 ed       	ldi	r16, 0xD0	; 208
     2fa:	17 e0       	ldi	r17, 0x07	; 7
     2fc:	c0 e9       	ldi	r28, 0x90	; 144
     2fe:	d1 e0       	ldi	r29, 0x01	; 1
#endif

	led1_set_state(OFF);
	led2_set_state(ON);
	while(1) {
		led1_toggle();
     300:	6a d0       	rcall	.+212    	; 0x3d6 <led1_toggle>
		led2_toggle();
     302:	7e d0       	rcall	.+252    	; 0x400 <led2_toggle>
     304:	98 01       	movw	r18, r16
     306:	ce 01       	movw	r24, r28
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <__stack+0x9>
     30c:	21 50       	subi	r18, 0x01	; 1
     30e:	30 40       	sbci	r19, 0x00	; 0
     310:	d1 f7       	brne	.-12     	; 0x306 <__stack+0x7>
     312:	f6 cf       	rjmp	.-20     	; 0x300 <__stack+0x1>

00000314 <break_on>:
    break_off();
    BREAK_DDR |= 1 << BREAK;
}

void break_on(void) {
	BREAK_PORT |=  1 << BREAK;
     314:	eb e2       	ldi	r30, 0x2B	; 43
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
}
     31e:	08 95       	ret

00000320 <break_off>:

void break_off(void) {
	BREAK_PORT &=  ~(1 << BREAK);
     320:	eb e2       	ldi	r30, 0x2B	; 43
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	8d 7f       	andi	r24, 0xFD	; 253
     328:	80 83       	st	Z, r24
}
     32a:	08 95       	ret

0000032c <break_init>:
#define BREAK_PORT PORTD
#define BREAK_DDR  DDRD
#define BREAK      PD1

void break_init(void) {
    break_off();
     32c:	f9 df       	rcall	.-14     	; 0x320 <break_off>
    BREAK_DDR |= 1 << BREAK;
     32e:	ea e2       	ldi	r30, 0x2A	; 42
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	82 60       	ori	r24, 0x02	; 2
     336:	80 83       	st	Z, r24
}
     338:	08 95       	ret

0000033a <dac_init>:

#define DAC_MAX_VALUE ((1 << 10) - 1)

void dac_init(void) {
	/* DAC enable, right adjust (10 bit), output enable */
	DACON = (1 << DAEN) | (1 << DAOE);
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	80 93 aa 00 	sts	0x00AA, r24
}
     340:	08 95       	ret

00000342 <dac_set_value>:

void dac_set_value(uint16_t value) {
	DACL = LOW(value);
     342:	80 93 ab 00 	sts	0x00AB, r24
	DACH = HIGH(value);
     346:	90 93 ac 00 	sts	0x00AC, r25
}
     34a:	08 95       	ret

0000034c <dac_set_value_scaled>:

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
     34c:	68 17       	cp	r22, r24
     34e:	79 07       	cpc	r23, r25
     350:	18 f4       	brcc	.+6      	; 0x358 <dac_set_value_scaled+0xc>
     352:	84 e1       	ldi	r24, 0x14	; 20
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	b7 df       	rcall	.-146    	; 0x2c6 <assert_handle>
	if (max_value < DAC_MAX_VALUE) {
     358:	23 e0       	ldi	r18, 0x03	; 3
     35a:	6f 3f       	cpi	r22, 0xFF	; 255
     35c:	72 07       	cpc	r23, r18
     35e:	28 f0       	brcs	.+10     	; 0x36a <dac_set_value_scaled+0x1e>
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
			value *= 2;
		}
	} else {
		while (max_value > DAC_MAX_VALUE) {
     360:	44 e0       	ldi	r20, 0x04	; 4
     362:	60 30       	cpi	r22, 0x00	; 0
     364:	74 07       	cpc	r23, r20
     366:	10 f5       	brcc	.+68     	; 0x3ac <dac_set_value_scaled+0x60>
     368:	29 c0       	rjmp	.+82     	; 0x3bc <dac_set_value_scaled+0x70>
}

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
	if (max_value < DAC_MAX_VALUE) {
		while (max_value * 2 <= DAC_MAX_VALUE) {
     36a:	9b 01       	movw	r18, r22
     36c:	22 0f       	add	r18, r18
     36e:	33 1f       	adc	r19, r19
     370:	44 e0       	ldi	r20, 0x04	; 4
     372:	20 30       	cpi	r18, 0x00	; 0
     374:	34 07       	cpc	r19, r20
     376:	10 f5       	brcc	.+68     	; 0x3bc <dac_set_value_scaled+0x70>
			assert(max_value <= UINT16_MAX / 2);
     378:	77 23       	and	r23, r23
     37a:	2c f0       	brlt	.+10     	; 0x386 <dac_set_value_scaled+0x3a>
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
     37c:	99 23       	and	r25, r25
     37e:	64 f4       	brge	.+24     	; 0x398 <dac_set_value_scaled+0x4c>
     380:	07 c0       	rjmp	.+14     	; 0x390 <dac_set_value_scaled+0x44>

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
	if (max_value < DAC_MAX_VALUE) {
		while (max_value * 2 <= DAC_MAX_VALUE) {
			assert(max_value <= UINT16_MAX / 2);
     382:	33 23       	and	r19, r19
     384:	1c f4       	brge	.+6      	; 0x38c <dac_set_value_scaled+0x40>
     386:	87 e1       	ldi	r24, 0x17	; 23
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9d df       	rcall	.-198    	; 0x2c6 <assert_handle>
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
     38c:	99 23       	and	r25, r25
     38e:	1c f4       	brge	.+6      	; 0x396 <dac_set_value_scaled+0x4a>
     390:	89 e1       	ldi	r24, 0x19	; 25
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	98 df       	rcall	.-208    	; 0x2c6 <assert_handle>
     396:	9a 01       	movw	r18, r20
			value *= 2;
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
}

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
	if (max_value < DAC_MAX_VALUE) {
		while (max_value * 2 <= DAC_MAX_VALUE) {
     39c:	a9 01       	movw	r20, r18
     39e:	44 0f       	add	r20, r20
     3a0:	55 1f       	adc	r21, r21
     3a2:	64 e0       	ldi	r22, 0x04	; 4
     3a4:	40 30       	cpi	r20, 0x00	; 0
     3a6:	56 07       	cpc	r21, r22
     3a8:	60 f3       	brcs	.-40     	; 0x382 <dac_set_value_scaled+0x36>
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <dac_set_value_scaled+0x70>
			assert(value <= UINT16_MAX / 2);
			value *= 2;
		}
	} else {
		while (max_value > DAC_MAX_VALUE) {
			max_value /= 2;
     3ac:	76 95       	lsr	r23
     3ae:	67 95       	ror	r22
			value /= 2;
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
			value *= 2;
		}
	} else {
		while (max_value > DAC_MAX_VALUE) {
     3b4:	24 e0       	ldi	r18, 0x04	; 4
     3b6:	60 30       	cpi	r22, 0x00	; 0
     3b8:	72 07       	cpc	r23, r18
     3ba:	c0 f7       	brcc	.-16     	; 0x3ac <dac_set_value_scaled+0x60>
			max_value /= 2;
			value /= 2;
		}
	}

	dac_set_value(value);
     3bc:	c2 df       	rcall	.-124    	; 0x342 <dac_set_value>
}
     3be:	08 95       	ret

000003c0 <led_init>:
#define LED2      PD2


/* Nastavi DDR registr, aby bylo mozne ovladat ledku - pin ledky jako vystupni */
void led_init(void) {
    LED1_DDR |= 1 << LED1;
     3c0:	e7 e2       	ldi	r30, 0x27	; 39
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	84 60       	ori	r24, 0x04	; 4
     3c8:	80 83       	st	Z, r24
    LED2_DDR |= 1 << LED2;
     3ca:	ea e2       	ldi	r30, 0x2A	; 42
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	84 60       	ori	r24, 0x04	; 4
     3d2:	80 83       	st	Z, r24
}
     3d4:	08 95       	ret

000003d6 <led1_toggle>:

/* Zmeni stav ledky */
void led1_toggle(void){
    LED1_PORT ^=  1 << LED1; // XOR
     3d6:	e8 e2       	ldi	r30, 0x28	; 40
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	94 e0       	ldi	r25, 0x04	; 4
     3de:	89 27       	eor	r24, r25
     3e0:	80 83       	st	Z, r24
}
     3e2:	08 95       	ret

000003e4 <led1_set_state>:

void led1_set_state(state_t state) {
	if (state == ON) {
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	31 f4       	brne	.+12     	; 0x3f4 <led1_set_state+0x10>
		LED1_PORT &=  ~(1 << LED1);
     3e8:	e8 e2       	ldi	r30, 0x28	; 40
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	8b 7f       	andi	r24, 0xFB	; 251
     3f0:	80 83       	st	Z, r24
     3f2:	08 95       	ret
	} else {
		LED1_PORT |=  1 << LED1;
     3f4:	e8 e2       	ldi	r30, 0x28	; 40
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	80 81       	ld	r24, Z
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	80 83       	st	Z, r24
     3fe:	08 95       	ret

00000400 <led2_toggle>:
	}
}

void led2_toggle(void){
    LED2_PORT ^=  1 << LED2; // XOR
     400:	eb e2       	ldi	r30, 0x2B	; 43
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	89 27       	eor	r24, r25
     40a:	80 83       	st	Z, r24
}
     40c:	08 95       	ret

0000040e <led2_set_state>:

void led2_set_state(state_t state) {
	if (state == ON) {
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	31 f4       	brne	.+12     	; 0x41e <led2_set_state+0x10>
		LED2_PORT &=  ~(1 << LED2);
     412:	eb e2       	ldi	r30, 0x2B	; 43
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	8b 7f       	andi	r24, 0xFB	; 251
     41a:	80 83       	st	Z, r24
     41c:	08 95       	ret
	} else {
		LED2_PORT |=  1 << LED2;
     41e:	eb e2       	ldi	r30, 0x2B	; 43
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	84 60       	ori	r24, 0x04	; 4
     426:	80 83       	st	Z, r24
     428:	08 95       	ret

0000042a <toFreq>:

#ifdef DEBUG
extern volatile int16_t test_command;
extern volatile int16_t test_amplitude;

int16_t toFreq(int16_t command) {
     42a:	aa 27       	eor	r26, r26
     42c:	97 fd       	sbrc	r25, 7
     42e:	a0 95       	com	r26
     430:	ba 2f       	mov	r27, r26
     432:	bc 01       	movw	r22, r24
     434:	cd 01       	movw	r24, r26
     436:	2d e7       	ldi	r18, 0x7D	; 125
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	e7 d6       	rcall	.+3534   	; 0x120e <__mulsi3>
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	32 e0       	ldi	r19, 0x02	; 2
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	14 d7       	rcall	.+3624   	; 0x1272 <__divmodsi4>
     44a:	82 2f       	mov	r24, r18
     44c:	93 2f       	mov	r25, r19
	return ((int32_t)command * F_MAX) / COMMAND_MAX;
}
     44e:	08 95       	ret

00000450 <print_info>:

void print_info(void) {
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
	static const char VOLTAGE[] PROGMEM = "voltage: %u\n";
	static const char FREQ_POT[] PROGMEM = "frequency (speed potentiometer): %i [Hz]\n";
	static const char FREQ_REGUL[] PROGMEM = "frequency (speed regulation): %i [Hz]\n";
	static const char AMPL[] PROGMEM = "amplitude: %u%% (%u [V])\n\n";

	printf_P(TIME, time_get());
     45c:	12 d2       	rcall	.+1060   	; 0x882 <time_get>
     45e:	00 d0       	rcall	.+0      	; 0x460 <print_info+0x10>
     460:	00 d0       	rcall	.+0      	; 0x462 <print_info+0x12>
     462:	00 d0       	rcall	.+0      	; 0x464 <print_info+0x14>
     464:	ed b7       	in	r30, 0x3d	; 61
     466:	fe b7       	in	r31, 0x3e	; 62
     468:	31 96       	adiw	r30, 0x01	; 1
     46a:	2c e0       	ldi	r18, 0x0C	; 12
     46c:	31 e0       	ldi	r19, 0x01	; 1
     46e:	31 83       	std	Z+1, r19	; 0x01
     470:	20 83       	st	Z, r18
     472:	62 83       	std	Z+2, r22	; 0x02
     474:	73 83       	std	Z+3, r23	; 0x03
     476:	84 83       	std	Z+4, r24	; 0x04
     478:	95 83       	std	Z+5, r25	; 0x05
     47a:	ba d7       	rcall	.+3956   	; 0x13f0 <printf_P>
	printf_P(COUNTER, ++counter);
     47c:	20 91 a4 01 	lds	r18, 0x01A4
     480:	30 91 a5 01 	lds	r19, 0x01A5
     484:	2f 5f       	subi	r18, 0xFF	; 255
     486:	3f 4f       	sbci	r19, 0xFF	; 255
     488:	30 93 a5 01 	sts	0x01A5, r19
     48c:	20 93 a4 01 	sts	0x01A4, r18
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	ed b7       	in	r30, 0x3d	; 61
     496:	fe b7       	in	r31, 0x3e	; 62
     498:	31 96       	adiw	r30, 0x01	; 1
     49a:	8b ef       	ldi	r24, 0xFB	; 251
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	91 83       	std	Z+1, r25	; 0x01
     4a0:	80 83       	st	Z, r24
     4a2:	33 83       	std	Z+3, r19	; 0x03
     4a4:	22 83       	std	Z+2, r18	; 0x02
     4a6:	a4 d7       	rcall	.+3912   	; 0x13f0 <printf_P>
	printf_P(CURRENT, adc_get_current_value());
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	86 de       	rcall	.-756    	; 0x1be <adc_get_current_value>
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <print_info+0x64>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <print_info+0x66>
     4b6:	ed b7       	in	r30, 0x3d	; 61
     4b8:	fe b7       	in	r31, 0x3e	; 62
     4ba:	31 96       	adiw	r30, 0x01	; 1
     4bc:	2e ee       	ldi	r18, 0xEE	; 238
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	31 83       	std	Z+1, r19	; 0x01
     4c2:	20 83       	st	Z, r18
     4c4:	82 83       	std	Z+2, r24	; 0x02
     4c6:	13 82       	std	Z+3, r1	; 0x03
     4c8:	93 d7       	rcall	.+3878   	; 0x13f0 <printf_P>
	printf_P(VOLTAGE, adc_get_voltage_value());
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	67 de       	rcall	.-818    	; 0x1a2 <adc_get_voltage_value>
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <print_info+0x86>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <print_info+0x88>
     4d8:	ed b7       	in	r30, 0x3d	; 61
     4da:	fe b7       	in	r31, 0x3e	; 62
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	21 ee       	ldi	r18, 0xE1	; 225
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	31 83       	std	Z+1, r19	; 0x01
     4e4:	20 83       	st	Z, r18
     4e6:	93 83       	std	Z+3, r25	; 0x03
     4e8:	82 83       	std	Z+2, r24	; 0x02
     4ea:	82 d7       	rcall	.+3844   	; 0x13f0 <printf_P>
	printf_P(FREQ_POT, toFreq(adc_get_speed_pot_value()));
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	3e de       	rcall	.-900    	; 0x172 <adc_get_speed_pot_value>
     4f6:	99 df       	rcall	.-206    	; 0x42a <toFreq>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <print_info+0xaa>
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <print_info+0xac>
     4fc:	ed b7       	in	r30, 0x3d	; 61
     4fe:	fe b7       	in	r31, 0x3e	; 62
     500:	31 96       	adiw	r30, 0x01	; 1
     502:	27 eb       	ldi	r18, 0xB7	; 183
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	31 83       	std	Z+1, r19	; 0x01
     508:	20 83       	st	Z, r18
     50a:	93 83       	std	Z+3, r25	; 0x03
     50c:	82 83       	std	Z+2, r24	; 0x02
     50e:	70 d7       	rcall	.+3808   	; 0x13f0 <printf_P>
	printf_P(FREQ_REGUL, toFreq(test_command));
     510:	80 91 b8 01 	lds	r24, 0x01B8
     514:	90 91 b9 01 	lds	r25, 0x01B9
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	84 df       	rcall	.-248    	; 0x42a <toFreq>
     522:	00 d0       	rcall	.+0      	; 0x524 <print_info+0xd4>
     524:	00 d0       	rcall	.+0      	; 0x526 <print_info+0xd6>
     526:	ed b7       	in	r30, 0x3d	; 61
     528:	fe b7       	in	r31, 0x3e	; 62
     52a:	31 96       	adiw	r30, 0x01	; 1
     52c:	20 e9       	ldi	r18, 0x90	; 144
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	31 83       	std	Z+1, r19	; 0x01
     532:	20 83       	st	Z, r18
     534:	93 83       	std	Z+3, r25	; 0x03
     536:	82 83       	std	Z+2, r24	; 0x02
     538:	5b d7       	rcall	.+3766   	; 0x13f0 <printf_P>
	printf_P(AMPL, (uint16_t)(((uint32_t)test_amplitude * 100) / MAX_PWM),
     53a:	60 91 b6 01 	lds	r22, 0x01B6
     53e:	70 91 b7 01 	lds	r23, 0x01B7
     542:	e0 90 b6 01 	lds	r14, 0x01B6
     546:	f0 90 b7 01 	lds	r15, 0x01B7
     54a:	00 d0       	rcall	.+0      	; 0x54c <print_info+0xfc>
     54c:	cd b6       	in	r12, 0x3d	; 61
     54e:	de b6       	in	r13, 0x3e	; 62
     550:	08 94       	sec
     552:	c1 1c       	adc	r12, r1
     554:	d1 1c       	adc	r13, r1
     556:	25 e7       	ldi	r18, 0x75	; 117
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	f6 01       	movw	r30, r12
     55c:	31 83       	std	Z+1, r19	; 0x01
     55e:	20 83       	st	Z, r18
     560:	88 27       	eor	r24, r24
     562:	77 fd       	sbrc	r23, 7
     564:	80 95       	com	r24
     566:	98 2f       	mov	r25, r24
     568:	24 e6       	ldi	r18, 0x64	; 100
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	4e d6       	rcall	.+3228   	; 0x120e <__mulsi3>
     572:	05 2e       	mov	r0, r21
     574:	5b e0       	ldi	r21, 0x0B	; 11
     576:	96 95       	lsr	r25
     578:	87 95       	ror	r24
     57a:	77 95       	ror	r23
     57c:	67 95       	ror	r22
     57e:	5a 95       	dec	r21
     580:	d1 f7       	brne	.-12     	; 0x576 <print_info+0x126>
     582:	50 2d       	mov	r21, r0
     584:	f6 01       	movw	r30, r12
     586:	73 83       	std	Z+3, r23	; 0x03
     588:	62 83       	std	Z+2, r22	; 0x02
     58a:	00 27       	eor	r16, r16
     58c:	f7 fc       	sbrc	r15, 7
     58e:	00 95       	com	r16
     590:	10 2f       	mov	r17, r16
     592:	c8 01       	movw	r24, r16
     594:	b7 01       	movw	r22, r14
     596:	25 e4       	ldi	r18, 0x45	; 69
     598:	31 e0       	ldi	r19, 0x01	; 1
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	37 d6       	rcall	.+3182   	; 0x120e <__mulsi3>
     5a0:	05 2e       	mov	r0, r21
     5a2:	5b e0       	ldi	r21, 0x0B	; 11
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	77 95       	ror	r23
     5aa:	67 95       	ror	r22
     5ac:	5a 95       	dec	r21
     5ae:	d1 f7       	brne	.-12     	; 0x5a4 <print_info+0x154>
     5b0:	50 2d       	mov	r21, r0
     5b2:	f6 01       	movw	r30, r12
     5b4:	75 83       	std	Z+5, r23	; 0x05
     5b6:	64 83       	std	Z+4, r22	; 0x04
     5b8:	1b d7       	rcall	.+3638   	; 0x13f0 <printf_P>
     5ba:	8d b7       	in	r24, 0x3d	; 61
     5bc:	9e b7       	in	r25, 0x3e	; 62
     5be:	06 96       	adiw	r24, 0x06	; 6
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	9e bf       	out	0x3e, r25	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	8d bf       	out	0x3d, r24	; 61
			(uint16_t)(((uint32_t)test_amplitude * 325) / MAX_PWM));
}
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	08 95       	ret

000005d8 <main>:
	return;
}
#endif


int main(void) {
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	PORTB = 0xFF; /* enable pull up on PORTB */
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF; /* enable pull up on PORTC */
     5e4:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF; /* enable pull up on PORTD */
     5e6:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF; /* enable pull up on PORTE */
     5e8:	8e b9       	out	0x0e, r24	; 14

	time_init();
     5ea:	43 d1       	rcall	.+646    	; 0x872 <time_init>
	switch_init();
     5ec:	36 d1       	rcall	.+620    	; 0x85a <switch_init>
	break_init();
     5ee:	9e de       	rcall	.-708    	; 0x32c <break_init>
	dac_init();
     5f0:	a4 de       	rcall	.-696    	; 0x33a <dac_init>
	uart_init();
     5f2:	9c d1       	rcall	.+824    	; 0x92c <uart_init>
	led_init();
     5f4:	e5 de       	rcall	.-566    	; 0x3c0 <led_init>
	adc_init();
     5f6:	b0 dd       	rcall	.-1184   	; 0x158 <adc_init>
	psc_init(MAX_PWM, DEADTIME);
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	98 e0       	ldi	r25, 0x08	; 8
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	f9 d2       	rcall	.+1522   	; 0xbf2 <psc_init>
	timer0_init();
     600:	44 d4       	rcall	.+2184   	; 0xe8a <timer0_init>

	sei(); /* allow interruptions */
     602:	78 94       	sei

	while (1) {
        led1_toggle();
		led2_set_state(switch_get_state()); /* TODO - can be removed */
		print_info();
     604:	04 ec       	ldi	r16, 0xC4	; 196
     606:	19 e0       	ldi	r17, 0x09	; 9
     608:	c0 e9       	ldi	r28, 0x90	; 144
     60a:	d1 e0       	ldi	r29, 0x01	; 1
	timer0_init();

	sei(); /* allow interruptions */

	while (1) {
        led1_toggle();
     60c:	e4 de       	rcall	.-568    	; 0x3d6 <led1_toggle>
		led2_set_state(switch_get_state()); /* TODO - can be removed */
     60e:	2b d1       	rcall	.+598    	; 0x866 <switch_get_state>
     610:	fe de       	rcall	.-516    	; 0x40e <led2_set_state>
		print_info();
     612:	1e df       	rcall	.-452    	; 0x450 <print_info>
     614:	98 01       	movw	r18, r16
     616:	ce 01       	movw	r24, r28
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <main+0x40>
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	30 40       	sbci	r19, 0x00	; 0
     620:	d1 f7       	brne	.-12     	; 0x616 <main+0x3e>
     622:	f4 cf       	rjmp	.-24     	; 0x60c <main+0x34>

00000624 <pid_Init>:
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor,
		struct PID_DATA *pid)
// Set up PID controller parameters
{
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	fc 01       	movw	r30, r24
     632:	7b 01       	movw	r14, r22
     634:	69 01       	movw	r12, r18
	// Start values for PID controller
	pid->sumError = 0;
     636:	d9 01       	movw	r26, r18
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	1d 92       	st	X+, r1
     63c:	1d 92       	st	X+, r1
     63e:	1d 92       	st	X+, r1
     640:	1c 92       	st	X, r1
     642:	15 97       	sbiw	r26, 0x05	; 5
	pid->lastProcessValue = 0;
     644:	11 96       	adiw	r26, 0x01	; 1
     646:	1c 92       	st	X, r1
     648:	1e 92       	st	-X, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
     64a:	17 96       	adiw	r26, 0x07	; 7
     64c:	9c 93       	st	X, r25
     64e:	8e 93       	st	-X, r24
     650:	16 97       	sbiw	r26, 0x06	; 6
	pid->I_Factor = i_factor;
     652:	19 96       	adiw	r26, 0x09	; 9
     654:	7c 93       	st	X, r23
     656:	6e 93       	st	-X, r22
     658:	18 97       	sbiw	r26, 0x08	; 8
	pid->D_Factor = d_factor;
     65a:	1b 96       	adiw	r26, 0x0b	; 11
     65c:	5c 93       	st	X, r21
     65e:	4e 93       	st	-X, r20
     660:	1a 97       	sbiw	r26, 0x0a	; 10
	// Limits to avoid overflow
	pid->maxError = INT16_MAX / (pid->P_Factor + 1);
     662:	31 96       	adiw	r30, 0x01	; 1
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	9f e7       	ldi	r25, 0x7F	; 127
     668:	bf 01       	movw	r22, r30
     66a:	f0 d5       	rcall	.+3040   	; 0x124c <__divmodhi4>
     66c:	f9 01       	movw	r30, r18
     66e:	75 87       	std	Z+13, r23	; 0x0d
     670:	64 87       	std	Z+12, r22	; 0x0c
	pid->maxSumError = (INT32_MAX / 2) / (pid->I_Factor + 1);
     672:	08 94       	sec
     674:	e1 1c       	adc	r14, r1
     676:	f1 1c       	adc	r15, r1
     678:	00 27       	eor	r16, r16
     67a:	f7 fc       	sbrc	r15, 7
     67c:	00 95       	com	r16
     67e:	10 2f       	mov	r17, r16
     680:	6f ef       	ldi	r22, 0xFF	; 255
     682:	7f ef       	ldi	r23, 0xFF	; 255
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	9f e3       	ldi	r25, 0x3F	; 63
     688:	a8 01       	movw	r20, r16
     68a:	97 01       	movw	r18, r14
     68c:	f2 d5       	rcall	.+3044   	; 0x1272 <__divmodsi4>
     68e:	d6 01       	movw	r26, r12
     690:	1e 96       	adiw	r26, 0x0e	; 14
     692:	2d 93       	st	X+, r18
     694:	3d 93       	st	X+, r19
     696:	4d 93       	st	X+, r20
     698:	5c 93       	st	X, r21
     69a:	51 97       	sbiw	r26, 0x11	; 17
}
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	08 95       	ret

000006aa <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue,
		struct PID_DATA *pid_st) {
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	6b 01       	movw	r12, r22
     6c0:	ea 01       	movw	r28, r20
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;

	error = setPoint - processValue;
     6c2:	bc 01       	movw	r22, r24
     6c4:	6c 19       	sub	r22, r12
     6c6:	7d 09       	sbc	r23, r13

	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError) {
     6c8:	2c 85       	ldd	r18, Y+12	; 0x0c
     6ca:	3d 85       	ldd	r19, Y+13	; 0x0d
     6cc:	26 17       	cp	r18, r22
     6ce:	37 07       	cpc	r19, r23
     6d0:	3c f4       	brge	.+14     	; 0x6e0 <pid_Controller+0x36>
     6d2:	0f 2e       	mov	r0, r31
     6d4:	ff ef       	ldi	r31, 0xFF	; 255
     6d6:	af 2e       	mov	r10, r31
     6d8:	ff e7       	ldi	r31, 0x7F	; 127
     6da:	bf 2e       	mov	r11, r31
     6dc:	f0 2d       	mov	r31, r0
     6de:	17 c0       	rjmp	.+46     	; 0x70e <pid_Controller+0x64>
		p_term = INT16_MAX;
	} else if (error < -pid_st->maxError) {
     6e0:	88 27       	eor	r24, r24
     6e2:	99 27       	eor	r25, r25
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	68 17       	cp	r22, r24
     6ea:	79 07       	cpc	r23, r25
     6ec:	3c f4       	brge	.+14     	; 0x6fc <pid_Controller+0x52>
     6ee:	0f 2e       	mov	r0, r31
     6f0:	f1 e0       	ldi	r31, 0x01	; 1
     6f2:	af 2e       	mov	r10, r31
     6f4:	f0 e8       	ldi	r31, 0x80	; 128
     6f6:	bf 2e       	mov	r11, r31
     6f8:	f0 2d       	mov	r31, r0
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <pid_Controller+0x64>
		p_term = -INT16_MAX;
	} else {
		p_term = pid_st->P_Factor * error;
     6fc:	8e 81       	ldd	r24, Y+6	; 0x06
     6fe:	9f 81       	ldd	r25, Y+7	; 0x07
     700:	68 9f       	mul	r22, r24
     702:	50 01       	movw	r10, r0
     704:	69 9f       	mul	r22, r25
     706:	b0 0c       	add	r11, r0
     708:	78 9f       	mul	r23, r24
     70a:	b0 0c       	add	r11, r0
     70c:	11 24       	eor	r1, r1
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
     70e:	9b 01       	movw	r18, r22
     710:	44 27       	eor	r20, r20
     712:	37 fd       	sbrc	r19, 7
     714:	40 95       	com	r20
     716:	54 2f       	mov	r21, r20
     718:	8a 81       	ldd	r24, Y+2	; 0x02
     71a:	9b 81       	ldd	r25, Y+3	; 0x03
     71c:	ac 81       	ldd	r26, Y+4	; 0x04
     71e:	bd 81       	ldd	r27, Y+5	; 0x05
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	62 0f       	add	r22, r18
     726:	73 1f       	adc	r23, r19
     728:	84 1f       	adc	r24, r20
     72a:	95 1f       	adc	r25, r21
	if (temp > pid_st->maxSumError) {
     72c:	2e 85       	ldd	r18, Y+14	; 0x0e
     72e:	3f 85       	ldd	r19, Y+15	; 0x0f
     730:	48 89       	ldd	r20, Y+16	; 0x10
     732:	59 89       	ldd	r21, Y+17	; 0x11
     734:	26 17       	cp	r18, r22
     736:	37 07       	cpc	r19, r23
     738:	48 07       	cpc	r20, r24
     73a:	59 07       	cpc	r21, r25
     73c:	7c f4       	brge	.+30     	; 0x75c <pid_Controller+0xb2>
		i_term = (INT32_MAX / 2);
		pid_st->sumError = pid_st->maxSumError;
     73e:	2a 83       	std	Y+2, r18	; 0x02
     740:	3b 83       	std	Y+3, r19	; 0x03
     742:	4c 83       	std	Y+4, r20	; 0x04
     744:	5d 83       	std	Y+5, r21	; 0x05
     746:	0f 2e       	mov	r0, r31
     748:	ff ef       	ldi	r31, 0xFF	; 255
     74a:	ef 2e       	mov	r14, r31
     74c:	ff ef       	ldi	r31, 0xFF	; 255
     74e:	ff 2e       	mov	r15, r31
     750:	ff ef       	ldi	r31, 0xFF	; 255
     752:	0f 2f       	mov	r16, r31
     754:	ff e3       	ldi	r31, 0x3F	; 63
     756:	1f 2f       	mov	r17, r31
     758:	f0 2d       	mov	r31, r0
     75a:	28 c0       	rjmp	.+80     	; 0x7ac <pid_Controller+0x102>
	} else if (temp < -pid_st->maxSumError) {
     75c:	ee 24       	eor	r14, r14
     75e:	ff 24       	eor	r15, r15
     760:	87 01       	movw	r16, r14
     762:	e2 1a       	sub	r14, r18
     764:	f3 0a       	sbc	r15, r19
     766:	04 0b       	sbc	r16, r20
     768:	15 0b       	sbc	r17, r21
     76a:	6e 15       	cp	r22, r14
     76c:	7f 05       	cpc	r23, r15
     76e:	80 07       	cpc	r24, r16
     770:	91 07       	cpc	r25, r17
     772:	7c f4       	brge	.+30     	; 0x792 <pid_Controller+0xe8>
		i_term = -(INT32_MAX / 2);
		pid_st->sumError = -pid_st->maxSumError;
     774:	ea 82       	std	Y+2, r14	; 0x02
     776:	fb 82       	std	Y+3, r15	; 0x03
     778:	0c 83       	std	Y+4, r16	; 0x04
     77a:	1d 83       	std	Y+5, r17	; 0x05
     77c:	0f 2e       	mov	r0, r31
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	ef 2e       	mov	r14, r31
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ff 2e       	mov	r15, r31
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	0f 2f       	mov	r16, r31
     78a:	f0 ec       	ldi	r31, 0xC0	; 192
     78c:	1f 2f       	mov	r17, r31
     78e:	f0 2d       	mov	r31, r0
     790:	0d c0       	rjmp	.+26     	; 0x7ac <pid_Controller+0x102>
	} else {
		pid_st->sumError = temp;
     792:	6a 83       	std	Y+2, r22	; 0x02
     794:	7b 83       	std	Y+3, r23	; 0x03
     796:	8c 83       	std	Y+4, r24	; 0x04
     798:	9d 83       	std	Y+5, r25	; 0x05
		i_term = pid_st->I_Factor * pid_st->sumError;
     79a:	28 85       	ldd	r18, Y+8	; 0x08
     79c:	39 85       	ldd	r19, Y+9	; 0x09
     79e:	44 27       	eor	r20, r20
     7a0:	37 fd       	sbrc	r19, 7
     7a2:	40 95       	com	r20
     7a4:	54 2f       	mov	r21, r20
     7a6:	33 d5       	rcall	.+2662   	; 0x120e <__mulsi3>
     7a8:	7b 01       	movw	r14, r22
     7aa:	8c 01       	movw	r16, r24
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     7ac:	88 81       	ld	r24, Y
     7ae:	99 81       	ldd	r25, Y+1	; 0x01
     7b0:	8c 19       	sub	r24, r12
     7b2:	9d 09       	sbc	r25, r13
     7b4:	2a 85       	ldd	r18, Y+10	; 0x0a
     7b6:	3b 85       	ldd	r19, Y+11	; 0x0b
     7b8:	a9 01       	movw	r20, r18
     7ba:	84 9f       	mul	r24, r20
     7bc:	90 01       	movw	r18, r0
     7be:	85 9f       	mul	r24, r21
     7c0:	30 0d       	add	r19, r0
     7c2:	94 9f       	mul	r25, r20
     7c4:	30 0d       	add	r19, r0
     7c6:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
     7c8:	d9 82       	std	Y+1, r13	; 0x01
     7ca:	c8 82       	st	Y, r12

	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     7cc:	b5 01       	movw	r22, r10
     7ce:	88 27       	eor	r24, r24
     7d0:	77 fd       	sbrc	r23, 7
     7d2:	80 95       	com	r24
     7d4:	98 2f       	mov	r25, r24
     7d6:	44 27       	eor	r20, r20
     7d8:	37 fd       	sbrc	r19, 7
     7da:	40 95       	com	r20
     7dc:	54 2f       	mov	r21, r20
     7de:	62 0f       	add	r22, r18
     7e0:	73 1f       	adc	r23, r19
     7e2:	84 1f       	adc	r24, r20
     7e4:	95 1f       	adc	r25, r21
     7e6:	6e 0d       	add	r22, r14
     7e8:	7f 1d       	adc	r23, r15
     7ea:	80 1f       	adc	r24, r16
     7ec:	91 1f       	adc	r25, r17
     7ee:	20 e8       	ldi	r18, 0x80	; 128
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	3d d5       	rcall	.+2682   	; 0x1272 <__divmodsi4>
     7f8:	82 2f       	mov	r24, r18
     7fa:	93 2f       	mov	r25, r19
     7fc:	a4 2f       	mov	r26, r20
     7fe:	b5 2f       	mov	r27, r21
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	50 e8       	ldi	r21, 0x80	; 128
     804:	95 07       	cpc	r25, r21
     806:	5f ef       	ldi	r21, 0xFF	; 255
     808:	a5 07       	cpc	r26, r21
     80a:	5f ef       	ldi	r21, 0xFF	; 255
     80c:	b5 07       	cpc	r27, r21
     80e:	24 f4       	brge	.+8      	; 0x818 <pid_Controller+0x16e>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e8       	ldi	r25, 0x80	; 128
     814:	af ef       	ldi	r26, 0xFF	; 255
     816:	bf ef       	ldi	r27, 0xFF	; 255
     818:	9c 01       	movw	r18, r24
     81a:	ad 01       	movw	r20, r26
     81c:	20 30       	cpi	r18, 0x00	; 0
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	38 07       	cpc	r19, r24
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	48 07       	cpc	r20, r24
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	58 07       	cpc	r21, r24
     82a:	24 f0       	brlt	.+8      	; 0x834 <pid_Controller+0x18a>
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	3f e7       	ldi	r19, 0x7F	; 127
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
	} else if (ret < -INT16_MAX) {
		ret = -INT16_MAX;
	}

	return ((int16_t) ret);
}
     834:	82 2f       	mov	r24, r18
     836:	93 2f       	mov	r25, r19
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	08 95       	ret

0000084e <pid_Reset_Integrator>:
/*! \brief Resets the integrator.
 *
 *  Calling this function will reset the integrator in the PID regulator.
 */
void pid_Reset_Integrator(pidData_t *pid_st) {
	pid_st->sumError = 0;
     84e:	fc 01       	movw	r30, r24
     850:	12 82       	std	Z+2, r1	; 0x02
     852:	13 82       	std	Z+3, r1	; 0x03
     854:	14 82       	std	Z+4, r1	; 0x04
     856:	15 82       	std	Z+5, r1	; 0x05
}
     858:	08 95       	ret

0000085a <switch_init>:
#define SWITCH_DDR  DDRC
#define SWITCH_PIN  PC1


void switch_init(void){
	SWITCH_DDR &= ~(1 << SWITCH_PIN);
     85a:	e7 e2       	ldi	r30, 0x27	; 39
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8d 7f       	andi	r24, 0xFD	; 253
     862:	80 83       	st	Z, r24
}
     864:	08 95       	ret

00000866 <switch_get_state>:

state_t switch_get_state(void){
	return (SWITCH_IN & (1 << SWITCH_PIN)) ? ON : OFF;
     866:	86 b1       	in	r24, 0x06	; 6
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	96 95       	lsr	r25
     86c:	87 95       	ror	r24
}
     86e:	81 70       	andi	r24, 0x01	; 1
     870:	08 95       	ret

00000872 <time_init>:
#include <util/atomic.h>

static volatile uint16_t time;

void time_init(void) {
	TCCR1A = 0;
     872:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 1 << CS10;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1 << TOIE1;
     87c:	80 93 6f 00 	sts	0x006F, r24
}
     880:	08 95       	ret

00000882 <time_get>:

time_t time_get(void) {
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	00 d0       	rcall	.+0      	; 0x888 <time_get+0x6>
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
	typeof(time) high;
	uint16_t low;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     88c:	2f b7       	in	r18, 0x3f	; 63
     88e:	f8 94       	cli
		high = time;
     890:	80 91 a6 01 	lds	r24, 0x01A6
     894:	90 91 a7 01 	lds	r25, 0x01A7
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	89 83       	std	Y+1, r24	; 0x01
		low = TCNT1;
     89c:	80 91 84 00 	lds	r24, 0x0084
     8a0:	90 91 85 00 	lds	r25, 0x0085
     8a4:	2f bf       	out	0x3f, r18	; 63
	}

	return ((time_t)high << 16) | low;
     8a6:	29 81       	ldd	r18, Y+1	; 0x01
     8a8:	3a 81       	ldd	r19, Y+2	; 0x02
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	a9 01       	movw	r20, r18
     8b0:	33 27       	eor	r19, r19
     8b2:	22 27       	eor	r18, r18
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	28 2b       	or	r18, r24
     8ba:	39 2b       	or	r19, r25
     8bc:	4a 2b       	or	r20, r26
     8be:	5b 2b       	or	r21, r27
}
     8c0:	62 2f       	mov	r22, r18
     8c2:	73 2f       	mov	r23, r19
     8c4:	84 2f       	mov	r24, r20
     8c6:	95 2f       	mov	r25, r21
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	cf 91       	pop	r28
     8ce:	df 91       	pop	r29
     8d0:	08 95       	ret

000008d2 <time_get_diff>:

time_t time_get_diff(time_t old) {
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	7b 01       	movw	r14, r22
     8dc:	8c 01       	movw	r16, r24
	return time_get() - old;
     8de:	d1 df       	rcall	.-94     	; 0x882 <time_get>
     8e0:	9b 01       	movw	r18, r22
     8e2:	ac 01       	movw	r20, r24
     8e4:	2e 19       	sub	r18, r14
     8e6:	3f 09       	sbc	r19, r15
     8e8:	40 0b       	sbc	r20, r16
     8ea:	51 0b       	sbc	r21, r17
}
     8ec:	62 2f       	mov	r22, r18
     8ee:	73 2f       	mov	r23, r19
     8f0:	84 2f       	mov	r24, r20
     8f2:	95 2f       	mov	r25, r21
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	08 95       	ret

000008fe <__vector_15>:


ISR(TIMER1_OVF_vect) {
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	8f 93       	push	r24
     90a:	9f 93       	push	r25
	time++;
     90c:	80 91 a6 01 	lds	r24, 0x01A6
     910:	90 91 a7 01 	lds	r25, 0x01A7
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	90 93 a7 01 	sts	0x01A7, r25
     91a:	80 93 a6 01 	sts	0x01A6, r24
}
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <uart_init>:
static FILE mystdout = FDEV_SETUP_STREAM(&uart_stdio_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE mystdin  = FDEV_SETUP_STREAM(NULL, &uart_stdio_getchar, _FDEV_SETUP_READ);

void uart_init(void) {
    /* Set baud rate */
    UBRRH = UBRRH_VALUE;
     92c:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRL_VALUE;
     930:	82 e2       	ldi	r24, 0x22	; 34
     932:	80 93 c4 00 	sts	0x00C4, r24
    /* Clear TXC and set/clear double speed mode */
    UCSRA = (1<<TXC) | (USE_2X<<U2X);
     936:	82 e4       	ldi	r24, 0x42	; 66
     938:	80 93 c0 00 	sts	0x00C0, r24
    /* Set frame format: 8data, no parity & 1 stop bit */
    UCSRC = (1<<UCSZ1) | (1<<UCSZ0);
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable receiver and transmitter */
    UCSRB = (1<<RXEN) | (1<<TXEN);
     942:	88 e1       	ldi	r24, 0x18	; 24
     944:	80 93 c1 00 	sts	0x00C1, r24

    stdout = &mystdout;
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 bd 01 	sts	0x01BD, r25
     950:	80 93 bc 01 	sts	0x01BC, r24
    stdin  = &mystdin;
     954:	81 e1       	ldi	r24, 0x11	; 17
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	90 93 bb 01 	sts	0x01BB, r25
     95c:	80 93 ba 01 	sts	0x01BA, r24
}
     960:	08 95       	ret

00000962 <uart_stdio_putchar>:

static int uart_stdio_putchar(char c, FILE *stream) {
     962:	1f 93       	push	r17
     964:	18 2f       	mov	r17, r24
	if (c == '\n')
     966:	8a 30       	cpi	r24, 0x0A	; 10
     968:	11 f4       	brne	.+4      	; 0x96e <uart_stdio_putchar+0xc>
		uart_stdio_putchar('\r', stream);
     96a:	8d e0       	ldi	r24, 0x0D	; 13
     96c:	fa df       	rcall	.-12     	; 0x962 <uart_stdio_putchar>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/setbaud.h>

inline bool uart_isTXempty(void) {
    return (UCSRA & (1<<UDRE)) ? true : false;
     96e:	e0 ec       	ldi	r30, 0xC0	; 192
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
    /* Wait for empty transmit buffer */
    while (false == uart_isTXempty())
     974:	85 ff       	sbrs	r24, 5
     976:	fd cf       	rjmp	.-6      	; 0x972 <uart_stdio_putchar+0x10>
        ;
	UDR = c;
     978:	10 93 c6 00 	sts	0x00C6, r17
	return 0;
}
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	1f 91       	pop	r17
     982:	08 95       	ret

00000984 <uart_stdio_getchar>:
}

inline bool uart_isRXempty(void) {
    return (UCSRA & (1<<RXC)) ? false : true;
     984:	e0 ec       	ldi	r30, 0xC0	; 192
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z

static int uart_stdio_getchar(FILE *stream) {
    /* Wait for data to be received */
    while (true == uart_isRXempty())
     98a:	88 23       	and	r24, r24
     98c:	ec f7       	brge	.-6      	; 0x988 <uart_stdio_getchar+0x4>
        ;
    /* Get and return received data from buffer */
    return UDR;
     98e:	80 91 c6 00 	lds	r24, 0x00C6
}
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	08 95       	ret

00000996 <SVPWM>:
 * Ts = MAX_PWM
 * Vx is at most Vmax * sqrt(3)/2
 * Vx is a requested size of voltage (a size of requested vector)
 * so the "amp" can be in range 0...MAX_PWM
 */
void SVPWM(uint16_t amp, uint8_t angle_increment, pwm_t *pwm) {
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	8a 01       	movw	r16, r20
	static uint8_t  angle = 0; /* angle in "tab_sin" units */
	uint16_t        tau1, tau2;
	uint16_t        val1, val2_1, val3, val2_2;

	/* Angle increment is too big */
	assert(angle_increment <= ANGLE_INCREMENT_MAX);
     9a2:	67 30       	cpi	r22, 0x07	; 7
     9a4:	18 f0       	brcs	.+6      	; 0x9ac <SVPWM+0x16>
     9a6:	81 e2       	ldi	r24, 0x21	; 33
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	8d dc       	rcall	.-1766   	; 0x2c6 <assert_handle>
	/* Amplitude is too big */
	assert(amp <= MAX_PWM);
     9ac:	88 e0       	ldi	r24, 0x08	; 8
     9ae:	c1 30       	cpi	r28, 0x01	; 1
     9b0:	d8 07       	cpc	r29, r24
     9b2:	18 f0       	brcs	.+6      	; 0x9ba <SVPWM+0x24>
     9b4:	83 e2       	ldi	r24, 0x23	; 35
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	86 dc       	rcall	.-1780   	; 0x2c6 <assert_handle>
	/* Data type of "angle" is too small for angle computation */
	cassert(MAX_VALUE(angle) >= MAX_ANGLE + ANGLE_INCREMENT_MAX);
	/* If not fulfilled, 1 sector can be skipped. Current algorithm can't handle it. */
	cassert(MAX_ANGLE >= ANGLE_INCREMENT_MAX);

	angle += angle_increment;
     9ba:	80 91 a8 01 	lds	r24, 0x01A8
     9be:	68 0f       	add	r22, r24
     9c0:	60 93 a8 01 	sts	0x01A8, r22

	if (angle > MAX_ANGLE) {
     9c4:	6d 37       	cpi	r22, 0x7D	; 125
     9c6:	70 f0       	brcs	.+28     	; 0x9e4 <SVPWM+0x4e>
		angle -= MAX_ANGLE;
     9c8:	86 2f       	mov	r24, r22
     9ca:	8c 57       	subi	r24, 0x7C	; 124
     9cc:	80 93 a8 01 	sts	0x01A8, r24
		sector_number++;
     9d0:	80 91 1f 01 	lds	r24, 0x011F
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 93 1f 01 	sts	0x011F, r24

		if (sector_number > 6) {
     9da:	87 30       	cpi	r24, 0x07	; 7
     9dc:	18 f0       	brcs	.+6      	; 0x9e4 <SVPWM+0x4e>
			sector_number = 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 1f 01 	sts	0x011F, r24
	//tau2 = ((uint32_t)amp * tab_sin[angle]) / TAB_SIN_SCALE;

	/* faster */
	/* call MultiUU16X8toH16 to multiply amp and tab_sin and take high 16bits to divide it by 256 */
	cassert(TAB_SIN_SCALE == 256);
	MultiUU16X8toH16(tau1, amp, tab_sin[MAX_ANGLE - angle]);
     9e4:	20 91 a8 01 	lds	r18, 0x01A8
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	8c e7       	ldi	r24, 0x7C	; 124
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	82 1b       	sub	r24, r18
     9f0:	93 0b       	sbc	r25, r19
     9f2:	e0 e2       	ldi	r30, 0x20	; 32
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
     9f6:	df 01       	movw	r26, r30
     9f8:	a8 0f       	add	r26, r24
     9fa:	b9 1f       	adc	r27, r25
     9fc:	8c 91       	ld	r24, X
     9fe:	d8 9f       	mul	r29, r24
     a00:	a0 01       	movw	r20, r0
     a02:	c8 9f       	mul	r28, r24
     a04:	41 0d       	add	r20, r1
     a06:	11 24       	eor	r1, r1
     a08:	51 1d       	adc	r21, r1
	MultiUU16X8toH16(tau2, amp, tab_sin[angle]);
     a0a:	e2 0f       	add	r30, r18
     a0c:	f3 1f       	adc	r31, r19
     a0e:	80 81       	ld	r24, Z
     a10:	d8 9f       	mul	r29, r24
     a12:	90 01       	movw	r18, r0
     a14:	c8 9f       	mul	r28, r24
     a16:	21 0d       	add	r18, r1
     a18:	11 24       	eor	r1, r1
     a1a:	31 1d       	adc	r19, r1
	 *	 val0 = (MAX_PWM - t1 - t2) / 2
	 *   val1 = (MAX_PWM + t1 - t2) / 2
	 *   val2 = (MAX_PWM + t1 + t2) / 2
	 */

	assert(tau1 + tau2 <= MAX_PWM);
     a1c:	b9 01       	movw	r22, r18
     a1e:	64 0f       	add	r22, r20
     a20:	75 1f       	adc	r23, r21
     a22:	a8 e0       	ldi	r26, 0x08	; 8
     a24:	61 30       	cpi	r22, 0x01	; 1
     a26:	7a 07       	cpc	r23, r26
     a28:	18 f0       	brcs	.+6      	; 0xa30 <SVPWM+0x9a>
     a2a:	89 e6       	ldi	r24, 0x69	; 105
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	4b dc       	rcall	.-1898   	; 0x2c6 <assert_handle>
	val1   = (MAX_PWM - tau1 - tau2) / 2;
     a30:	88 27       	eor	r24, r24
     a32:	99 27       	eor	r25, r25
     a34:	84 1b       	sub	r24, r20
     a36:	95 0b       	sbc	r25, r21
     a38:	82 1b       	sub	r24, r18
     a3a:	93 0b       	sbc	r25, r19
     a3c:	80 50       	subi	r24, 0x00	; 0
     a3e:	98 4f       	sbci	r25, 0xF8	; 248
     a40:	dc 01       	movw	r26, r24
     a42:	b6 95       	lsr	r27
     a44:	a7 95       	ror	r26
	val2_1 = (MAX_PWM + tau1 - tau2) / 2;
     a46:	ca 01       	movw	r24, r20
     a48:	80 50       	subi	r24, 0x00	; 0
     a4a:	98 4f       	sbci	r25, 0xF8	; 248
     a4c:	82 1b       	sub	r24, r18
     a4e:	93 0b       	sbc	r25, r19
     a50:	fc 01       	movw	r30, r24
     a52:	f6 95       	lsr	r31
     a54:	e7 95       	ror	r30
	val2_2 = (MAX_PWM - tau1 + tau2) / 2;
     a56:	c9 01       	movw	r24, r18
     a58:	80 50       	subi	r24, 0x00	; 0
     a5a:	98 4f       	sbci	r25, 0xF8	; 248
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	ac 01       	movw	r20, r24
     a62:	56 95       	lsr	r21
     a64:	47 95       	ror	r20
	val3   = (MAX_PWM + tau1 + tau2) / 2;
     a66:	cb 01       	movw	r24, r22
     a68:	80 50       	subi	r24, 0x00	; 0
     a6a:	98 4f       	sbci	r25, 0xF8	; 248
     a6c:	96 95       	lsr	r25
     a6e:	87 95       	ror	r24

	switch (sector_number) {
     a70:	20 91 1f 01 	lds	r18, 0x011F
     a74:	23 30       	cpi	r18, 0x03	; 3
     a76:	f1 f0       	breq	.+60     	; 0xab4 <SVPWM+0x11e>
     a78:	24 30       	cpi	r18, 0x04	; 4
     a7a:	28 f4       	brcc	.+10     	; 0xa86 <SVPWM+0xf0>
     a7c:	21 30       	cpi	r18, 0x01	; 1
     a7e:	51 f0       	breq	.+20     	; 0xa94 <SVPWM+0xfe>
     a80:	22 30       	cpi	r18, 0x02	; 2
     a82:	c1 f5       	brne	.+112    	; 0xaf4 <SVPWM+0x15e>
     a84:	0f c0       	rjmp	.+30     	; 0xaa4 <SVPWM+0x10e>
     a86:	25 30       	cpi	r18, 0x05	; 5
     a88:	29 f1       	breq	.+74     	; 0xad4 <SVPWM+0x13e>
     a8a:	25 30       	cpi	r18, 0x05	; 5
     a8c:	d8 f0       	brcs	.+54     	; 0xac4 <SVPWM+0x12e>
     a8e:	26 30       	cpi	r18, 0x06	; 6
     a90:	89 f5       	brne	.+98     	; 0xaf4 <SVPWM+0x15e>
     a92:	28 c0       	rjmp	.+80     	; 0xae4 <SVPWM+0x14e>
		 * MAX_PWM ------------+
		 *
		 * t1 = tau1
		 * t2 = tau2
		 */
		pwm->pwm0 = val1;
     a94:	e8 01       	movw	r28, r16
     a96:	b9 83       	std	Y+1, r27	; 0x01
     a98:	a8 83       	st	Y, r26
		pwm->pwm1 = val2_1;
     a9a:	fb 83       	std	Y+3, r31	; 0x03
     a9c:	ea 83       	std	Y+2, r30	; 0x02
		pwm->pwm2 = val3;
     a9e:	9d 83       	std	Y+5, r25	; 0x05
     aa0:	8c 83       	std	Y+4, r24	; 0x04
     aa2:	2b c0       	rjmp	.+86     	; 0xafa <SVPWM+0x164>
		 *     val2 --------+  |
		 * MAX_PWM ------------+
		 *
		 * but t1 is now t2 and t2 is t1
		 */
		pwm->pwm0 = val2_2;
     aa4:	f8 01       	movw	r30, r16
     aa6:	51 83       	std	Z+1, r21	; 0x01
     aa8:	40 83       	st	Z, r20
		pwm->pwm1 = val1;
     aaa:	b3 83       	std	Z+3, r27	; 0x03
     aac:	a2 83       	std	Z+2, r26	; 0x02
		pwm->pwm2 = val3;
     aae:	95 83       	std	Z+5, r25	; 0x05
     ab0:	84 83       	std	Z+4, r24	; 0x04
     ab2:	23 c0       	rjmp	.+70     	; 0xafa <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * t1 = tau1
		 * t2 = tau2
		 */
		pwm->pwm0 = val3;
     ab4:	e8 01       	movw	r28, r16
     ab6:	99 83       	std	Y+1, r25	; 0x01
     ab8:	88 83       	st	Y, r24
		pwm->pwm1 = val1;
     aba:	bb 83       	std	Y+3, r27	; 0x03
     abc:	aa 83       	std	Y+2, r26	; 0x02
		pwm->pwm2 = val2_1;
     abe:	fd 83       	std	Y+5, r31	; 0x05
     ac0:	ec 83       	std	Y+4, r30	; 0x04
     ac2:	1b c0       	rjmp	.+54     	; 0xafa <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * but t1 is now t2 and t2 is t1
		 *
		 */
		pwm->pwm0 = val3;
     ac4:	f8 01       	movw	r30, r16
     ac6:	91 83       	std	Z+1, r25	; 0x01
     ac8:	80 83       	st	Z, r24
		pwm->pwm1 = val2_2;
     aca:	53 83       	std	Z+3, r21	; 0x03
     acc:	42 83       	std	Z+2, r20	; 0x02
		pwm->pwm2 = val1;
     ace:	b5 83       	std	Z+5, r27	; 0x05
     ad0:	a4 83       	std	Z+4, r26	; 0x04
     ad2:	13 c0       	rjmp	.+38     	; 0xafa <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * t1 = tau1
		 * t2 = tau2
		 */
		pwm->pwm0 = val2_1;
     ad4:	e8 01       	movw	r28, r16
     ad6:	f9 83       	std	Y+1, r31	; 0x01
     ad8:	e8 83       	st	Y, r30
		pwm->pwm1 = val3;
     ada:	9b 83       	std	Y+3, r25	; 0x03
     adc:	8a 83       	std	Y+2, r24	; 0x02
		pwm->pwm2 = val1;
     ade:	bd 83       	std	Y+5, r27	; 0x05
     ae0:	ac 83       	std	Y+4, r26	; 0x04
     ae2:	0b c0       	rjmp	.+22     	; 0xafa <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * but t1 is now t2 and t2 is t1
		 *
		 */
		pwm->pwm0 = val1;
     ae4:	f8 01       	movw	r30, r16
     ae6:	b1 83       	std	Z+1, r27	; 0x01
     ae8:	a0 83       	st	Z, r26
		pwm->pwm1 = val3;
     aea:	93 83       	std	Z+3, r25	; 0x03
     aec:	82 83       	std	Z+2, r24	; 0x02
		pwm->pwm2 = val2_2;
     aee:	55 83       	std	Z+5, r21	; 0x05
     af0:	44 83       	std	Z+4, r20	; 0x04
     af2:	03 c0       	rjmp	.+6      	; 0xafa <SVPWM+0x164>
		break;
	default:
		assert(0);
     af4:	82 ee       	ldi	r24, 0xE2	; 226
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	e6 db       	rcall	.-2100   	; 0x2c6 <assert_handle>
		break;
	}
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <psc_halt>:
	PSOC1 = (1 << POEN1B) | (1 << POEN1A);
	PSOC2 = (1 << POEN2B) | (1 << POEN2A);
}

void psc_halt(void) {
	PSOC0 &= ~((1 << POEN0B) | (1 << POEN0A));
     b04:	e0 ed       	ldi	r30, 0xD0	; 208
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	8a 7f       	andi	r24, 0xFA	; 250
     b0c:	80 83       	st	Z, r24
	PSOC1 &= ~((1 << POEN1B) | (1 << POEN1A));
     b0e:	e0 ee       	ldi	r30, 0xE0	; 224
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	8a 7f       	andi	r24, 0xFA	; 250
     b16:	80 83       	st	Z, r24
	PSOC2 &= ~((1 << POEN2B) | (1 << POEN2A));
     b18:	e0 ef       	ldi	r30, 0xF0	; 240
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	8a 7f       	andi	r24, 0xFA	; 250
     b20:	80 83       	st	Z, r24
}
     b22:	08 95       	ret

00000b24 <psc_load>:

/* Load the PSC 0, 1 and 2 with new values */
void psc_load(uint16_t time0, uint16_t time1, uint16_t time2) {
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	ec 01       	movw	r28, r24
	/* slow */
	//	PCNF0 |= 1 << PLOCK0;
	//	PCNF1 |= 1 << PLOCK1;
	//	PCNF2 |= 1 << PLOCK2;
	/* faster */
	set_bit(PCNF0, PLOCK0);
     b2a:	80 91 da 00 	lds	r24, 0x00DA
     b2e:	80 62       	ori	r24, 0x20	; 32
     b30:	80 93 da 00 	sts	0x00DA, r24
	set_bit(PCNF1, PLOCK1);
     b34:	80 91 ea 00 	lds	r24, 0x00EA
     b38:	80 62       	ori	r24, 0x20	; 32
     b3a:	80 93 ea 00 	sts	0x00EA, r24
	set_bit(PCNF2, PLOCK2);
     b3e:	80 91 fa 00 	lds	r24, 0x00FA
     b42:	80 62       	ori	r24, 0x20	; 32
     b44:	80 93 fa 00 	sts	0x00FA, r24

	assert(OCR0RB >= time0 + deadtime);
     b48:	20 91 d8 00 	lds	r18, 0x00D8
     b4c:	30 91 d9 00 	lds	r19, 0x00D9
     b50:	80 91 a9 01 	lds	r24, 0x01A9
     b54:	a8 2f       	mov	r26, r24
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	fe 01       	movw	r30, r28
     b5a:	ea 0f       	add	r30, r26
     b5c:	fb 1f       	adc	r31, r27
     b5e:	2e 17       	cp	r18, r30
     b60:	3f 07       	cpc	r19, r31
     b62:	18 f4       	brcc	.+6      	; 0xb6a <psc_load+0x46>
     b64:	8f e3       	ldi	r24, 0x3F	; 63
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	ae db       	rcall	.-2212   	; 0x2c6 <assert_handle>
	OCR0SA = time0;
     b6a:	d0 93 d3 00 	sts	0x00D3, r29
     b6e:	c0 93 d2 00 	sts	0x00D2, r28
	OCR0SB = time0 + deadtime;
     b72:	f0 93 d7 00 	sts	0x00D7, r31
     b76:	e0 93 d6 00 	sts	0x00D6, r30

	assert(OCR1RB >= time1 + deadtime);
     b7a:	80 91 e8 00 	lds	r24, 0x00E8
     b7e:	90 91 e9 00 	lds	r25, 0x00E9
     b82:	9b 01       	movw	r18, r22
     b84:	2a 0f       	add	r18, r26
     b86:	3b 1f       	adc	r19, r27
     b88:	82 17       	cp	r24, r18
     b8a:	93 07       	cpc	r25, r19
     b8c:	18 f4       	brcc	.+6      	; 0xb94 <psc_load+0x70>
     b8e:	83 e4       	ldi	r24, 0x43	; 67
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	99 db       	rcall	.-2254   	; 0x2c6 <assert_handle>
	OCR1SA = time1;
     b94:	70 93 e3 00 	sts	0x00E3, r23
     b98:	60 93 e2 00 	sts	0x00E2, r22
	OCR1SB = time1 + deadtime;
     b9c:	30 93 e7 00 	sts	0x00E7, r19
     ba0:	20 93 e6 00 	sts	0x00E6, r18

	assert(OCR2RB >= time2 + deadtime);
     ba4:	80 91 f8 00 	lds	r24, 0x00F8
     ba8:	90 91 f9 00 	lds	r25, 0x00F9
     bac:	9a 01       	movw	r18, r20
     bae:	2a 0f       	add	r18, r26
     bb0:	3b 1f       	adc	r19, r27
     bb2:	82 17       	cp	r24, r18
     bb4:	93 07       	cpc	r25, r19
     bb6:	18 f4       	brcc	.+6      	; 0xbbe <psc_load+0x9a>
     bb8:	87 e4       	ldi	r24, 0x47	; 71
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	84 db       	rcall	.-2296   	; 0x2c6 <assert_handle>
	OCR2SA = time2;
     bbe:	50 93 f3 00 	sts	0x00F3, r21
     bc2:	40 93 f2 00 	sts	0x00F2, r20
	OCR2SB = time2 + deadtime;
     bc6:	30 93 f7 00 	sts	0x00F7, r19
     bca:	20 93 f6 00 	sts	0x00F6, r18
	/* slow */
	//	PCNF0 &= ~(1 << PLOCK0);
	//	PCNF1 &= ~(1 << PLOCK1);
	//	PCNF2 &= ~(1 << PLOCK2);
	/* faster */
	clr_bit(PCNF0, PLOCK0);
     bce:	80 91 da 00 	lds	r24, 0x00DA
     bd2:	8f 7d       	andi	r24, 0xDF	; 223
     bd4:	80 93 da 00 	sts	0x00DA, r24
	clr_bit(PCNF1, PLOCK1);
     bd8:	80 91 ea 00 	lds	r24, 0x00EA
     bdc:	8f 7d       	andi	r24, 0xDF	; 223
     bde:	80 93 ea 00 	sts	0x00EA, r24
	clr_bit(PCNF2, PLOCK2);
     be2:	80 91 fa 00 	lds	r24, 0x00FA
     be6:	8f 7d       	andi	r24, 0xDF	; 223
     be8:	80 93 fa 00 	sts	0x00FA, r24
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <psc_init>:
/*
 * Center Aligned Mode
 *
 * PLL should be already started (we drive MCU clock from PLL output)
 */
void psc_init(uint16_t pwm_max_value, uint8_t dead_time) {
     bf2:	9c 01       	movw	r18, r24
	deadtime = dead_time;
     bf4:	60 93 a9 01 	sts	0x01A9, r22

	/* set PLL output to 64Mhz */
	PLLCSR |= 1 << PLLF;
     bf8:	e9 e4       	ldi	r30, 0x49	; 73
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	84 60       	ori	r24, 0x04	; 4
     c00:	80 83       	st	Z, r24
	assert_soft((PLLCSR & 0x07) == 0x07); /* locked, started and 64Mhz */
     c02:	80 81       	ld	r24, Z
     c04:	87 70       	andi	r24, 0x07	; 7
     c06:	87 30       	cpi	r24, 0x07	; 7
     c08:	19 f0       	breq	.+6      	; 0xc10 <psc_init+0x1e>
     c0a:	84 e1       	ldi	r24, 0x14	; 20
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	5b db       	rcall	.-2378   	; 0x2c6 <assert_handle>

	assert_soft((1 << 12) > pwm_max_value + deadtime);
     c10:	c9 01       	movw	r24, r18
     c12:	86 0f       	add	r24, r22
     c14:	91 1d       	adc	r25, r1
     c16:	bc 01       	movw	r22, r24
     c18:	90 e1       	ldi	r25, 0x10	; 16
     c1a:	60 30       	cpi	r22, 0x00	; 0
     c1c:	79 07       	cpc	r23, r25
     c1e:	18 f0       	brcs	.+6      	; 0xc26 <psc_init+0x34>
     c20:	86 e1       	ldi	r24, 0x16	; 22
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	50 db       	rcall	.-2400   	; 0x2c6 <assert_handle>
	OCR0RB = pwm_max_value + deadtime;
     c26:	70 93 d9 00 	sts	0x00D9, r23
     c2a:	60 93 d8 00 	sts	0x00D8, r22
	OCR1RB = pwm_max_value + deadtime;
     c2e:	70 93 e9 00 	sts	0x00E9, r23
     c32:	60 93 e8 00 	sts	0x00E8, r22
	OCR2RB = pwm_max_value + deadtime;
     c36:	70 93 f9 00 	sts	0x00F9, r23
     c3a:	60 93 f8 00 	sts	0x00F8, r22

	/* Center Aligned Mode, fast clock input, Output Polarity: active LOW. */
	PCNF0 = (1 << PMODE01) | (1 << PMODE00) | (1 << PCLKSEL0);
     c3e:	8a e1       	ldi	r24, 0x1A	; 26
     c40:	80 93 da 00 	sts	0x00DA, r24
	PCNF1 = (1 << PMODE11) | (1 << PMODE10) | (1 << PCLKSEL1);
     c44:	80 93 ea 00 	sts	0x00EA, r24
	PCNF2 = (1 << PMODE21) | (1 << PMODE20) | (1 << PCLKSEL2);
     c48:	80 93 fa 00 	sts	0x00FA, r24

	/* PSC0 and PSC1 as slave, PSC2 as master */
	PCTL0 = 1 << PARUN0;
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	80 93 db 00 	sts	0x00DB, r24
	PCTL1 = 1 << PARUN1;
     c52:	80 93 eb 00 	sts	0x00EB, r24
	PCTL2 = 1 << PRUN2;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 fb 00 	sts	0x00FB, r24

	/* PSC2 interrupt at the end of cycle enable */
	PIM2 = 1 << PEOPE2;
     c5c:	80 93 a5 00 	sts	0x00A5, r24

	// connect the PSC waveform generator outputs to the port outputs
	PSOC0 = (1 << POEN0B) | (1 << POEN0A);
     c60:	85 e0       	ldi	r24, 0x05	; 5
     c62:	80 93 d0 00 	sts	0x00D0, r24
	PSOC1 = (1 << POEN1B) | (1 << POEN1A);
     c66:	80 93 e0 00 	sts	0x00E0, r24
	PSOC2 = (1 << POEN2B) | (1 << POEN2A);
     c6a:	80 93 f0 00 	sts	0x00F0, r24
}
     c6e:	08 95       	ret

00000c70 <vector_set_new_speed>:
void vector_set_new_speed(
		uint16_t    new_amplitude,
		uint16_t    new_angle_increment_scaled,
		direction_t new_direction)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c70:	2f b7       	in	r18, 0x3f	; 63
     c72:	f8 94       	cli
		amplitude              = new_amplitude;
     c74:	90 93 af 01 	sts	0x01AF, r25
     c78:	80 93 ae 01 	sts	0x01AE, r24
		angle_increment_scaled = new_angle_increment_scaled;
     c7c:	70 93 ad 01 	sts	0x01AD, r23
     c80:	60 93 ac 01 	sts	0x01AC, r22
		direction              = new_direction;
     c84:	40 93 b0 01 	sts	0x01B0, r20
     c88:	2f bf       	out	0x3f, r18	; 63
	}
}
     c8a:	08 95       	ret

00000c8c <__vector_2>:

/* PSC2 end cycle interrupt handle
 * New vector of magnetization will be calculated and set to PSC in this routine. */
ISR(PSC2_EC_vect) {
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	1f 93       	push	r17
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <__vector_2+0x2a>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <__vector_2+0x2c>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <__vector_2+0x2e>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	uint8_t  angle_units; /* in sin's table "degrees" (units)*/
	pwm_t    pwm;

	/* Prevent overflow */
	cassert(MAX_VALUE(angle_integrator_scaled) >= (ANGLE_INCREMENT_MAX + 1) * ANGLE_SCALE);
	angle_integrator_scaled += angle_increment_scaled;
     cbe:	80 91 ac 01 	lds	r24, 0x01AC
     cc2:	90 91 ad 01 	lds	r25, 0x01AD
     cc6:	20 91 aa 01 	lds	r18, 0x01AA
     cca:	30 91 ab 01 	lds	r19, 0x01AB
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	90 93 ab 01 	sts	0x01AB, r25
     cd6:	80 93 aa 01 	sts	0x01AA, r24

	/* angle_units type is big enough to contain the result
	 * MAX_VALUE(angle_units) >= ((ANGLE_INCREMENT_MAX + 1) * ANGLE_SCALE / ANGLE_SCALE) */
	cassert(MAX_VALUE(angle_units) >= ANGLE_INCREMENT_MAX + 1);
	angle_units = angle_integrator_scaled / ANGLE_SCALE;
     cda:	19 2f       	mov	r17, r25

	if (angle_units) {
     cdc:	99 23       	and	r25, r25
     cde:	69 f1       	breq	.+90     	; 0xd3a <__vector_2+0xae>
		// ------------- space vector PWN algorithm -----------------
		SVPWM(amplitude, angle_units, &pwm);
     ce0:	80 91 ae 01 	lds	r24, 0x01AE
     ce4:	90 91 af 01 	lds	r25, 0x01AF
     ce8:	61 2f       	mov	r22, r17
     cea:	ae 01       	movw	r20, r28
     cec:	4f 5f       	subi	r20, 0xFF	; 255
     cee:	5f 4f       	sbci	r21, 0xFF	; 255
     cf0:	52 de       	rcall	.-860    	; 0x996 <SVPWM>

#		include "../dac.h" /* TODO */
		dac_set_value_scaled(pwm.pwm1, MAX_PWM); /* TODO */
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	78 e0       	ldi	r23, 0x08	; 8
     cfa:	28 db       	rcall	.-2480   	; 0x34c <dac_set_value_scaled>

		// -------- load the PSCs with the new duty cycles -----------
		if (direction == FORWARD) {
     cfc:	80 91 b0 01 	lds	r24, 0x01B0
     d00:	88 23       	and	r24, r24
     d02:	41 f4       	brne	.+16     	; 0xd14 <__vector_2+0x88>
			psc_load(pwm.pwm0, pwm.pwm1, pwm.pwm2);
     d04:	6b 81       	ldd	r22, Y+3	; 0x03
     d06:	7c 81       	ldd	r23, Y+4	; 0x04
     d08:	4d 81       	ldd	r20, Y+5	; 0x05
     d0a:	5e 81       	ldd	r21, Y+6	; 0x06
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	09 df       	rcall	.-494    	; 0xb24 <psc_load>
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <__vector_2+0x96>
		} else {
			psc_load(pwm.pwm0, pwm.pwm2, pwm.pwm1);
     d14:	6d 81       	ldd	r22, Y+5	; 0x05
     d16:	7e 81       	ldd	r23, Y+6	; 0x06
     d18:	4b 81       	ldd	r20, Y+3	; 0x03
     d1a:	5c 81       	ldd	r21, Y+4	; 0x04
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	01 df       	rcall	.-510    	; 0xb24 <psc_load>
		}

		angle_integrator_scaled -= (uint16_t)angle_units * ANGLE_SCALE;
     d22:	31 2f       	mov	r19, r17
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	80 91 aa 01 	lds	r24, 0x01AA
     d2a:	90 91 ab 01 	lds	r25, 0x01AB
     d2e:	82 1b       	sub	r24, r18
     d30:	93 0b       	sbc	r25, r19
     d32:	90 93 ab 01 	sts	0x01AB, r25
     d36:	80 93 aa 01 	sts	0x01AA, r24
	}

	/* test that we are fast enough */
	assert((PIFR2 & (1 << PEOP2)) == 0);
     d3a:	80 91 a4 00 	lds	r24, 0x00A4
     d3e:	80 ff       	sbrs	r24, 0
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <__vector_2+0xbc>
     d42:	8e e3       	ldi	r24, 0x3E	; 62
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	bf da       	rcall	.-2690   	; 0x2c6 <assert_handle>
}
     d48:	26 96       	adiw	r28, 0x06	; 6
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	1f 91       	pop	r17
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <controlVF>:
 * RETURN: PWM max value (will be used in PSC and waveform generation)
 *
 * The return value never exceeds VOLTAGE_MAX, if "angle_increment_scaled"
 * doesn't exceed ANGLE_INCREMENT_MAX.
 */
uint16_t controlVF(uint16_t angle_increment_scaled) {
     d76:	9c 01       	movw	r18, r24
	cassert((uint32_t)ANGLE_INCREMENT_50hz_SCALED * Vf_SLOPE
			<= (uint32_t)MAX_VALUE(angle_increment_scaled));
	/* we will cast it to 8bit */
	cassert(Vf_SLOPE <= UINT8_MAX);

	if (angle_increment_scaled <= ANGLE_INCREMENT_MIN_SCALED) {
     d78:	8e 33       	cpi	r24, 0x3E	; 62
     d7a:	91 05       	cpc	r25, r1
     d7c:	18 f4       	brcc	.+6      	; 0xd84 <controlVF+0xe>
     d7e:	2a ec       	ldi	r18, 0xCA	; 202
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <controlVF+0x3a>
		/* boost frequency */
		amplitude = AMPLITUDE_MIN; /* boost voltage */
	} else if (angle_increment_scaled >= ANGLE_INCREMENT_50hz_SCALED) {
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	26 36       	cpi	r18, 0x66	; 102
     d88:	38 07       	cpc	r19, r24
     d8a:	18 f0       	brcs	.+6      	; 0xd92 <controlVF+0x1c>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	38 e0       	ldi	r19, 0x08	; 8
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <controlVF+0x3a>
		amplitude = AMPLITUDE_MAX; /* rated value */
	} else { /* V/f law */
		/* slow */
		/* amplitude = (angle_increment_scaled * (uint8_t)Vf_SLOPE) / CONTROL_VF_SLOPE_SCALE; */
		/* faster */
		MultiUU16XConst8toL16(amplitude, angle_increment_scaled, Vf_SLOPE);
     d92:	6a e6       	ldi	r22, 0x6A	; 106
     d94:	26 9f       	mul	r18, r22
     d96:	c0 01       	movw	r24, r0
     d98:	36 9f       	mul	r19, r22
     d9a:	90 0d       	add	r25, r0
     d9c:	11 24       	eor	r1, r1
		amplitude /= CONTROL_VF_SLOPE_SCALE;
     d9e:	9c 01       	movw	r18, r24
     da0:	36 95       	lsr	r19
     da2:	27 95       	ror	r18
     da4:	32 95       	swap	r19
     da6:	22 95       	swap	r18
     da8:	2f 70       	andi	r18, 0x0F	; 15
     daa:	23 27       	eor	r18, r19
     dac:	3f 70       	andi	r19, 0x0F	; 15
     dae:	23 27       	eor	r18, r19
	}

	return amplitude;
}
     db0:	82 2f       	mov	r24, r18
     db2:	93 2f       	mov	r25, r19
     db4:	08 95       	ret

00000db6 <current_limitation>:
#include "current_limitation.h"
#include "../adc.h"
#include "../config.h"

int16_t current_limitation(int16_t real_speed, int16_t command) {
     db6:	86 2f       	mov	r24, r22
     db8:	97 2f       	mov	r25, r23
//		return command - ((command - real_speed) / (CURRENT_MAX - CURRENT_TRESHOLD));
//	} else {
//		return real_speed;
//	}
	return command;
}
     dba:	08 95       	ret

00000dbc <dummy_get_real_speed>:
#include "../adc.h"
#include <stdint.h>

int16_t dummy_get_real_speed(void) {
	return 0;
}
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	08 95       	ret

00000dc2 <dummy_get_requested_speed>:
 *   -1 = backward F_MAX/COMMAND_MAX hz
 *  511 = forward  F_MAX hz
 * -512 = backward F_MAX + F_MAX/COMMAND_MAX hz
 * */
int16_t dummy_get_requested_speed(void) {
	return adc_get_speed_pot_value();
     dc2:	d7 d9       	rcall	.-3154   	; 0x172 <adc_get_speed_pot_value>
}
     dc4:	08 95       	ret

00000dc6 <command_reset>:
#define COMMAND_FILTER_LEN 6

static int32_t command;

void command_reset (void) {
	command = 0;
     dc6:	10 92 b1 01 	sts	0x01B1, r1
     dca:	10 92 b2 01 	sts	0x01B2, r1
     dce:	10 92 b3 01 	sts	0x01B3, r1
     dd2:	10 92 b4 01 	sts	0x01B4, r1
}
     dd6:	08 95       	ret

00000dd8 <command_get_old_value>:


int16_t command_get_old_value (void) {
     dd8:	20 91 b1 01 	lds	r18, 0x01B1
     ddc:	30 91 b2 01 	lds	r19, 0x01B2
     de0:	40 91 b3 01 	lds	r20, 0x01B3
     de4:	50 91 b4 01 	lds	r21, 0x01B4
     de8:	68 94       	set
     dea:	15 f8       	bld	r1, 5
     dec:	55 95       	asr	r21
     dee:	47 95       	ror	r20
     df0:	37 95       	ror	r19
     df2:	27 95       	ror	r18
     df4:	16 94       	lsr	r1
     df6:	d1 f7       	brne	.-12     	; 0xdec <command_get_old_value+0x14>
	return command >> COMMAND_FILTER_LEN;
}
     df8:	82 2f       	mov	r24, r18
     dfa:	93 2f       	mov	r25, r19
     dfc:	08 95       	ret

00000dfe <command_get>:
	//command = ((512 - Omega_meas) * 20) / 10; // command with the on board pot
	//command = request ; // command with the generated steps

//	return requested_speed;

	int16_t tmp = command >> COMMAND_FILTER_LEN;
     dfe:	20 91 b1 01 	lds	r18, 0x01B1
     e02:	30 91 b2 01 	lds	r19, 0x01B2
     e06:	40 91 b3 01 	lds	r20, 0x01B3
     e0a:	50 91 b4 01 	lds	r21, 0x01B4
     e0e:	da 01       	movw	r26, r20
     e10:	c9 01       	movw	r24, r18
     e12:	68 94       	set
     e14:	15 f8       	bld	r1, 5
     e16:	b5 95       	asr	r27
     e18:	a7 95       	ror	r26
     e1a:	97 95       	ror	r25
     e1c:	87 95       	ror	r24
     e1e:	16 94       	lsr	r1
     e20:	d1 f7       	brne	.-12     	; 0xe16 <command_get+0x18>

	if (tmp < requested_speed) {
     e22:	86 17       	cp	r24, r22
     e24:	97 07       	cpc	r25, r23
     e26:	74 f4       	brge	.+28     	; 0xe44 <command_get+0x46>
		command++;
     e28:	da 01       	movw	r26, r20
     e2a:	c9 01       	movw	r24, r18
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	a1 1d       	adc	r26, r1
     e30:	b1 1d       	adc	r27, r1
     e32:	80 93 b1 01 	sts	0x01B1, r24
     e36:	90 93 b2 01 	sts	0x01B2, r25
     e3a:	a0 93 b3 01 	sts	0x01B3, r26
     e3e:	b0 93 b4 01 	sts	0x01B4, r27
     e42:	10 c0       	rjmp	.+32     	; 0xe64 <command_get+0x66>
	} else if (tmp > requested_speed) {
     e44:	68 17       	cp	r22, r24
     e46:	79 07       	cpc	r23, r25
     e48:	6c f4       	brge	.+26     	; 0xe64 <command_get+0x66>
		command--;
     e4a:	da 01       	movw	r26, r20
     e4c:	c9 01       	movw	r24, r18
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	a1 09       	sbc	r26, r1
     e52:	b1 09       	sbc	r27, r1
     e54:	80 93 b1 01 	sts	0x01B1, r24
     e58:	90 93 b2 01 	sts	0x01B2, r25
     e5c:	a0 93 b3 01 	sts	0x01B3, r26
     e60:	b0 93 b4 01 	sts	0x01B4, r27
     e64:	20 91 b1 01 	lds	r18, 0x01B1
     e68:	30 91 b2 01 	lds	r19, 0x01B2
     e6c:	40 91 b3 01 	lds	r20, 0x01B3
     e70:	50 91 b4 01 	lds	r21, 0x01B4
     e74:	68 94       	set
     e76:	15 f8       	bld	r1, 5
     e78:	55 95       	asr	r21
     e7a:	47 95       	ror	r20
     e7c:	37 95       	ror	r19
     e7e:	27 95       	ror	r18
     e80:	16 94       	lsr	r1
     e82:	d1 f7       	brne	.-12     	; 0xe78 <command_get+0x7a>
	}

	//return tmp; /* it doesn't matter whether we return old or new value */
	return command >> COMMAND_FILTER_LEN;
}
     e84:	82 2f       	mov	r24, r18
     e86:	93 2f       	mov	r25, r19
     e88:	08 95       	ret

00000e8a <timer0_init>:
#endif

/* Timer 0 Configuration */
void timer0_init (void) {
	cassert(TIMER0_DIVIDER == 64);
	TCCR0B = (1 << CS01) | (1 << CS00);  // f_quartz = 16 MHz / 64 = 250 kHz
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	85 bd       	out	0x25, r24	; 37
	TCCR0A = (1 << WGM01); // mode CTC : Clear Timer on Compare
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	94 bd       	out	0x24, r25	; 36
	OCR0A  = OCR0A_VAL;
     e92:	8f e3       	ldi	r24, 0x3F	; 63
     e94:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A); // allow interruption when timer=compare
     e96:	90 93 6e 00 	sts	0x006E, r25
}
     e9a:	08 95       	ret

00000e9c <__vector_16>:
 *
 * Space vector is recalculated every: 2 * (MAX_PWM + DEADTIME) / 64Mhz =>
 *  2 * MAX_PWM / 64Mhz +  2 * DEADTIME / 64Mhz => 66us (15.15kHz)
 *
 */
ISR(TIMER0_COMPA_vect) {
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
	static volatile bool timer0_int_inprocess;
	int16_t     command, real_speed, requested_speed;
	uint16_t    angle_increment_scaled, amplitude;
	direction_t direction;

	assert(false == timer0_int_inprocess);
     ece:	80 91 b5 01 	lds	r24, 0x01B5
     ed2:	88 23       	and	r24, r24
     ed4:	19 f0       	breq	.+6      	; 0xedc <__vector_16+0x40>
     ed6:	82 e6       	ldi	r24, 0x62	; 98
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	f5 d9       	rcall	.-3094   	; 0x2c6 <assert_handle>
	timer0_int_inprocess = true;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	80 93 b5 01 	sts	0x01B5, r24
	sei(); /* enable interrupts! */
     ee2:	78 94       	sei

	/* get real speed of rotor */
	real_speed = dummy_get_real_speed();
     ee4:	6b df       	rcall	.-298    	; 0xdbc <dummy_get_real_speed>
     ee6:	8c 01       	movw	r16, r24
	assert_soft((real_speed >= -SPEED_MAX) && (real_speed <= SPEED_MAX));
     ee8:	80 50       	subi	r24, 0x00	; 0
     eea:	9e 4f       	sbci	r25, 0xFE	; 254
     eec:	81 50       	subi	r24, 0x01	; 1
     eee:	94 40       	sbci	r25, 0x04	; 4
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <__vector_16+0x5c>
     ef2:	88 e6       	ldi	r24, 0x68	; 104
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	e7 d9       	rcall	.-3122   	; 0x2c6 <assert_handle>

	/* get requested speed from potentiometer  */
	requested_speed = dummy_get_requested_speed();
     ef8:	64 df       	rcall	.-312    	; 0xdc2 <dummy_get_requested_speed>
     efa:	ec 01       	movw	r28, r24
	assert_soft((requested_speed >= -SPEED_MAX) && (requested_speed <= SPEED_MAX));
     efc:	80 50       	subi	r24, 0x00	; 0
     efe:	9e 4f       	sbci	r25, 0xFE	; 254
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	94 40       	sbci	r25, 0x04	; 4
     f04:	18 f0       	brcs	.+6      	; 0xf0c <__vector_16+0x70>
     f06:	8c e6       	ldi	r24, 0x6C	; 108
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	dd d9       	rcall	.-3142   	; 0x2c6 <assert_handle>
	OCR0A  = OCR0A_VAL;
	TIMSK0 = (1 << OCIE0A); // allow interruption when timer=compare
}

static int16_t regulate(int16_t real_speed, int16_t requested_speed) {
	uint8_t current = adc_get_current_value();
     f0c:	58 d9       	rcall	.-3408   	; 0x1be <adc_get_current_value>
	int16_t command;

	/* ------------------- regulate speed  --------------------------------- */
	if (current > CURRENT_MAX) {
     f0e:	8b 35       	cpi	r24, 0x5B	; 91
     f10:	20 f0       	brcs	.+8      	; 0xf1a <__vector_16+0x7e>
		command_reset();
     f12:	59 df       	rcall	.-334    	; 0xdc6 <command_reset>
		command = 0;
		assert(0); /* TODO FIXME  - break needs to be implemented, than remeve this line */
     f14:	87 e2       	ldi	r24, 0x27	; 39
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	d6 d9       	rcall	.-3156   	; 0x2c6 <assert_handle>
	} else if (current > CURRENT_TRESHOLD) {
     f1a:	8d 33       	cpi	r24, 0x3D	; 61
     f1c:	40 f0       	brcs	.+16     	; 0xf2e <__vector_16+0x92>
		command = command_get_old_value();
     f1e:	5c df       	rcall	.-328    	; 0xdd8 <command_get_old_value>
     f20:	ec 01       	movw	r28, r24
	requested_speed = dummy_get_requested_speed();
	assert_soft((requested_speed >= -SPEED_MAX) && (requested_speed <= SPEED_MAX));

	/* regulate the speed and current */
	command = regulate(real_speed, requested_speed);
	assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));
     f22:	80 50       	subi	r24, 0x00	; 0
     f24:	9e 4f       	sbci	r25, 0xFE	; 254
     f26:	81 50       	subi	r24, 0x01	; 1
     f28:	94 40       	sbci	r25, 0x04	; 4
     f2a:	a0 f0       	brcs	.+40     	; 0xf54 <__vector_16+0xb8>
     f2c:	10 c0       	rjmp	.+32     	; 0xf4e <__vector_16+0xb2>
		command = 0;
		assert(0); /* TODO FIXME  - break needs to be implemented, than remeve this line */
	} else if (current > CURRENT_TRESHOLD) {
		command = command_get_old_value();
	} else {
		command = command_get(real_speed, requested_speed);
     f2e:	c8 01       	movw	r24, r16
     f30:	be 01       	movw	r22, r28
     f32:	65 df       	rcall	.-310    	; 0xdfe <command_get>
     f34:	ec 01       	movw	r28, r24
#	ifdef DEBUG
	test_command = command;
     f36:	90 93 b9 01 	sts	0x01B9, r25
     f3a:	80 93 b8 01 	sts	0x01B8, r24
#	endif
		assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));
     f3e:	80 50       	subi	r24, 0x00	; 0
     f40:	9e 4f       	sbci	r25, 0xFE	; 254
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	94 40       	sbci	r25, 0x04	; 4
     f46:	30 f0       	brcs	.+12     	; 0xf54 <__vector_16+0xb8>
     f48:	8f e2       	ldi	r24, 0x2F	; 47
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	bc d9       	rcall	.-3208   	; 0x2c6 <assert_handle>
	requested_speed = dummy_get_requested_speed();
	assert_soft((requested_speed >= -SPEED_MAX) && (requested_speed <= SPEED_MAX));

	/* regulate the speed and current */
	command = regulate(real_speed, requested_speed);
	assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));
     f4e:	80 e7       	ldi	r24, 0x70	; 112
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b9 d9       	rcall	.-3214   	; 0x2c6 <assert_handle>
	/* FIXME */
	//cassert(ANGLE_INCREMENT_MAX_NUMERATOR % ANGLE_INCREMENT_MAX_DENOMINATOR == 0); /* prevent rounding errors */
	/* angle_increment = command_abs * (ANGLE_INTEGRATOR_SCALE * ANGLE_INCREMENT_MAX / COMMAND_MAX); */
	cassert((ANGLE_SCALE * ANGLE_INCREMENT_MAX / COMMAND_MAX) <= UINT8_MAX);

	MultiSU16XConst8toL16(angle_increment_scaled, command_abs,
     f54:	9e 01       	movw	r18, r28
     f56:	dd 23       	and	r29, r29
     f58:	1c f4       	brge	.+6      	; 0xf60 <__vector_16+0xc4>
     f5a:	30 95       	com	r19
     f5c:	21 95       	neg	r18
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	63 e0       	ldi	r22, 0x03	; 3
     f62:	26 9f       	mul	r18, r22
     f64:	70 01       	movw	r14, r0
     f66:	36 03       	mulsu	r19, r22
     f68:	f0 0c       	add	r15, r0
     f6a:	11 24       	eor	r1, r1
	command = regulate(real_speed, requested_speed);
	assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));

	/* convert command to angle speed */
	angle_increment_scaled = command_to_angle_increment_scaled(command);
	assert_soft(angle_increment_scaled <= ANGLE_INCREMENT_SCALED_MAX);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	e8 16       	cp	r14, r24
     f70:	86 e0       	ldi	r24, 0x06	; 6
     f72:	f8 06       	cpc	r15, r24
     f74:	18 f0       	brcs	.+6      	; 0xf7c <__vector_16+0xe0>
     f76:	84 e7       	ldi	r24, 0x74	; 116
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a5 d9       	rcall	.-3254   	; 0x2c6 <assert_handle>

	/* V/f law */
	amplitude = controlVF(angle_increment_scaled);
     f7c:	c7 01       	movw	r24, r14
     f7e:	fb de       	rcall	.-522    	; 0xd76 <controlVF>
     f80:	8c 01       	movw	r16, r24
	assert_soft(amplitude <= AMPLITUDE_MAX);
     f82:	28 e0       	ldi	r18, 0x08	; 8
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	92 07       	cpc	r25, r18
     f88:	18 f0       	brcs	.+6      	; 0xf90 <__vector_16+0xf4>
     f8a:	88 e7       	ldi	r24, 0x78	; 120
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9b d9       	rcall	.-3274   	; 0x2c6 <assert_handle>

	/* set new amplitude and angle speed to SVPWM */
	direction = (command >= 0) ? FORWARD : BACKWARD;
	vector_set_new_speed(amplitude, angle_increment_scaled, direction);
     f90:	20 97       	sbiw	r28, 0x00	; 0
     f92:	6e 01       	movw	r12, r28
     f94:	4d 2d       	mov	r20, r13
     f96:	44 1f       	adc	r20, r20
     f98:	44 27       	eor	r20, r20
     f9a:	44 1f       	adc	r20, r20
     f9c:	b7 01       	movw	r22, r14
     f9e:	68 de       	rcall	.-816    	; 0xc70 <vector_set_new_speed>

#	ifdef DEBUG
	test_command = command;
     fa0:	d0 93 b9 01 	sts	0x01B9, r29
     fa4:	c0 93 b8 01 	sts	0x01B8, r28
	test_amplitude = amplitude;
     fa8:	10 93 b7 01 	sts	0x01B7, r17
     fac:	00 93 b6 01 	sts	0x01B6, r16
#	endif

	cli();
     fb0:	f8 94       	cli
	timer0_int_inprocess = false;
     fb2:	10 92 b5 01 	sts	0x01B5, r1

	/* Match Flag must be still cleared otherwise we are too slow */
	//assert((TIFR0 & (1 << OCF0A)) == 0);
}
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <vfprintf>:
     fe8:	ab e0       	ldi	r26, 0x0B	; 11
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 ef       	ldi	r30, 0xF9	; 249
     fee:	f7 e0       	ldi	r31, 0x07	; 7
     ff0:	5f c1       	rjmp	.+702    	; 0x12b0 <__prologue_saves__+0x8>
     ff2:	5c 01       	movw	r10, r24
     ff4:	4b 01       	movw	r8, r22
     ff6:	7a 01       	movw	r14, r20
     ff8:	fc 01       	movw	r30, r24
     ffa:	17 82       	std	Z+7, r1	; 0x07
     ffc:	16 82       	std	Z+6, r1	; 0x06
     ffe:	83 81       	ldd	r24, Z+3	; 0x03
    1000:	81 fd       	sbrc	r24, 1
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <vfprintf+0x2c>
    1004:	6f ef       	ldi	r22, 0xFF	; 255
    1006:	7f ef       	ldi	r23, 0xFF	; 255
    1008:	fe c0       	rjmp	.+508    	; 0x1206 <vfprintf+0x21e>
    100a:	42 e0       	ldi	r20, 0x02	; 2
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	e4 0e       	add	r14, r20
    1010:	f5 1e       	adc	r15, r21
    1012:	04 c0       	rjmp	.+8      	; 0x101c <vfprintf+0x34>
    1014:	3e 01       	movw	r6, r28
    1016:	08 94       	sec
    1018:	61 1c       	adc	r6, r1
    101a:	71 1c       	adc	r7, r1
    101c:	f5 01       	movw	r30, r10
    101e:	d3 80       	ldd	r13, Z+3	; 0x03
    1020:	f4 01       	movw	r30, r8
    1022:	d3 fc       	sbrc	r13, 3
    1024:	85 91       	lpm	r24, Z+
    1026:	d3 fe       	sbrs	r13, 3
    1028:	81 91       	ld	r24, Z+
    102a:	4f 01       	movw	r8, r30
    102c:	88 23       	and	r24, r24
    102e:	09 f4       	brne	.+2      	; 0x1032 <vfprintf+0x4a>
    1030:	e7 c0       	rjmp	.+462    	; 0x1200 <vfprintf+0x218>
    1032:	85 32       	cpi	r24, 0x25	; 37
    1034:	59 f4       	brne	.+22     	; 0x104c <vfprintf+0x64>
    1036:	d3 fc       	sbrc	r13, 3
    1038:	65 91       	lpm	r22, Z+
    103a:	d3 fe       	sbrs	r13, 3
    103c:	61 91       	ld	r22, Z+
    103e:	4f 01       	movw	r8, r30
    1040:	65 32       	cpi	r22, 0x25	; 37
    1042:	19 f0       	breq	.+6      	; 0x104a <vfprintf+0x62>
    1044:	06 2f       	mov	r16, r22
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	1a c0       	rjmp	.+52     	; 0x107e <vfprintf+0x96>
    104a:	85 e2       	ldi	r24, 0x25	; 37
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	29 c0       	rjmp	.+82     	; 0x10a2 <vfprintf+0xba>
    1050:	00 23       	and	r16, r16
    1052:	09 f4       	brne	.+2      	; 0x1056 <vfprintf+0x6e>
    1054:	d5 c0       	rjmp	.+426    	; 0x1200 <vfprintf+0x218>
    1056:	87 e4       	ldi	r24, 0x47	; 71
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	60 2f       	mov	r22, r16
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	91 d1       	rcall	.+802    	; 0x1382 <strchr_P>
    1060:	89 2b       	or	r24, r25
    1062:	39 f4       	brne	.+14     	; 0x1072 <vfprintf+0x8a>
    1064:	03 32       	cpi	r16, 0x23	; 35
    1066:	11 f4       	brne	.+4      	; 0x106c <vfprintf+0x84>
    1068:	10 61       	ori	r17, 0x10	; 16
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <vfprintf+0x8a>
    106c:	0c 36       	cpi	r16, 0x6C	; 108
    106e:	61 f4       	brne	.+24     	; 0x1088 <vfprintf+0xa0>
    1070:	10 68       	ori	r17, 0x80	; 128
    1072:	f4 01       	movw	r30, r8
    1074:	d3 fc       	sbrc	r13, 3
    1076:	05 91       	lpm	r16, Z+
    1078:	d3 fe       	sbrs	r13, 3
    107a:	01 91       	ld	r16, Z+
    107c:	4f 01       	movw	r8, r30
    107e:	17 ff       	sbrs	r17, 7
    1080:	e7 cf       	rjmp	.-50     	; 0x1050 <vfprintf+0x68>
    1082:	00 23       	and	r16, r16
    1084:	09 f4       	brne	.+2      	; 0x1088 <vfprintf+0xa0>
    1086:	bc c0       	rjmp	.+376    	; 0x1200 <vfprintf+0x218>
    1088:	80 e4       	ldi	r24, 0x40	; 64
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	60 2f       	mov	r22, r16
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	78 d1       	rcall	.+752    	; 0x1382 <strchr_P>
    1092:	89 2b       	or	r24, r25
    1094:	49 f0       	breq	.+18     	; 0x10a8 <vfprintf+0xc0>
    1096:	44 e0       	ldi	r20, 0x04	; 4
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	e4 0e       	add	r14, r20
    109c:	f5 1e       	adc	r15, r21
    109e:	8f e3       	ldi	r24, 0x3F	; 63
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	b5 01       	movw	r22, r10
    10a4:	79 d1       	rcall	.+754    	; 0x1398 <fputc>
    10a6:	ba cf       	rjmp	.-140    	; 0x101c <vfprintf+0x34>
    10a8:	03 36       	cpi	r16, 0x63	; 99
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <vfprintf+0xce>
    10ac:	03 37       	cpi	r16, 0x73	; 115
    10ae:	71 f0       	breq	.+28     	; 0x10cc <vfprintf+0xe4>
    10b0:	03 35       	cpi	r16, 0x53	; 83
    10b2:	e1 f4       	brne	.+56     	; 0x10ec <vfprintf+0x104>
    10b4:	0a c0       	rjmp	.+20     	; 0x10ca <vfprintf+0xe2>
    10b6:	87 01       	movw	r16, r14
    10b8:	0e 5f       	subi	r16, 0xFE	; 254
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	f7 01       	movw	r30, r14
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	b5 01       	movw	r22, r10
    10c4:	69 d1       	rcall	.+722    	; 0x1398 <fputc>
    10c6:	78 01       	movw	r14, r16
    10c8:	a9 cf       	rjmp	.-174    	; 0x101c <vfprintf+0x34>
    10ca:	11 60       	ori	r17, 0x01	; 1
    10cc:	f7 01       	movw	r30, r14
    10ce:	c0 80       	ld	r12, Z
    10d0:	d1 80       	ldd	r13, Z+1	; 0x01
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <vfprintf+0xf2>
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	b5 01       	movw	r22, r10
    10d8:	5f d1       	rcall	.+702    	; 0x1398 <fputc>
    10da:	f6 01       	movw	r30, r12
    10dc:	10 fd       	sbrc	r17, 0
    10de:	85 91       	lpm	r24, Z+
    10e0:	10 ff       	sbrs	r17, 0
    10e2:	81 91       	ld	r24, Z+
    10e4:	6f 01       	movw	r12, r30
    10e6:	88 23       	and	r24, r24
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <vfprintf+0xec>
    10ea:	8f cf       	rjmp	.-226    	; 0x100a <vfprintf+0x22>
    10ec:	04 36       	cpi	r16, 0x64	; 100
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <vfprintf+0x10c>
    10f0:	09 36       	cpi	r16, 0x69	; 105
    10f2:	39 f5       	brne	.+78     	; 0x1142 <vfprintf+0x15a>
    10f4:	17 ff       	sbrs	r17, 7
    10f6:	08 c0       	rjmp	.+16     	; 0x1108 <vfprintf+0x120>
    10f8:	f7 01       	movw	r30, r14
    10fa:	20 81       	ld	r18, Z
    10fc:	31 81       	ldd	r19, Z+1	; 0x01
    10fe:	42 81       	ldd	r20, Z+2	; 0x02
    1100:	53 81       	ldd	r21, Z+3	; 0x03
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0a c0       	rjmp	.+20     	; 0x111c <vfprintf+0x134>
    1108:	f7 01       	movw	r30, r14
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	9c 01       	movw	r18, r24
    1110:	44 27       	eor	r20, r20
    1112:	37 fd       	sbrc	r19, 7
    1114:	40 95       	com	r20
    1116:	54 2f       	mov	r21, r20
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	e8 0e       	add	r14, r24
    111e:	f9 1e       	adc	r15, r25
    1120:	1f 7e       	andi	r17, 0xEF	; 239
    1122:	57 ff       	sbrs	r21, 7
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <vfprintf+0x14e>
    1126:	50 95       	com	r21
    1128:	40 95       	com	r20
    112a:	30 95       	com	r19
    112c:	21 95       	neg	r18
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	4f 4f       	sbci	r20, 0xFF	; 255
    1132:	5f 4f       	sbci	r21, 0xFF	; 255
    1134:	10 64       	ori	r17, 0x40	; 64
    1136:	ca 01       	movw	r24, r20
    1138:	b9 01       	movw	r22, r18
    113a:	a3 01       	movw	r20, r6
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	34 c0       	rjmp	.+104    	; 0x11aa <vfprintf+0x1c2>
    1142:	00 37       	cpi	r16, 0x70	; 112
    1144:	a9 f0       	breq	.+42     	; 0x1170 <vfprintf+0x188>
    1146:	01 37       	cpi	r16, 0x71	; 113
    1148:	30 f4       	brcc	.+12     	; 0x1156 <vfprintf+0x16e>
    114a:	08 35       	cpi	r16, 0x58	; 88
    114c:	b1 f0       	breq	.+44     	; 0x117a <vfprintf+0x192>
    114e:	0f 36       	cpi	r16, 0x6F	; 111
    1150:	09 f0       	breq	.+2      	; 0x1154 <vfprintf+0x16c>
    1152:	56 c0       	rjmp	.+172    	; 0x1200 <vfprintf+0x218>
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <vfprintf+0x17a>
    1156:	05 37       	cpi	r16, 0x75	; 117
    1158:	39 f0       	breq	.+14     	; 0x1168 <vfprintf+0x180>
    115a:	08 37       	cpi	r16, 0x78	; 120
    115c:	09 f0       	breq	.+2      	; 0x1160 <vfprintf+0x178>
    115e:	50 c0       	rjmp	.+160    	; 0x1200 <vfprintf+0x218>
    1160:	08 c0       	rjmp	.+16     	; 0x1172 <vfprintf+0x18a>
    1162:	28 e0       	ldi	r18, 0x08	; 8
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	0c c0       	rjmp	.+24     	; 0x1180 <vfprintf+0x198>
    1168:	1f 7e       	andi	r17, 0xEF	; 239
    116a:	2a e0       	ldi	r18, 0x0A	; 10
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <vfprintf+0x198>
    1170:	10 61       	ori	r17, 0x10	; 16
    1172:	14 62       	ori	r17, 0x24	; 36
    1174:	20 e1       	ldi	r18, 0x10	; 16
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <vfprintf+0x198>
    117a:	14 60       	ori	r17, 0x04	; 4
    117c:	20 e1       	ldi	r18, 0x10	; 16
    117e:	32 e0       	ldi	r19, 0x02	; 2
    1180:	17 ff       	sbrs	r17, 7
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <vfprintf+0x1ac>
    1184:	f7 01       	movw	r30, r14
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	44 e0       	ldi	r20, 0x04	; 4
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	08 c0       	rjmp	.+16     	; 0x11a4 <vfprintf+0x1bc>
    1194:	f7 01       	movw	r30, r14
    1196:	80 81       	ld	r24, Z
    1198:	91 81       	ldd	r25, Z+1	; 0x01
    119a:	bc 01       	movw	r22, r24
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	42 e0       	ldi	r20, 0x02	; 2
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	e4 0e       	add	r14, r20
    11a6:	f5 1e       	adc	r15, r21
    11a8:	a3 01       	movw	r20, r6
    11aa:	45 d1       	rcall	.+650    	; 0x1436 <__ultoa_invert>
    11ac:	d8 2e       	mov	r13, r24
    11ae:	d6 18       	sub	r13, r6
    11b0:	01 2f       	mov	r16, r17
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	06 ff       	sbrs	r16, 6
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <vfprintf+0x1d8>
    11b8:	8d e2       	ldi	r24, 0x2D	; 45
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	b5 01       	movw	r22, r10
    11be:	ec d0       	rcall	.+472    	; 0x1398 <fputc>
    11c0:	04 ff       	sbrs	r16, 4
    11c2:	13 c0       	rjmp	.+38     	; 0x11ea <vfprintf+0x202>
    11c4:	fe 01       	movw	r30, r28
    11c6:	ed 0d       	add	r30, r13
    11c8:	f1 1d       	adc	r31, r1
    11ca:	80 81       	ld	r24, Z
    11cc:	80 33       	cpi	r24, 0x30	; 48
    11ce:	69 f0       	breq	.+26     	; 0x11ea <vfprintf+0x202>
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	b5 01       	movw	r22, r10
    11d6:	e0 d0       	rcall	.+448    	; 0x1398 <fputc>
    11d8:	02 ff       	sbrs	r16, 2
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <vfprintf+0x202>
    11dc:	00 72       	andi	r16, 0x20	; 32
    11de:	10 70       	andi	r17, 0x00	; 0
    11e0:	c8 01       	movw	r24, r16
    11e2:	88 5a       	subi	r24, 0xA8	; 168
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	b5 01       	movw	r22, r10
    11e8:	d7 d0       	rcall	.+430    	; 0x1398 <fputc>
    11ea:	da 94       	dec	r13
    11ec:	f3 01       	movw	r30, r6
    11ee:	ed 0d       	add	r30, r13
    11f0:	f1 1d       	adc	r31, r1
    11f2:	80 81       	ld	r24, Z
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	b5 01       	movw	r22, r10
    11f8:	cf d0       	rcall	.+414    	; 0x1398 <fputc>
    11fa:	dd 20       	and	r13, r13
    11fc:	b1 f7       	brne	.-20     	; 0x11ea <vfprintf+0x202>
    11fe:	0e cf       	rjmp	.-484    	; 0x101c <vfprintf+0x34>
    1200:	f5 01       	movw	r30, r10
    1202:	66 81       	ldd	r22, Z+6	; 0x06
    1204:	77 81       	ldd	r23, Z+7	; 0x07
    1206:	cb 01       	movw	r24, r22
    1208:	2b 96       	adiw	r28, 0x0b	; 11
    120a:	ee e0       	ldi	r30, 0x0E	; 14
    120c:	6d c0       	rjmp	.+218    	; 0x12e8 <__epilogue_restores__+0x8>

0000120e <__mulsi3>:
    120e:	62 9f       	mul	r22, r18
    1210:	d0 01       	movw	r26, r0
    1212:	73 9f       	mul	r23, r19
    1214:	f0 01       	movw	r30, r0
    1216:	82 9f       	mul	r24, r18
    1218:	e0 0d       	add	r30, r0
    121a:	f1 1d       	adc	r31, r1
    121c:	64 9f       	mul	r22, r20
    121e:	e0 0d       	add	r30, r0
    1220:	f1 1d       	adc	r31, r1
    1222:	92 9f       	mul	r25, r18
    1224:	f0 0d       	add	r31, r0
    1226:	83 9f       	mul	r24, r19
    1228:	f0 0d       	add	r31, r0
    122a:	74 9f       	mul	r23, r20
    122c:	f0 0d       	add	r31, r0
    122e:	65 9f       	mul	r22, r21
    1230:	f0 0d       	add	r31, r0
    1232:	99 27       	eor	r25, r25
    1234:	72 9f       	mul	r23, r18
    1236:	b0 0d       	add	r27, r0
    1238:	e1 1d       	adc	r30, r1
    123a:	f9 1f       	adc	r31, r25
    123c:	63 9f       	mul	r22, r19
    123e:	b0 0d       	add	r27, r0
    1240:	e1 1d       	adc	r30, r1
    1242:	f9 1f       	adc	r31, r25
    1244:	bd 01       	movw	r22, r26
    1246:	cf 01       	movw	r24, r30
    1248:	11 24       	eor	r1, r1
    124a:	08 95       	ret

0000124c <__divmodhi4>:
    124c:	97 fb       	bst	r25, 7
    124e:	09 2e       	mov	r0, r25
    1250:	07 26       	eor	r0, r23
    1252:	0a d0       	rcall	.+20     	; 0x1268 <__divmodhi4_neg1>
    1254:	77 fd       	sbrc	r23, 7
    1256:	04 d0       	rcall	.+8      	; 0x1260 <__divmodhi4_neg2>
    1258:	5e d0       	rcall	.+188    	; 0x1316 <__udivmodhi4>
    125a:	06 d0       	rcall	.+12     	; 0x1268 <__divmodhi4_neg1>
    125c:	00 20       	and	r0, r0
    125e:	1a f4       	brpl	.+6      	; 0x1266 <__divmodhi4_exit>

00001260 <__divmodhi4_neg2>:
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255

00001266 <__divmodhi4_exit>:
    1266:	08 95       	ret

00001268 <__divmodhi4_neg1>:
    1268:	f6 f7       	brtc	.-4      	; 0x1266 <__divmodhi4_exit>
    126a:	90 95       	com	r25
    126c:	81 95       	neg	r24
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	08 95       	ret

00001272 <__divmodsi4>:
    1272:	97 fb       	bst	r25, 7
    1274:	09 2e       	mov	r0, r25
    1276:	05 26       	eor	r0, r21
    1278:	0e d0       	rcall	.+28     	; 0x1296 <__divmodsi4_neg1>
    127a:	57 fd       	sbrc	r21, 7
    127c:	04 d0       	rcall	.+8      	; 0x1286 <__divmodsi4_neg2>
    127e:	5f d0       	rcall	.+190    	; 0x133e <__udivmodsi4>
    1280:	0a d0       	rcall	.+20     	; 0x1296 <__divmodsi4_neg1>
    1282:	00 1c       	adc	r0, r0
    1284:	38 f4       	brcc	.+14     	; 0x1294 <__divmodsi4_exit>

00001286 <__divmodsi4_neg2>:
    1286:	50 95       	com	r21
    1288:	40 95       	com	r20
    128a:	30 95       	com	r19
    128c:	21 95       	neg	r18
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	4f 4f       	sbci	r20, 0xFF	; 255
    1292:	5f 4f       	sbci	r21, 0xFF	; 255

00001294 <__divmodsi4_exit>:
    1294:	08 95       	ret

00001296 <__divmodsi4_neg1>:
    1296:	f6 f7       	brtc	.-4      	; 0x1294 <__divmodsi4_exit>
    1298:	90 95       	com	r25
    129a:	80 95       	com	r24
    129c:	70 95       	com	r23
    129e:	61 95       	neg	r22
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	08 95       	ret

000012a8 <__prologue_saves__>:
    12a8:	2f 92       	push	r2
    12aa:	3f 92       	push	r3
    12ac:	4f 92       	push	r4
    12ae:	5f 92       	push	r5
    12b0:	6f 92       	push	r6
    12b2:	7f 92       	push	r7
    12b4:	8f 92       	push	r8
    12b6:	9f 92       	push	r9
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	ca 1b       	sub	r28, r26
    12d2:	db 0b       	sbc	r29, r27
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	09 94       	ijmp

000012e0 <__epilogue_restores__>:
    12e0:	2a 88       	ldd	r2, Y+18	; 0x12
    12e2:	39 88       	ldd	r3, Y+17	; 0x11
    12e4:	48 88       	ldd	r4, Y+16	; 0x10
    12e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    12e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    12ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    12f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    12f2:	b9 84       	ldd	r11, Y+9	; 0x09
    12f4:	c8 84       	ldd	r12, Y+8	; 0x08
    12f6:	df 80       	ldd	r13, Y+7	; 0x07
    12f8:	ee 80       	ldd	r14, Y+6	; 0x06
    12fa:	fd 80       	ldd	r15, Y+5	; 0x05
    12fc:	0c 81       	ldd	r16, Y+4	; 0x04
    12fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1300:	aa 81       	ldd	r26, Y+2	; 0x02
    1302:	b9 81       	ldd	r27, Y+1	; 0x01
    1304:	ce 0f       	add	r28, r30
    1306:	d1 1d       	adc	r29, r1
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	ed 01       	movw	r28, r26
    1314:	08 95       	ret

00001316 <__udivmodhi4>:
    1316:	aa 1b       	sub	r26, r26
    1318:	bb 1b       	sub	r27, r27
    131a:	51 e1       	ldi	r21, 0x11	; 17
    131c:	07 c0       	rjmp	.+14     	; 0x132c <__udivmodhi4_ep>

0000131e <__udivmodhi4_loop>:
    131e:	aa 1f       	adc	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	a6 17       	cp	r26, r22
    1324:	b7 07       	cpc	r27, r23
    1326:	10 f0       	brcs	.+4      	; 0x132c <__udivmodhi4_ep>
    1328:	a6 1b       	sub	r26, r22
    132a:	b7 0b       	sbc	r27, r23

0000132c <__udivmodhi4_ep>:
    132c:	88 1f       	adc	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	5a 95       	dec	r21
    1332:	a9 f7       	brne	.-22     	; 0x131e <__udivmodhi4_loop>
    1334:	80 95       	com	r24
    1336:	90 95       	com	r25
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	08 95       	ret

0000133e <__udivmodsi4>:
    133e:	a1 e2       	ldi	r26, 0x21	; 33
    1340:	1a 2e       	mov	r1, r26
    1342:	aa 1b       	sub	r26, r26
    1344:	bb 1b       	sub	r27, r27
    1346:	fd 01       	movw	r30, r26
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <__udivmodsi4_ep>

0000134a <__udivmodsi4_loop>:
    134a:	aa 1f       	adc	r26, r26
    134c:	bb 1f       	adc	r27, r27
    134e:	ee 1f       	adc	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	a2 17       	cp	r26, r18
    1354:	b3 07       	cpc	r27, r19
    1356:	e4 07       	cpc	r30, r20
    1358:	f5 07       	cpc	r31, r21
    135a:	20 f0       	brcs	.+8      	; 0x1364 <__udivmodsi4_ep>
    135c:	a2 1b       	sub	r26, r18
    135e:	b3 0b       	sbc	r27, r19
    1360:	e4 0b       	sbc	r30, r20
    1362:	f5 0b       	sbc	r31, r21

00001364 <__udivmodsi4_ep>:
    1364:	66 1f       	adc	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	1a 94       	dec	r1
    136e:	69 f7       	brne	.-38     	; 0x134a <__udivmodsi4_loop>
    1370:	60 95       	com	r22
    1372:	70 95       	com	r23
    1374:	80 95       	com	r24
    1376:	90 95       	com	r25
    1378:	9b 01       	movw	r18, r22
    137a:	ac 01       	movw	r20, r24
    137c:	bd 01       	movw	r22, r26
    137e:	cf 01       	movw	r24, r30
    1380:	08 95       	ret

00001382 <strchr_P>:
    1382:	fc 01       	movw	r30, r24
    1384:	05 90       	lpm	r0, Z+
    1386:	06 16       	cp	r0, r22
    1388:	21 f0       	breq	.+8      	; 0x1392 <strchr_P+0x10>
    138a:	00 20       	and	r0, r0
    138c:	d9 f7       	brne	.-10     	; 0x1384 <strchr_P+0x2>
    138e:	c0 01       	movw	r24, r0
    1390:	08 95       	ret
    1392:	31 97       	sbiw	r30, 0x01	; 1
    1394:	cf 01       	movw	r24, r30
    1396:	08 95       	ret

00001398 <fputc>:
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	8c 01       	movw	r16, r24
    13a2:	eb 01       	movw	r28, r22
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 ff       	sbrs	r24, 1
    13a8:	1b c0       	rjmp	.+54     	; 0x13e0 <fputc+0x48>
    13aa:	82 ff       	sbrs	r24, 2
    13ac:	0d c0       	rjmp	.+26     	; 0x13c8 <fputc+0x30>
    13ae:	2e 81       	ldd	r18, Y+6	; 0x06
    13b0:	3f 81       	ldd	r19, Y+7	; 0x07
    13b2:	8c 81       	ldd	r24, Y+4	; 0x04
    13b4:	9d 81       	ldd	r25, Y+5	; 0x05
    13b6:	28 17       	cp	r18, r24
    13b8:	39 07       	cpc	r19, r25
    13ba:	64 f4       	brge	.+24     	; 0x13d4 <fputc+0x3c>
    13bc:	e8 81       	ld	r30, Y
    13be:	f9 81       	ldd	r31, Y+1	; 0x01
    13c0:	01 93       	st	Z+, r16
    13c2:	f9 83       	std	Y+1, r31	; 0x01
    13c4:	e8 83       	st	Y, r30
    13c6:	06 c0       	rjmp	.+12     	; 0x13d4 <fputc+0x3c>
    13c8:	e8 85       	ldd	r30, Y+8	; 0x08
    13ca:	f9 85       	ldd	r31, Y+9	; 0x09
    13cc:	80 2f       	mov	r24, r16
    13ce:	09 95       	icall
    13d0:	89 2b       	or	r24, r25
    13d2:	31 f4       	brne	.+12     	; 0x13e0 <fputc+0x48>
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	9f 81       	ldd	r25, Y+7	; 0x07
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	9f 83       	std	Y+7, r25	; 0x07
    13dc:	8e 83       	std	Y+6, r24	; 0x06
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <fputc+0x4c>
    13e0:	0f ef       	ldi	r16, 0xFF	; 255
    13e2:	1f ef       	ldi	r17, 0xFF	; 255
    13e4:	c8 01       	movw	r24, r16
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <printf_P>:
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ed ef       	ldi	r30, 0xFD	; 253
    13f6:	f9 e0       	ldi	r31, 0x09	; 9
    13f8:	67 cf       	rjmp	.-306    	; 0x12c8 <__prologue_saves__+0x20>
    13fa:	fe 01       	movw	r30, r28
    13fc:	35 96       	adiw	r30, 0x05	; 5
    13fe:	61 91       	ld	r22, Z+
    1400:	71 91       	ld	r23, Z+
    1402:	a0 91 bc 01 	lds	r26, 0x01BC
    1406:	b0 91 bd 01 	lds	r27, 0x01BD
    140a:	13 96       	adiw	r26, 0x03	; 3
    140c:	8c 91       	ld	r24, X
    140e:	13 97       	sbiw	r26, 0x03	; 3
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	13 96       	adiw	r26, 0x03	; 3
    1414:	8c 93       	st	X, r24
    1416:	80 91 bc 01 	lds	r24, 0x01BC
    141a:	90 91 bd 01 	lds	r25, 0x01BD
    141e:	af 01       	movw	r20, r30
    1420:	e3 dd       	rcall	.-1082   	; 0xfe8 <vfprintf>
    1422:	e0 91 bc 01 	lds	r30, 0x01BC
    1426:	f0 91 bd 01 	lds	r31, 0x01BD
    142a:	23 81       	ldd	r18, Z+3	; 0x03
    142c:	27 7f       	andi	r18, 0xF7	; 247
    142e:	23 83       	std	Z+3, r18	; 0x03
    1430:	20 96       	adiw	r28, 0x00	; 0
    1432:	e2 e0       	ldi	r30, 0x02	; 2
    1434:	65 cf       	rjmp	.-310    	; 0x1300 <__epilogue_restores__+0x20>

00001436 <__ultoa_invert>:
    1436:	fa 01       	movw	r30, r20
    1438:	aa 27       	eor	r26, r26
    143a:	28 30       	cpi	r18, 0x08	; 8
    143c:	51 f1       	breq	.+84     	; 0x1492 <__ultoa_invert+0x5c>
    143e:	20 31       	cpi	r18, 0x10	; 16
    1440:	81 f1       	breq	.+96     	; 0x14a2 <__ultoa_invert+0x6c>
    1442:	e8 94       	clt
    1444:	6f 93       	push	r22
    1446:	6e 7f       	andi	r22, 0xFE	; 254
    1448:	6e 5f       	subi	r22, 0xFE	; 254
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	af 4f       	sbci	r26, 0xFF	; 255
    1452:	b1 e0       	ldi	r27, 0x01	; 1
    1454:	3e d0       	rcall	.+124    	; 0x14d2 <__ultoa_invert+0x9c>
    1456:	b4 e0       	ldi	r27, 0x04	; 4
    1458:	3c d0       	rcall	.+120    	; 0x14d2 <__ultoa_invert+0x9c>
    145a:	67 0f       	add	r22, r23
    145c:	78 1f       	adc	r23, r24
    145e:	89 1f       	adc	r24, r25
    1460:	9a 1f       	adc	r25, r26
    1462:	a1 1d       	adc	r26, r1
    1464:	68 0f       	add	r22, r24
    1466:	79 1f       	adc	r23, r25
    1468:	8a 1f       	adc	r24, r26
    146a:	91 1d       	adc	r25, r1
    146c:	a1 1d       	adc	r26, r1
    146e:	6a 0f       	add	r22, r26
    1470:	71 1d       	adc	r23, r1
    1472:	81 1d       	adc	r24, r1
    1474:	91 1d       	adc	r25, r1
    1476:	a1 1d       	adc	r26, r1
    1478:	20 d0       	rcall	.+64     	; 0x14ba <__ultoa_invert+0x84>
    147a:	09 f4       	brne	.+2      	; 0x147e <__ultoa_invert+0x48>
    147c:	68 94       	set
    147e:	3f 91       	pop	r19
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	26 9f       	mul	r18, r22
    1484:	11 24       	eor	r1, r1
    1486:	30 19       	sub	r19, r0
    1488:	30 5d       	subi	r19, 0xD0	; 208
    148a:	31 93       	st	Z+, r19
    148c:	de f6       	brtc	.-74     	; 0x1444 <__ultoa_invert+0xe>
    148e:	cf 01       	movw	r24, r30
    1490:	08 95       	ret
    1492:	46 2f       	mov	r20, r22
    1494:	47 70       	andi	r20, 0x07	; 7
    1496:	40 5d       	subi	r20, 0xD0	; 208
    1498:	41 93       	st	Z+, r20
    149a:	b3 e0       	ldi	r27, 0x03	; 3
    149c:	0f d0       	rcall	.+30     	; 0x14bc <__ultoa_invert+0x86>
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__ultoa_invert+0x5c>
    14a0:	f6 cf       	rjmp	.-20     	; 0x148e <__ultoa_invert+0x58>
    14a2:	46 2f       	mov	r20, r22
    14a4:	4f 70       	andi	r20, 0x0F	; 15
    14a6:	40 5d       	subi	r20, 0xD0	; 208
    14a8:	4a 33       	cpi	r20, 0x3A	; 58
    14aa:	18 f0       	brcs	.+6      	; 0x14b2 <__ultoa_invert+0x7c>
    14ac:	49 5d       	subi	r20, 0xD9	; 217
    14ae:	31 fd       	sbrc	r19, 1
    14b0:	40 52       	subi	r20, 0x20	; 32
    14b2:	41 93       	st	Z+, r20
    14b4:	02 d0       	rcall	.+4      	; 0x14ba <__ultoa_invert+0x84>
    14b6:	a9 f7       	brne	.-22     	; 0x14a2 <__ultoa_invert+0x6c>
    14b8:	ea cf       	rjmp	.-44     	; 0x148e <__ultoa_invert+0x58>
    14ba:	b4 e0       	ldi	r27, 0x04	; 4
    14bc:	a6 95       	lsr	r26
    14be:	97 95       	ror	r25
    14c0:	87 95       	ror	r24
    14c2:	77 95       	ror	r23
    14c4:	67 95       	ror	r22
    14c6:	ba 95       	dec	r27
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__ultoa_invert+0x86>
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 05       	cpc	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	08 95       	ret
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	0a 2e       	mov	r0, r26
    14d8:	06 94       	lsr	r0
    14da:	57 95       	ror	r21
    14dc:	47 95       	ror	r20
    14de:	37 95       	ror	r19
    14e0:	27 95       	ror	r18
    14e2:	ba 95       	dec	r27
    14e4:	c9 f7       	brne	.-14     	; 0x14d8 <__ultoa_invert+0xa2>
    14e6:	62 0f       	add	r22, r18
    14e8:	73 1f       	adc	r23, r19
    14ea:	84 1f       	adc	r24, r20
    14ec:	95 1f       	adc	r25, r21
    14ee:	a0 1d       	adc	r26, r0
    14f0:	08 95       	ret

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
