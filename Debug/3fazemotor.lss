
3fazemotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000015a0  00001634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080019e  0080019e  000016d2  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000053c  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d70  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010e0  00000000  00000000  00003bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000324d  00000000  00000000  00004c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00007eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b1  00000000  00000000  000082fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bac  00000000  00000000  00008bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0006839f  00000000  00000000  00009759  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00071af8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	b4 c0       	rjmp	.+360    	; 0x16c <__bad_interrupt>
       4:	7a c6       	rjmp	.+3316   	; 0xcfa <__vector_2>
       6:	b2 c0       	rjmp	.+356    	; 0x16c <__bad_interrupt>
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	b0 c0       	rjmp	.+352    	; 0x16c <__bad_interrupt>
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	ae c0       	rjmp	.+348    	; 0x16c <__bad_interrupt>
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	ac c0       	rjmp	.+344    	; 0x16c <__bad_interrupt>
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	aa c0       	rjmp	.+340    	; 0x16c <__bad_interrupt>
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	a8 c0       	rjmp	.+336    	; 0x16c <__bad_interrupt>
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	89 c4       	rjmp	.+2322   	; 0x932 <__vector_15>
      20:	6c c7       	rjmp	.+3800   	; 0xefa <__vector_16>
      22:	a4 c0       	rjmp	.+328    	; 0x16c <__bad_interrupt>
      24:	da c0       	rjmp	.+436    	; 0x1da <__vector_18>
      26:	a2 c0       	rjmp	.+324    	; 0x16c <__bad_interrupt>
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	a0 c0       	rjmp	.+320    	; 0x16c <__bad_interrupt>
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	9e c0       	rjmp	.+316    	; 0x16c <__bad_interrupt>
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	9c c0       	rjmp	.+312    	; 0x16c <__bad_interrupt>
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	9a c0       	rjmp	.+308    	; 0x16c <__bad_interrupt>
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	98 c0       	rjmp	.+304    	; 0x16c <__bad_interrupt>
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	96 c0       	rjmp	.+300    	; 0x16c <__bad_interrupt>

00000040 <__c.1776>:
      40:	45 46 47 65 66 67 00                                EFGefg.

00000047 <__c.1770>:
      47:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000057 <ASSERTION_FAILED.1680>:
      57:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
      67:	20 61 74 20 6c 69 6e 65 3a 20 25 64 0a 00            at line: %d..

00000075 <AMPL.1722>:
      75:	61 6d 70 6c 69 74 75 64 65 3a 20 25 75 25 25 20     amplitude: %u%% 
      85:	28 25 75 20 5b 56 5d 29 0a 0a 00                    (%u [V])...

00000090 <FREQ_REGUL.1721>:
      90:	66 72 65 71 75 65 6e 63 79 20 28 73 70 65 65 64     frequency (speed
      a0:	20 72 65 67 75 6c 61 74 69 6f 6e 29 3a 20 25 69      regulation): %i
      b0:	20 5b 48 7a 5d 0a 00                                 [Hz]..

000000b7 <FREQ_POT.1720>:
      b7:	66 72 65 71 75 65 6e 63 79 20 28 73 70 65 65 64     frequency (speed
      c7:	20 70 6f 74 65 6e 74 69 6f 6d 65 74 65 72 29 3a      potentiometer):
      d7:	20 25 69 20 5b 48 7a 5d 0a 00                        %i [Hz]..

000000e1 <VOLTAGE.1719>:
      e1:	76 6f 6c 74 61 67 65 3a 20 25 75 0a 00              voltage: %u..

000000ee <CURRENT.1718>:
      ee:	63 75 72 72 65 6e 74 3a 20 25 75 0a 00              current: %u..

000000fb <OVERCURRENT.1717>:
      fb:	6f 76 65 72 63 75 72 72 65 6e 74 20 6c 6f 6f 70     overcurrent loop
     10b:	73 3a 20 25 75 0a 00                                s: %u..

00000112 <COUNTER.1716>:
     112:	69 6e 66 6f 20 6e 75 6d 62 65 72 3a 20 25 75 0a     info number: %u.
	...

00000123 <TIME.1715>:
     123:	54 69 6d 65 3a 20 25 6c 75 20 5b 74 69 63 6b 73     Time: %lu [ticks
     133:	5d 0a 00                                            ]..

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d2 e0       	ldi	r29, 0x02	; 2
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e0 ea       	ldi	r30, 0xA0	; 160
     14a:	f5 e1       	ldi	r31, 0x15	; 21
     14c:	02 c0       	rjmp	.+4      	; 0x152 <.do_copy_data_start>

0000014e <.do_copy_data_loop>:
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0

00000152 <.do_copy_data_start>:
     152:	ae 39       	cpi	r26, 0x9E	; 158
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <.do_copy_data_loop>

00000158 <__do_clear_bss>:
     158:	11 e0       	ldi	r17, 0x01	; 1
     15a:	ae e9       	ldi	r26, 0x9E	; 158
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a2 3c       	cpi	r26, 0xC2	; 194
     164:	b1 07       	cpc	r27, r17
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	51 d2       	rcall	.+1186   	; 0x60c <main>
     16a:	18 ca       	rjmp	.-3024   	; 0xfffff59c <__eeprom_end+0xff7ef59c>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <adc_init>:
		 [INDEX_CURRENT]   = MUX_CONST_PART | MUX_SPEED_POT
		};

void adc_init(void) {
	/* enable VCC ref, right adjust the ADC result, cannel ADC010 */
	ADMUX = adc_mux[0];
     16e:	82 e4       	ldi	r24, 0x42	; 66
     170:	80 93 7c 00 	sts	0x007C, r24

	/* enable ADC, enable interrupts,  ADC Prescaler = 128, Auto trigger mode */
    ADCSRA = (1 << ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADATE);
     174:	ea e7       	ldi	r30, 0x7A	; 122
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	8f ea       	ldi	r24, 0xAF	; 175
     17a:	80 83       	st	Z, r24
    /* Free Running Mode */
    ADCSRB = 0;
     17c:	10 92 7b 00 	sts	0x007B, r1

    /* start conversion */
    ADCSRA |= 1<<ADSC;
     180:	80 81       	ld	r24, Z
     182:	80 64       	ori	r24, 0x40	; 64
     184:	80 83       	st	Z, r24
}
     186:	08 95       	ret

00000188 <adc_get_speed_pot_value>:

int16_t adc_get_speed_pot_value(void) {
	int16_t ret;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     188:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     18a:	f8 94       	cli
		ret = adc_speed_pot_value;
     18c:	90 91 9f 01 	lds	r25, 0x019F
     190:	40 91 a0 01 	lds	r20, 0x01A0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     194:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     196:	89 2f       	mov	r24, r25
     198:	94 2f       	mov	r25, r20
     19a:	99 23       	and	r25, r25
     19c:	0c f4       	brge	.+2      	; 0x1a0 <adc_get_speed_pot_value+0x18>
     19e:	cf 96       	adiw	r24, 0x3f	; 63
     1a0:	9c 01       	movw	r18, r24
     1a2:	02 2e       	mov	r0, r18
     1a4:	23 2f       	mov	r18, r19
     1a6:	00 0c       	add	r0, r0
     1a8:	22 1f       	adc	r18, r18
     1aa:	33 0b       	sbc	r19, r19
     1ac:	00 0c       	add	r0, r0
     1ae:	22 1f       	adc	r18, r18
     1b0:	33 1f       	adc	r19, r19
	/* fast */
	//	cassert(ADC_FILTER_LEN == 64);
	//	DivS16_64(retval, retval);

	return ret;
}
     1b2:	82 2f       	mov	r24, r18
     1b4:	93 2f       	mov	r25, r19
     1b6:	08 95       	ret

000001b8 <adc_get_voltage_value>:
//	}
//}

uint16_t adc_get_voltage_value(void) {
	uint16_t ret;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     1b8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1ba:	f8 94       	cli
		ret = adc_voltage_value;
     1bc:	20 91 a1 01 	lds	r18, 0x01A1
     1c0:	30 91 a2 01 	lds	r19, 0x01A2
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1c4:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     1c6:	36 95       	lsr	r19
     1c8:	27 95       	ror	r18
     1ca:	36 95       	lsr	r19
     1cc:	27 95       	ror	r18
	}
	ret /= ADC_VOLTAGE_FILTER_LEN;
	return ret;
}
     1ce:	82 2f       	mov	r24, r18
     1d0:	93 2f       	mov	r25, r19
     1d2:	08 95       	ret

000001d4 <adc_get_current_value>:

uint8_t adc_get_current_value(void) {
	return adc_current_value;
}
     1d4:	80 91 a3 01 	lds	r24, 0x01A3
     1d8:	08 95       	ret

000001da <__vector_18>:

	return val;
}

/* adc_value = (adc_value * (ADC_FILTER_LEN - 1) / ADC_FILTER_LEN) + ADC; */
ISR(ADC_vect) {
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	2f 93       	push	r18
     1e6:	3f 93       	push	r19
     1e8:	4f 93       	push	r20
     1ea:	5f 93       	push	r21
     1ec:	6f 93       	push	r22
     1ee:	7f 93       	push	r23
     1f0:	8f 93       	push	r24
     1f2:	9f 93       	push	r25
     1f4:	af 93       	push	r26
     1f6:	bf 93       	push	r27
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
	static uint8_t last_index = INDEX_SPEED_POT;

	switch (last_index) {
     1fc:	60 91 9e 01 	lds	r22, 0x019E
     200:	61 30       	cpi	r22, 0x01	; 1
     202:	49 f1       	breq	.+82     	; 0x256 <end+0x2e>
     204:	61 30       	cpi	r22, 0x01	; 1
     206:	20 f0       	brcs	.+8      	; 0x210 <__vector_18+0x36>
     208:	62 30       	cpi	r22, 0x02	; 2
     20a:	09 f0       	breq	.+2      	; 0x20e <__vector_18+0x34>
     20c:	46 c0       	rjmp	.+140    	; 0x29a <end+0x72>
     20e:	38 c0       	rjmp	.+112    	; 0x280 <end+0x58>
	case INDEX_SPEED_POT:
		/* adc_value * (ADC_FILTER_LEN - 1) / ADC_FILTER_LEN =>
		 * adc_value - adc_value / ADC_FILTER_LEN */
		/* slow (use DivS16_64() to speed it up) */
		adc_speed_pot_value -= adc_speed_pot_value / ADC_SPEED_FILTER_LEN;
     210:	40 91 9f 01 	lds	r20, 0x019F
     214:	50 91 a0 01 	lds	r21, 0x01A0

/* convert from shifted code to 2's complement code
 *	when the ADC output is higher than 512, the measure is positive
 *	when the ADC output is lower  then 512, the measure is negative */
static inline int16_t adc_get_complement(void) {
	int16_t val = ADC;
     218:	20 91 78 00 	lds	r18, 0x0078
     21c:	30 91 79 00 	lds	r19, 0x0079
	asm ("bst	%B[new_val], 1;	\n\t"
     220:	31 fb       	bst	r19, 1
     222:	3d 7f       	andi	r19, 0xFD	; 253
     224:	0e f0       	brts	.+2      	; 0x228 <end>
     226:	3e 6f       	ori	r19, 0xFE	; 254

00000228 <end>:
	case INDEX_SPEED_POT:
		/* adc_value * (ADC_FILTER_LEN - 1) / ADC_FILTER_LEN =>
		 * adc_value - adc_value / ADC_FILTER_LEN */
		/* slow (use DivS16_64() to speed it up) */
		adc_speed_pot_value -= adc_speed_pot_value / ADC_SPEED_FILTER_LEN;
		adc_speed_pot_value += adc_get_complement();
     228:	ca 01       	movw	r24, r20
     22a:	55 23       	and	r21, r21
     22c:	0c f4       	brge	.+2      	; 0x230 <end+0x8>
     22e:	cf 96       	adiw	r24, 0x3f	; 63
     230:	08 2e       	mov	r0, r24
     232:	89 2f       	mov	r24, r25
     234:	00 0c       	add	r0, r0
     236:	88 1f       	adc	r24, r24
     238:	99 0b       	sbc	r25, r25
     23a:	00 0c       	add	r0, r0
     23c:	88 1f       	adc	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	fa 01       	movw	r30, r20
     242:	e8 1b       	sub	r30, r24
     244:	f9 0b       	sbc	r31, r25
     246:	cf 01       	movw	r24, r30
     248:	82 0f       	add	r24, r18
     24a:	93 1f       	adc	r25, r19
     24c:	90 93 a0 01 	sts	0x01A0, r25
     250:	80 93 9f 01 	sts	0x019F, r24
     254:	25 c0       	rjmp	.+74     	; 0x2a0 <end+0x78>
		break;
	case INDEX_VOLTAGE:
		adc_voltage_value -= adc_voltage_value / ADC_VOLTAGE_FILTER_LEN;
     256:	20 91 a1 01 	lds	r18, 0x01A1
     25a:	30 91 a2 01 	lds	r19, 0x01A2
		adc_voltage_value += ADC;
     25e:	80 91 78 00 	lds	r24, 0x0078
     262:	90 91 79 00 	lds	r25, 0x0079
     266:	82 0f       	add	r24, r18
     268:	93 1f       	adc	r25, r19
     26a:	36 95       	lsr	r19
     26c:	27 95       	ror	r18
     26e:	36 95       	lsr	r19
     270:	27 95       	ror	r18
     272:	82 1b       	sub	r24, r18
     274:	93 0b       	sbc	r25, r19
     276:	90 93 a2 01 	sts	0x01A2, r25
     27a:	80 93 a1 01 	sts	0x01A1, r24
     27e:	10 c0       	rjmp	.+32     	; 0x2a0 <end+0x78>
		break;
	case INDEX_CURRENT:
		adc_current_value = (uint8_t)(ADC >> 2);
     280:	80 91 78 00 	lds	r24, 0x0078
     284:	90 91 79 00 	lds	r25, 0x0079
     288:	96 95       	lsr	r25
     28a:	87 95       	ror	r24
     28c:	96 95       	lsr	r25
     28e:	87 95       	ror	r24
     290:	80 93 a3 01 	sts	0x01A3, r24
		assert_soft(0);
	}

	last_index++;
	if (last_index == countof(adc_mux)) {
		last_index = 0;
     294:	10 92 9e 01 	sts	0x019E, r1
     298:	07 c0       	rjmp	.+14     	; 0x2a8 <end+0x80>
		break;
	case INDEX_CURRENT:
		adc_current_value = (uint8_t)(ADC >> 2);
		break;
	default:
		assert_soft(0);
     29a:	8f e7       	ldi	r24, 0x7F	; 127
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	1e d0       	rcall	.+60     	; 0x2dc <assert_handle>
	}

	last_index++;
     2a0:	86 2f       	mov	r24, r22
     2a2:	8f 5f       	subi	r24, 0xFF	; 255
     2a4:	80 93 9e 01 	sts	0x019E, r24
	if (last_index == countof(adc_mux)) {
		last_index = 0;
	}

	ADMUX = adc_mux[last_index];
     2a8:	80 91 9e 01 	lds	r24, 0x019E
     2ac:	e0 e0       	ldi	r30, 0x00	; 0
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	e8 0f       	add	r30, r24
     2b2:	f1 1d       	adc	r31, r1
     2b4:	80 81       	ld	r24, Z
     2b6:	80 93 7c 00 	sts	0x007C, r24
}
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	bf 91       	pop	r27
     2c0:	af 91       	pop	r26
     2c2:	9f 91       	pop	r25
     2c4:	8f 91       	pop	r24
     2c6:	7f 91       	pop	r23
     2c8:	6f 91       	pop	r22
     2ca:	5f 91       	pop	r21
     2cc:	4f 91       	pop	r20
     2ce:	3f 91       	pop	r19
     2d0:	2f 91       	pop	r18
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <assert_handle>:
#include <util/delay.h>
#include <stdio.h>

void print_info(void);

void assert_handle(int line) {
     2dc:	8c 01       	movw	r16, r24
	cli();
     2de:	f8 94       	cli
	psc_halt();
     2e0:	2b d4       	rcall	.+2134   	; 0xb38 <psc_halt>
	break_off();
     2e2:	2a d0       	rcall	.+84     	; 0x338 <break_off>
	led_init();
     2e4:	79 d0       	rcall	.+242    	; 0x3d8 <led_init>
	print_info();
     2e6:	c0 d0       	rcall	.+384    	; 0x468 <print_info>

#ifdef DEBUG
	static const char ASSERTION_FAILED[] PROGMEM = "Assertion failed at line: %d\n";
	printf_P(ASSERTION_FAILED, line);
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <assert_handle+0xe>
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <assert_handle+0x10>
     2ec:	ed b7       	in	r30, 0x3d	; 61
     2ee:	fe b7       	in	r31, 0x3e	; 62
     2f0:	31 96       	adiw	r30, 0x01	; 1
     2f2:	87 e5       	ldi	r24, 0x57	; 87
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24
     2fa:	13 83       	std	Z+3, r17	; 0x03
     2fc:	02 83       	std	Z+2, r16	; 0x02
     2fe:	cd d8       	rcall	.-3686   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
	static const char ASSERTION_FAILED[] PROGMEM = "Assertion failed at line: ";
	uart_puts_P(ASSERTION_FAILED);
	uart_putx(line);
#endif

	led1_set_state(OFF);
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	78 d0       	rcall	.+240    	; 0x3fc <led1_set_state>
	led2_set_state(ON);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	8b d0       	rcall	.+278    	; 0x426 <led2_set_state>
	while(1) {
		led1_toggle();
		led2_toggle();
     310:	00 ed       	ldi	r16, 0xD0	; 208
     312:	17 e0       	ldi	r17, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     314:	c0 e9       	ldi	r28, 0x90	; 144
     316:	d1 e0       	ldi	r29, 0x01	; 1
#endif

	led1_set_state(OFF);
	led2_set_state(ON);
	while(1) {
		led1_toggle();
     318:	6a d0       	rcall	.+212    	; 0x3ee <led1_toggle>
		led2_toggle();
     31a:	7e d0       	rcall	.+252    	; 0x418 <led2_toggle>
     31c:	98 01       	movw	r18, r16
     31e:	ce 01       	movw	r24, r28
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <__stack+0x21>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     324:	21 50       	subi	r18, 0x01	; 1
     326:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     328:	d1 f7       	brne	.-12     	; 0x31e <__stack+0x1f>
     32a:	f6 cf       	rjmp	.-20     	; 0x318 <__stack+0x19>

0000032c <break_on>:
    break_off();
    BREAK_DDR |= 1 << BREAK;
}

void break_on(void) {
	BREAK_PORT |=  1 << BREAK;
     32c:	eb e2       	ldi	r30, 0x2B	; 43
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	82 60       	ori	r24, 0x02	; 2
     334:	80 83       	st	Z, r24
}
     336:	08 95       	ret

00000338 <break_off>:

void break_off(void) {
	BREAK_PORT &=  ~(1 << BREAK);
     338:	eb e2       	ldi	r30, 0x2B	; 43
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8d 7f       	andi	r24, 0xFD	; 253
     340:	80 83       	st	Z, r24
}
     342:	08 95       	ret

00000344 <break_init>:
#define BREAK_PORT PORTD
#define BREAK_DDR  DDRD
#define BREAK      PD1

void break_init(void) {
    break_off();
     344:	f9 df       	rcall	.-14     	; 0x338 <break_off>
    BREAK_DDR |= 1 << BREAK;
     346:	ea e2       	ldi	r30, 0x2A	; 42
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	82 60       	ori	r24, 0x02	; 2
     34e:	80 83       	st	Z, r24
}
     350:	08 95       	ret

00000352 <dac_init>:

#define DAC_MAX_VALUE ((1 << 10) - 1)

void dac_init(void) {
	/* DAC enable, right adjust (10 bit), output enable */
	DACON = (1 << DAEN) | (1 << DAOE);
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	80 93 aa 00 	sts	0x00AA, r24
}
     358:	08 95       	ret

0000035a <dac_set_value>:

void dac_set_value(uint16_t value) {
	DACL = LOW(value);
     35a:	80 93 ab 00 	sts	0x00AB, r24
	DACH = HIGH(value);
     35e:	90 93 ac 00 	sts	0x00AC, r25
}
     362:	08 95       	ret

00000364 <dac_set_value_scaled>:

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
     364:	68 17       	cp	r22, r24
     366:	79 07       	cpc	r23, r25
     368:	18 f4       	brcc	.+6      	; 0x370 <dac_set_value_scaled+0xc>
     36a:	84 e1       	ldi	r24, 0x14	; 20
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	b6 df       	rcall	.-148    	; 0x2dc <assert_handle>
	if (max_value < DAC_MAX_VALUE) {
     370:	23 e0       	ldi	r18, 0x03	; 3
     372:	6f 3f       	cpi	r22, 0xFF	; 255
     374:	72 07       	cpc	r23, r18
     376:	28 f0       	brcs	.+10     	; 0x382 <dac_set_value_scaled+0x1e>
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
			value *= 2;
		}
	} else {
		while (max_value > DAC_MAX_VALUE) {
     378:	44 e0       	ldi	r20, 0x04	; 4
     37a:	60 30       	cpi	r22, 0x00	; 0
     37c:	74 07       	cpc	r23, r20
     37e:	10 f5       	brcc	.+68     	; 0x3c4 <dac_set_value_scaled+0x60>
     380:	29 c0       	rjmp	.+82     	; 0x3d4 <dac_set_value_scaled+0x70>
}

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
	if (max_value < DAC_MAX_VALUE) {
		while (max_value * 2 <= DAC_MAX_VALUE) {
     382:	9b 01       	movw	r18, r22
     384:	22 0f       	add	r18, r18
     386:	33 1f       	adc	r19, r19
     388:	44 e0       	ldi	r20, 0x04	; 4
     38a:	20 30       	cpi	r18, 0x00	; 0
     38c:	34 07       	cpc	r19, r20
     38e:	10 f5       	brcc	.+68     	; 0x3d4 <dac_set_value_scaled+0x70>
			assert(max_value <= UINT16_MAX / 2);
     390:	77 23       	and	r23, r23
     392:	2c f0       	brlt	.+10     	; 0x39e <dac_set_value_scaled+0x3a>
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
     394:	99 23       	and	r25, r25
     396:	64 f4       	brge	.+24     	; 0x3b0 <dac_set_value_scaled+0x4c>
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <dac_set_value_scaled+0x44>

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
	if (max_value < DAC_MAX_VALUE) {
		while (max_value * 2 <= DAC_MAX_VALUE) {
			assert(max_value <= UINT16_MAX / 2);
     39a:	33 23       	and	r19, r19
     39c:	1c f4       	brge	.+6      	; 0x3a4 <dac_set_value_scaled+0x40>
     39e:	87 e1       	ldi	r24, 0x17	; 23
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9c df       	rcall	.-200    	; 0x2dc <assert_handle>
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
     3a4:	99 23       	and	r25, r25
     3a6:	1c f4       	brge	.+6      	; 0x3ae <dac_set_value_scaled+0x4a>
     3a8:	89 e1       	ldi	r24, 0x19	; 25
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	97 df       	rcall	.-210    	; 0x2dc <assert_handle>
     3ae:	9a 01       	movw	r18, r20
			value *= 2;
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
}

void dac_set_value_scaled(uint16_t value, uint16_t max_value) {
	assert(value <= max_value);
	if (max_value < DAC_MAX_VALUE) {
		while (max_value * 2 <= DAC_MAX_VALUE) {
     3b4:	a9 01       	movw	r20, r18
     3b6:	44 0f       	add	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	64 e0       	ldi	r22, 0x04	; 4
     3bc:	40 30       	cpi	r20, 0x00	; 0
     3be:	56 07       	cpc	r21, r22
     3c0:	60 f3       	brcs	.-40     	; 0x39a <dac_set_value_scaled+0x36>
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <dac_set_value_scaled+0x70>
			assert(value <= UINT16_MAX / 2);
			value *= 2;
		}
	} else {
		while (max_value > DAC_MAX_VALUE) {
			max_value /= 2;
     3c4:	76 95       	lsr	r23
     3c6:	67 95       	ror	r22
			value /= 2;
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
			max_value *= 2;
			assert(value <= UINT16_MAX / 2);
			value *= 2;
		}
	} else {
		while (max_value > DAC_MAX_VALUE) {
     3cc:	24 e0       	ldi	r18, 0x04	; 4
     3ce:	60 30       	cpi	r22, 0x00	; 0
     3d0:	72 07       	cpc	r23, r18
     3d2:	c0 f7       	brcc	.-16     	; 0x3c4 <dac_set_value_scaled+0x60>
			max_value /= 2;
			value /= 2;
		}
	}

	dac_set_value(value);
     3d4:	c2 df       	rcall	.-124    	; 0x35a <dac_set_value>
}
     3d6:	08 95       	ret

000003d8 <led_init>:
#define LED2      PD2


/* Nastavi DDR registr, aby bylo mozne ovladat ledku - pin ledky jako vystupni */
void led_init(void) {
    LED1_DDR |= 1 << LED1;
     3d8:	e7 e2       	ldi	r30, 0x27	; 39
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	84 60       	ori	r24, 0x04	; 4
     3e0:	80 83       	st	Z, r24
    LED2_DDR |= 1 << LED2;
     3e2:	ea e2       	ldi	r30, 0x2A	; 42
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	84 60       	ori	r24, 0x04	; 4
     3ea:	80 83       	st	Z, r24
}
     3ec:	08 95       	ret

000003ee <led1_toggle>:

/* Zmeni stav ledky */
void led1_toggle(void){
    LED1_PORT ^=  1 << LED1; // XOR
     3ee:	e8 e2       	ldi	r30, 0x28	; 40
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	94 e0       	ldi	r25, 0x04	; 4
     3f6:	89 27       	eor	r24, r25
     3f8:	80 83       	st	Z, r24
}
     3fa:	08 95       	ret

000003fc <led1_set_state>:

void led1_set_state(state_t state) {
	if (state == ON) {
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	31 f4       	brne	.+12     	; 0x40c <led1_set_state+0x10>
		LED1_PORT &=  ~(1 << LED1);
     400:	e8 e2       	ldi	r30, 0x28	; 40
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	8b 7f       	andi	r24, 0xFB	; 251
     408:	80 83       	st	Z, r24
     40a:	08 95       	ret
	} else {
		LED1_PORT |=  1 << LED1;
     40c:	e8 e2       	ldi	r30, 0x28	; 40
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	84 60       	ori	r24, 0x04	; 4
     414:	80 83       	st	Z, r24
     416:	08 95       	ret

00000418 <led2_toggle>:
	}
}

void led2_toggle(void){
    LED2_PORT ^=  1 << LED2; // XOR
     418:	eb e2       	ldi	r30, 0x2B	; 43
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	94 e0       	ldi	r25, 0x04	; 4
     420:	89 27       	eor	r24, r25
     422:	80 83       	st	Z, r24
}
     424:	08 95       	ret

00000426 <led2_set_state>:

void led2_set_state(state_t state) {
	if (state == ON) {
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	31 f4       	brne	.+12     	; 0x436 <led2_set_state+0x10>
		LED2_PORT &=  ~(1 << LED2);
     42a:	eb e2       	ldi	r30, 0x2B	; 43
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	8b 7f       	andi	r24, 0xFB	; 251
     432:	80 83       	st	Z, r24
     434:	08 95       	ret
	} else {
		LED2_PORT |=  1 << LED2;
     436:	eb e2       	ldi	r30, 0x2B	; 43
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	84 60       	ori	r24, 0x04	; 4
     43e:	80 83       	st	Z, r24
     440:	08 95       	ret

00000442 <toFreq>:
#ifdef DEBUG
extern volatile uint16_t test_overcurrent;
extern volatile int16_t  test_command;
extern volatile int16_t  test_amplitude;

int16_t toFreq(int16_t command) {
     442:	aa 27       	eor	r26, r26
     444:	97 fd       	sbrc	r25, 7
     446:	a0 95       	com	r26
     448:	ba 2f       	mov	r27, r26
     44a:	bc 01       	movw	r22, r24
     44c:	cd 01       	movw	r24, r26
     44e:	2d e7       	ldi	r18, 0x7D	; 125
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	30 d7       	rcall	.+3680   	; 0x12b8 <__mulsi3>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	32 e0       	ldi	r19, 0x02	; 2
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	5d d7       	rcall	.+3770   	; 0x131c <__divmodsi4>
     462:	82 2f       	mov	r24, r18
     464:	93 2f       	mov	r25, r19
	return ((int32_t)command * F_MAX) / COMMAND_MAX;
}
     466:	08 95       	ret

00000468 <print_info>:

void print_info(void) {
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
	static const char VOLTAGE[] PROGMEM = "voltage: %u\n";
	static const char FREQ_POT[] PROGMEM = "frequency (speed potentiometer): %i [Hz]\n";
	static const char FREQ_REGUL[] PROGMEM = "frequency (speed regulation): %i [Hz]\n";
	static const char AMPL[] PROGMEM = "amplitude: %u%% (%u [V])\n\n";

	printf_P(TIME, time_get());
     474:	20 d2       	rcall	.+1088   	; 0x8b6 <time_get>
     476:	00 d0       	rcall	.+0      	; 0x478 <print_info+0x10>
     478:	00 d0       	rcall	.+0      	; 0x47a <print_info+0x12>
     47a:	00 d0       	rcall	.+0      	; 0x47c <print_info+0x14>
     47c:	ed b7       	in	r30, 0x3d	; 61
     47e:	fe b7       	in	r31, 0x3e	; 62
     480:	31 96       	adiw	r30, 0x01	; 1
     482:	23 e2       	ldi	r18, 0x23	; 35
     484:	31 e0       	ldi	r19, 0x01	; 1
     486:	31 83       	std	Z+1, r19	; 0x01
     488:	20 83       	st	Z, r18
     48a:	62 83       	std	Z+2, r22	; 0x02
     48c:	73 83       	std	Z+3, r23	; 0x03
     48e:	84 83       	std	Z+4, r24	; 0x04
     490:	95 83       	std	Z+5, r25	; 0x05
     492:	03 d8       	rcall	.-4090   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
	printf_P(COUNTER, ++counter);
     494:	20 91 a4 01 	lds	r18, 0x01A4
     498:	30 91 a5 01 	lds	r19, 0x01A5
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	30 93 a5 01 	sts	0x01A5, r19
     4a4:	20 93 a4 01 	sts	0x01A4, r18
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	31 96       	adiw	r30, 0x01	; 1
     4b2:	82 e1       	ldi	r24, 0x12	; 18
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
     4ba:	33 83       	std	Z+3, r19	; 0x03
     4bc:	22 83       	std	Z+2, r18	; 0x02
     4be:	ed d7       	rcall	.+4058   	; 0x149a <printf_P>
	printf_P(OVERCURRENT, test_overcurrent);
     4c0:	20 91 b6 01 	lds	r18, 0x01B6
     4c4:	30 91 b7 01 	lds	r19, 0x01B7
     4c8:	ed b7       	in	r30, 0x3d	; 61
     4ca:	fe b7       	in	r31, 0x3e	; 62
     4cc:	31 96       	adiw	r30, 0x01	; 1
     4ce:	8b ef       	ldi	r24, 0xFB	; 251
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	91 83       	std	Z+1, r25	; 0x01
     4d4:	80 83       	st	Z, r24
     4d6:	33 83       	std	Z+3, r19	; 0x03
     4d8:	22 83       	std	Z+2, r18	; 0x02
     4da:	df d7       	rcall	.+4030   	; 0x149a <printf_P>
	printf_P(CURRENT, adc_get_current_value());
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	77 de       	rcall	.-786    	; 0x1d4 <adc_get_current_value>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <print_info+0x80>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <print_info+0x82>
     4ea:	ed b7       	in	r30, 0x3d	; 61
     4ec:	fe b7       	in	r31, 0x3e	; 62
     4ee:	31 96       	adiw	r30, 0x01	; 1
     4f0:	2e ee       	ldi	r18, 0xEE	; 238
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	31 83       	std	Z+1, r19	; 0x01
     4f6:	20 83       	st	Z, r18
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	13 82       	std	Z+3, r1	; 0x03
     4fc:	ce d7       	rcall	.+3996   	; 0x149a <printf_P>
	printf_P(VOLTAGE, adc_get_voltage_value());
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	58 de       	rcall	.-848    	; 0x1b8 <adc_get_voltage_value>
     508:	00 d0       	rcall	.+0      	; 0x50a <print_info+0xa2>
     50a:	00 d0       	rcall	.+0      	; 0x50c <print_info+0xa4>
     50c:	ed b7       	in	r30, 0x3d	; 61
     50e:	fe b7       	in	r31, 0x3e	; 62
     510:	31 96       	adiw	r30, 0x01	; 1
     512:	21 ee       	ldi	r18, 0xE1	; 225
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	31 83       	std	Z+1, r19	; 0x01
     518:	20 83       	st	Z, r18
     51a:	93 83       	std	Z+3, r25	; 0x03
     51c:	82 83       	std	Z+2, r24	; 0x02
     51e:	bd d7       	rcall	.+3962   	; 0x149a <printf_P>
	printf_P(FREQ_POT, toFreq(adc_get_speed_pot_value()));
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	2f de       	rcall	.-930    	; 0x188 <adc_get_speed_pot_value>
     52a:	8b df       	rcall	.-234    	; 0x442 <toFreq>
     52c:	00 d0       	rcall	.+0      	; 0x52e <print_info+0xc6>
     52e:	00 d0       	rcall	.+0      	; 0x530 <print_info+0xc8>
     530:	ed b7       	in	r30, 0x3d	; 61
     532:	fe b7       	in	r31, 0x3e	; 62
     534:	31 96       	adiw	r30, 0x01	; 1
     536:	27 eb       	ldi	r18, 0xB7	; 183
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	31 83       	std	Z+1, r19	; 0x01
     53c:	20 83       	st	Z, r18
     53e:	93 83       	std	Z+3, r25	; 0x03
     540:	82 83       	std	Z+2, r24	; 0x02
     542:	ab d7       	rcall	.+3926   	; 0x149a <printf_P>
	printf_P(FREQ_REGUL, toFreq(test_command));
     544:	80 91 ba 01 	lds	r24, 0x01BA
     548:	90 91 bb 01 	lds	r25, 0x01BB
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	76 df       	rcall	.-276    	; 0x442 <toFreq>
     556:	00 d0       	rcall	.+0      	; 0x558 <print_info+0xf0>
     558:	00 d0       	rcall	.+0      	; 0x55a <print_info+0xf2>
     55a:	ed b7       	in	r30, 0x3d	; 61
     55c:	fe b7       	in	r31, 0x3e	; 62
     55e:	31 96       	adiw	r30, 0x01	; 1
     560:	20 e9       	ldi	r18, 0x90	; 144
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	31 83       	std	Z+1, r19	; 0x01
     566:	20 83       	st	Z, r18
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	96 d7       	rcall	.+3884   	; 0x149a <printf_P>
	printf_P(AMPL, (uint16_t)(((uint32_t)test_amplitude * 100) / MAX_PWM),
     56e:	60 91 b8 01 	lds	r22, 0x01B8
     572:	70 91 b9 01 	lds	r23, 0x01B9
     576:	e0 90 b8 01 	lds	r14, 0x01B8
     57a:	f0 90 b9 01 	lds	r15, 0x01B9
     57e:	00 d0       	rcall	.+0      	; 0x580 <print_info+0x118>
     580:	cd b6       	in	r12, 0x3d	; 61
     582:	de b6       	in	r13, 0x3e	; 62
     584:	08 94       	sec
     586:	c1 1c       	adc	r12, r1
     588:	d1 1c       	adc	r13, r1
     58a:	25 e7       	ldi	r18, 0x75	; 117
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	f6 01       	movw	r30, r12
     590:	31 83       	std	Z+1, r19	; 0x01
     592:	20 83       	st	Z, r18
     594:	88 27       	eor	r24, r24
     596:	77 fd       	sbrc	r23, 7
     598:	80 95       	com	r24
     59a:	98 2f       	mov	r25, r24
     59c:	24 e6       	ldi	r18, 0x64	; 100
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	89 d6       	rcall	.+3346   	; 0x12b8 <__mulsi3>
     5a6:	05 2e       	mov	r0, r21
     5a8:	5b e0       	ldi	r21, 0x0B	; 11
     5aa:	96 95       	lsr	r25
     5ac:	87 95       	ror	r24
     5ae:	77 95       	ror	r23
     5b0:	67 95       	ror	r22
     5b2:	5a 95       	dec	r21
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <print_info+0x142>
     5b6:	50 2d       	mov	r21, r0
     5b8:	f6 01       	movw	r30, r12
     5ba:	73 83       	std	Z+3, r23	; 0x03
     5bc:	62 83       	std	Z+2, r22	; 0x02
     5be:	00 27       	eor	r16, r16
     5c0:	f7 fc       	sbrc	r15, 7
     5c2:	00 95       	com	r16
     5c4:	10 2f       	mov	r17, r16
     5c6:	c8 01       	movw	r24, r16
     5c8:	b7 01       	movw	r22, r14
     5ca:	25 e4       	ldi	r18, 0x45	; 69
     5cc:	31 e0       	ldi	r19, 0x01	; 1
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	72 d6       	rcall	.+3300   	; 0x12b8 <__mulsi3>
     5d4:	05 2e       	mov	r0, r21
     5d6:	5b e0       	ldi	r21, 0x0B	; 11
     5d8:	96 95       	lsr	r25
     5da:	87 95       	ror	r24
     5dc:	77 95       	ror	r23
     5de:	67 95       	ror	r22
     5e0:	5a 95       	dec	r21
     5e2:	d1 f7       	brne	.-12     	; 0x5d8 <print_info+0x170>
     5e4:	50 2d       	mov	r21, r0
     5e6:	f6 01       	movw	r30, r12
     5e8:	75 83       	std	Z+5, r23	; 0x05
     5ea:	64 83       	std	Z+4, r22	; 0x04
     5ec:	56 d7       	rcall	.+3756   	; 0x149a <printf_P>
     5ee:	8d b7       	in	r24, 0x3d	; 61
     5f0:	9e b7       	in	r25, 0x3e	; 62
     5f2:	06 96       	adiw	r24, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	9e bf       	out	0x3e, r25	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	8d bf       	out	0x3d, r24	; 61
			(uint16_t)(((uint32_t)test_amplitude * 325) / MAX_PWM));
}
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <main>:
	return;
}
#endif


int main(void) {
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
	PORTB = 0xFF; /* enable pull up on PORTB */
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF; /* enable pull up on PORTC */
     618:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF; /* enable pull up on PORTD */
     61a:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF; /* enable pull up on PORTE */
     61c:	8e b9       	out	0x0e, r24	; 14

	time_init();
     61e:	43 d1       	rcall	.+646    	; 0x8a6 <time_init>
	switch_init();
     620:	36 d1       	rcall	.+620    	; 0x88e <switch_init>
	break_init();
     622:	90 de       	rcall	.-736    	; 0x344 <break_init>
	dac_init();
     624:	96 de       	rcall	.-724    	; 0x352 <dac_init>
	uart_init();
     626:	9c d1       	rcall	.+824    	; 0x960 <uart_init>
	led_init();
     628:	d7 de       	rcall	.-594    	; 0x3d8 <led_init>
	adc_init();
     62a:	a1 dd       	rcall	.-1214   	; 0x16e <adc_init>
	psc_init(MAX_PWM, DEADTIME);
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	98 e0       	ldi	r25, 0x08	; 8
     630:	60 e8       	ldi	r22, 0x80	; 128
     632:	f9 d2       	rcall	.+1522   	; 0xc26 <psc_init>
	timer0_init();
     634:	59 d4       	rcall	.+2226   	; 0xee8 <timer0_init>

	sei(); /* allow interruptions */
     636:	78 94       	sei

	while (1) {
        led1_toggle();
		led2_set_state(switch_get_state()); /* TODO - can be removed */
		print_info();
     638:	04 ec       	ldi	r16, 0xC4	; 196
     63a:	19 e0       	ldi	r17, 0x09	; 9
     63c:	c0 e9       	ldi	r28, 0x90	; 144
     63e:	d1 e0       	ldi	r29, 0x01	; 1
	timer0_init();

	sei(); /* allow interruptions */

	while (1) {
        led1_toggle();
     640:	d6 de       	rcall	.-596    	; 0x3ee <led1_toggle>
		led2_set_state(switch_get_state()); /* TODO - can be removed */
     642:	2b d1       	rcall	.+598    	; 0x89a <switch_get_state>
     644:	f0 de       	rcall	.-544    	; 0x426 <led2_set_state>
		print_info();
     646:	10 df       	rcall	.-480    	; 0x468 <print_info>
     648:	98 01       	movw	r18, r16
     64a:	ce 01       	movw	r24, r28
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     650:	21 50       	subi	r18, 0x01	; 1
     652:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     654:	d1 f7       	brne	.-12     	; 0x64a <main+0x3e>
     656:	f4 cf       	rjmp	.-24     	; 0x640 <main+0x34>

00000658 <pid_Init>:
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor,
		struct PID_DATA *pid)
// Set up PID controller parameters
{
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	fc 01       	movw	r30, r24
     666:	7b 01       	movw	r14, r22
     668:	69 01       	movw	r12, r18
	// Start values for PID controller
	pid->sumError = 0;
     66a:	d9 01       	movw	r26, r18
     66c:	12 96       	adiw	r26, 0x02	; 2
     66e:	1d 92       	st	X+, r1
     670:	1d 92       	st	X+, r1
     672:	1d 92       	st	X+, r1
     674:	1c 92       	st	X, r1
     676:	15 97       	sbiw	r26, 0x05	; 5
	pid->lastProcessValue = 0;
     678:	11 96       	adiw	r26, 0x01	; 1
     67a:	1c 92       	st	X, r1
     67c:	1e 92       	st	-X, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
     67e:	17 96       	adiw	r26, 0x07	; 7
     680:	9c 93       	st	X, r25
     682:	8e 93       	st	-X, r24
     684:	16 97       	sbiw	r26, 0x06	; 6
	pid->I_Factor = i_factor;
     686:	19 96       	adiw	r26, 0x09	; 9
     688:	7c 93       	st	X, r23
     68a:	6e 93       	st	-X, r22
     68c:	18 97       	sbiw	r26, 0x08	; 8
	pid->D_Factor = d_factor;
     68e:	1b 96       	adiw	r26, 0x0b	; 11
     690:	5c 93       	st	X, r21
     692:	4e 93       	st	-X, r20
     694:	1a 97       	sbiw	r26, 0x0a	; 10
	// Limits to avoid overflow
	pid->maxError = INT16_MAX / (pid->P_Factor + 1);
     696:	31 96       	adiw	r30, 0x01	; 1
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	9f e7       	ldi	r25, 0x7F	; 127
     69c:	bf 01       	movw	r22, r30
     69e:	2b d6       	rcall	.+3158   	; 0x12f6 <__divmodhi4>
     6a0:	f9 01       	movw	r30, r18
     6a2:	75 87       	std	Z+13, r23	; 0x0d
     6a4:	64 87       	std	Z+12, r22	; 0x0c
	pid->maxSumError = (INT32_MAX / 2) / (pid->I_Factor + 1);
     6a6:	08 94       	sec
     6a8:	e1 1c       	adc	r14, r1
     6aa:	f1 1c       	adc	r15, r1
     6ac:	00 27       	eor	r16, r16
     6ae:	f7 fc       	sbrc	r15, 7
     6b0:	00 95       	com	r16
     6b2:	10 2f       	mov	r17, r16
     6b4:	6f ef       	ldi	r22, 0xFF	; 255
     6b6:	7f ef       	ldi	r23, 0xFF	; 255
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	9f e3       	ldi	r25, 0x3F	; 63
     6bc:	a8 01       	movw	r20, r16
     6be:	97 01       	movw	r18, r14
     6c0:	2d d6       	rcall	.+3162   	; 0x131c <__divmodsi4>
     6c2:	d6 01       	movw	r26, r12
     6c4:	1e 96       	adiw	r26, 0x0e	; 14
     6c6:	2d 93       	st	X+, r18
     6c8:	3d 93       	st	X+, r19
     6ca:	4d 93       	st	X+, r20
     6cc:	5c 93       	st	X, r21
     6ce:	51 97       	sbiw	r26, 0x11	; 17
}
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue,
		struct PID_DATA *pid_st) {
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	6b 01       	movw	r12, r22
     6f4:	ea 01       	movw	r28, r20
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;

	error = setPoint - processValue;
     6f6:	bc 01       	movw	r22, r24
     6f8:	6c 19       	sub	r22, r12
     6fa:	7d 09       	sbc	r23, r13

	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError) {
     6fc:	2c 85       	ldd	r18, Y+12	; 0x0c
     6fe:	3d 85       	ldd	r19, Y+13	; 0x0d
     700:	26 17       	cp	r18, r22
     702:	37 07       	cpc	r19, r23
     704:	3c f4       	brge	.+14     	; 0x714 <pid_Controller+0x36>
     706:	0f 2e       	mov	r0, r31
     708:	ff ef       	ldi	r31, 0xFF	; 255
     70a:	af 2e       	mov	r10, r31
     70c:	ff e7       	ldi	r31, 0x7F	; 127
     70e:	bf 2e       	mov	r11, r31
     710:	f0 2d       	mov	r31, r0
     712:	17 c0       	rjmp	.+46     	; 0x742 <pid_Controller+0x64>
		p_term = INT16_MAX;
	} else if (error < -pid_st->maxError) {
     714:	88 27       	eor	r24, r24
     716:	99 27       	eor	r25, r25
     718:	82 1b       	sub	r24, r18
     71a:	93 0b       	sbc	r25, r19
     71c:	68 17       	cp	r22, r24
     71e:	79 07       	cpc	r23, r25
     720:	3c f4       	brge	.+14     	; 0x730 <pid_Controller+0x52>
     722:	0f 2e       	mov	r0, r31
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	af 2e       	mov	r10, r31
     728:	f0 e8       	ldi	r31, 0x80	; 128
     72a:	bf 2e       	mov	r11, r31
     72c:	f0 2d       	mov	r31, r0
     72e:	09 c0       	rjmp	.+18     	; 0x742 <pid_Controller+0x64>
		p_term = -INT16_MAX;
	} else {
		p_term = pid_st->P_Factor * error;
     730:	8e 81       	ldd	r24, Y+6	; 0x06
     732:	9f 81       	ldd	r25, Y+7	; 0x07
     734:	68 9f       	mul	r22, r24
     736:	50 01       	movw	r10, r0
     738:	69 9f       	mul	r22, r25
     73a:	b0 0c       	add	r11, r0
     73c:	78 9f       	mul	r23, r24
     73e:	b0 0c       	add	r11, r0
     740:	11 24       	eor	r1, r1
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
     742:	9b 01       	movw	r18, r22
     744:	44 27       	eor	r20, r20
     746:	37 fd       	sbrc	r19, 7
     748:	40 95       	com	r20
     74a:	54 2f       	mov	r21, r20
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	9b 81       	ldd	r25, Y+3	; 0x03
     750:	ac 81       	ldd	r26, Y+4	; 0x04
     752:	bd 81       	ldd	r27, Y+5	; 0x05
     754:	bc 01       	movw	r22, r24
     756:	cd 01       	movw	r24, r26
     758:	62 0f       	add	r22, r18
     75a:	73 1f       	adc	r23, r19
     75c:	84 1f       	adc	r24, r20
     75e:	95 1f       	adc	r25, r21
	if (temp > pid_st->maxSumError) {
     760:	2e 85       	ldd	r18, Y+14	; 0x0e
     762:	3f 85       	ldd	r19, Y+15	; 0x0f
     764:	48 89       	ldd	r20, Y+16	; 0x10
     766:	59 89       	ldd	r21, Y+17	; 0x11
     768:	26 17       	cp	r18, r22
     76a:	37 07       	cpc	r19, r23
     76c:	48 07       	cpc	r20, r24
     76e:	59 07       	cpc	r21, r25
     770:	7c f4       	brge	.+30     	; 0x790 <pid_Controller+0xb2>
		i_term = (INT32_MAX / 2);
		pid_st->sumError = pid_st->maxSumError;
     772:	2a 83       	std	Y+2, r18	; 0x02
     774:	3b 83       	std	Y+3, r19	; 0x03
     776:	4c 83       	std	Y+4, r20	; 0x04
     778:	5d 83       	std	Y+5, r21	; 0x05
     77a:	0f 2e       	mov	r0, r31
     77c:	ff ef       	ldi	r31, 0xFF	; 255
     77e:	ef 2e       	mov	r14, r31
     780:	ff ef       	ldi	r31, 0xFF	; 255
     782:	ff 2e       	mov	r15, r31
     784:	ff ef       	ldi	r31, 0xFF	; 255
     786:	0f 2f       	mov	r16, r31
     788:	ff e3       	ldi	r31, 0x3F	; 63
     78a:	1f 2f       	mov	r17, r31
     78c:	f0 2d       	mov	r31, r0
     78e:	28 c0       	rjmp	.+80     	; 0x7e0 <pid_Controller+0x102>
	} else if (temp < -pid_st->maxSumError) {
     790:	ee 24       	eor	r14, r14
     792:	ff 24       	eor	r15, r15
     794:	87 01       	movw	r16, r14
     796:	e2 1a       	sub	r14, r18
     798:	f3 0a       	sbc	r15, r19
     79a:	04 0b       	sbc	r16, r20
     79c:	15 0b       	sbc	r17, r21
     79e:	6e 15       	cp	r22, r14
     7a0:	7f 05       	cpc	r23, r15
     7a2:	80 07       	cpc	r24, r16
     7a4:	91 07       	cpc	r25, r17
     7a6:	7c f4       	brge	.+30     	; 0x7c6 <pid_Controller+0xe8>
		i_term = -(INT32_MAX / 2);
		pid_st->sumError = -pid_st->maxSumError;
     7a8:	ea 82       	std	Y+2, r14	; 0x02
     7aa:	fb 82       	std	Y+3, r15	; 0x03
     7ac:	0c 83       	std	Y+4, r16	; 0x04
     7ae:	1d 83       	std	Y+5, r17	; 0x05
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	ef 2e       	mov	r14, r31
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ff 2e       	mov	r15, r31
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	0f 2f       	mov	r16, r31
     7be:	f0 ec       	ldi	r31, 0xC0	; 192
     7c0:	1f 2f       	mov	r17, r31
     7c2:	f0 2d       	mov	r31, r0
     7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <pid_Controller+0x102>
	} else {
		pid_st->sumError = temp;
     7c6:	6a 83       	std	Y+2, r22	; 0x02
     7c8:	7b 83       	std	Y+3, r23	; 0x03
     7ca:	8c 83       	std	Y+4, r24	; 0x04
     7cc:	9d 83       	std	Y+5, r25	; 0x05
		i_term = pid_st->I_Factor * pid_st->sumError;
     7ce:	28 85       	ldd	r18, Y+8	; 0x08
     7d0:	39 85       	ldd	r19, Y+9	; 0x09
     7d2:	44 27       	eor	r20, r20
     7d4:	37 fd       	sbrc	r19, 7
     7d6:	40 95       	com	r20
     7d8:	54 2f       	mov	r21, r20
     7da:	6e d5       	rcall	.+2780   	; 0x12b8 <__mulsi3>
     7dc:	7b 01       	movw	r14, r22
     7de:	8c 01       	movw	r16, r24
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     7e0:	88 81       	ld	r24, Y
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	8c 19       	sub	r24, r12
     7e6:	9d 09       	sbc	r25, r13
     7e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     7ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     7ec:	a9 01       	movw	r20, r18
     7ee:	84 9f       	mul	r24, r20
     7f0:	90 01       	movw	r18, r0
     7f2:	85 9f       	mul	r24, r21
     7f4:	30 0d       	add	r19, r0
     7f6:	94 9f       	mul	r25, r20
     7f8:	30 0d       	add	r19, r0
     7fa:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
     7fc:	d9 82       	std	Y+1, r13	; 0x01
     7fe:	c8 82       	st	Y, r12

	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     800:	b5 01       	movw	r22, r10
     802:	88 27       	eor	r24, r24
     804:	77 fd       	sbrc	r23, 7
     806:	80 95       	com	r24
     808:	98 2f       	mov	r25, r24
     80a:	44 27       	eor	r20, r20
     80c:	37 fd       	sbrc	r19, 7
     80e:	40 95       	com	r20
     810:	54 2f       	mov	r21, r20
     812:	62 0f       	add	r22, r18
     814:	73 1f       	adc	r23, r19
     816:	84 1f       	adc	r24, r20
     818:	95 1f       	adc	r25, r21
     81a:	6e 0d       	add	r22, r14
     81c:	7f 1d       	adc	r23, r15
     81e:	80 1f       	adc	r24, r16
     820:	91 1f       	adc	r25, r17
     822:	20 e8       	ldi	r18, 0x80	; 128
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	78 d5       	rcall	.+2800   	; 0x131c <__divmodsi4>
     82c:	82 2f       	mov	r24, r18
     82e:	93 2f       	mov	r25, r19
     830:	a4 2f       	mov	r26, r20
     832:	b5 2f       	mov	r27, r21
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	50 e8       	ldi	r21, 0x80	; 128
     838:	95 07       	cpc	r25, r21
     83a:	5f ef       	ldi	r21, 0xFF	; 255
     83c:	a5 07       	cpc	r26, r21
     83e:	5f ef       	ldi	r21, 0xFF	; 255
     840:	b5 07       	cpc	r27, r21
     842:	24 f4       	brge	.+8      	; 0x84c <pid_Controller+0x16e>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e8       	ldi	r25, 0x80	; 128
     848:	af ef       	ldi	r26, 0xFF	; 255
     84a:	bf ef       	ldi	r27, 0xFF	; 255
     84c:	9c 01       	movw	r18, r24
     84e:	ad 01       	movw	r20, r26
     850:	20 30       	cpi	r18, 0x00	; 0
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	38 07       	cpc	r19, r24
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	48 07       	cpc	r20, r24
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	58 07       	cpc	r21, r24
     85e:	24 f0       	brlt	.+8      	; 0x868 <pid_Controller+0x18a>
     860:	2f ef       	ldi	r18, 0xFF	; 255
     862:	3f e7       	ldi	r19, 0x7F	; 127
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
	} else if (ret < -INT16_MAX) {
		ret = -INT16_MAX;
	}

	return ((int16_t) ret);
}
     868:	82 2f       	mov	r24, r18
     86a:	93 2f       	mov	r25, r19
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	08 95       	ret

00000882 <pid_Reset_Integrator>:
/*! \brief Resets the integrator.
 *
 *  Calling this function will reset the integrator in the PID regulator.
 */
void pid_Reset_Integrator(pidData_t *pid_st) {
	pid_st->sumError = 0;
     882:	fc 01       	movw	r30, r24
     884:	12 82       	std	Z+2, r1	; 0x02
     886:	13 82       	std	Z+3, r1	; 0x03
     888:	14 82       	std	Z+4, r1	; 0x04
     88a:	15 82       	std	Z+5, r1	; 0x05
}
     88c:	08 95       	ret

0000088e <switch_init>:
#define SWITCH_DDR  DDRC
#define SWITCH_PIN  PC1


void switch_init(void){
	SWITCH_DDR &= ~(1 << SWITCH_PIN);
     88e:	e7 e2       	ldi	r30, 0x27	; 39
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	8d 7f       	andi	r24, 0xFD	; 253
     896:	80 83       	st	Z, r24
}
     898:	08 95       	ret

0000089a <switch_get_state>:

state_t switch_get_state(void){
	return (SWITCH_IN & (1 << SWITCH_PIN)) ? ON : OFF;
     89a:	86 b1       	in	r24, 0x06	; 6
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
}
     8a2:	81 70       	andi	r24, 0x01	; 1
     8a4:	08 95       	ret

000008a6 <time_init>:
#include <util/atomic.h>

static volatile uint16_t time;

void time_init(void) {
	TCCR1A = 0;
     8a6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 1 << CS10;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1 << TOIE1;
     8b0:	80 93 6f 00 	sts	0x006F, r24
}
     8b4:	08 95       	ret

000008b6 <time_get>:

time_t time_get(void) {
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <time_get+0x6>
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
	typeof(time) high;
	uint16_t low;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8c0:	2f b7       	in	r18, 0x3f	; 63
     8c2:	f8 94       	cli
		high = time;
     8c4:	80 91 a6 01 	lds	r24, 0x01A6
     8c8:	90 91 a7 01 	lds	r25, 0x01A7
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	89 83       	std	Y+1, r24	; 0x01
		low = TCNT1;
     8d0:	80 91 84 00 	lds	r24, 0x0084
     8d4:	90 91 85 00 	lds	r25, 0x0085
     8d8:	2f bf       	out	0x3f, r18	; 63
	}

	return ((time_t)high << 16) | low;
     8da:	29 81       	ldd	r18, Y+1	; 0x01
     8dc:	3a 81       	ldd	r19, Y+2	; 0x02
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	a9 01       	movw	r20, r18
     8e4:	33 27       	eor	r19, r19
     8e6:	22 27       	eor	r18, r18
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	28 2b       	or	r18, r24
     8ee:	39 2b       	or	r19, r25
     8f0:	4a 2b       	or	r20, r26
     8f2:	5b 2b       	or	r21, r27
}
     8f4:	62 2f       	mov	r22, r18
     8f6:	73 2f       	mov	r23, r19
     8f8:	84 2f       	mov	r24, r20
     8fa:	95 2f       	mov	r25, r21
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	08 95       	ret

00000906 <time_get_diff>:

time_t time_get_diff(time_t old) {
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	7b 01       	movw	r14, r22
     910:	8c 01       	movw	r16, r24
	return time_get() - old;
     912:	d1 df       	rcall	.-94     	; 0x8b6 <time_get>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	2e 19       	sub	r18, r14
     91a:	3f 09       	sbc	r19, r15
     91c:	40 0b       	sbc	r20, r16
     91e:	51 0b       	sbc	r21, r17
}
     920:	62 2f       	mov	r22, r18
     922:	73 2f       	mov	r23, r19
     924:	84 2f       	mov	r24, r20
     926:	95 2f       	mov	r25, r21
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	08 95       	ret

00000932 <__vector_15>:


ISR(TIMER1_OVF_vect) {
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
	time++;
     940:	80 91 a6 01 	lds	r24, 0x01A6
     944:	90 91 a7 01 	lds	r25, 0x01A7
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	90 93 a7 01 	sts	0x01A7, r25
     94e:	80 93 a6 01 	sts	0x01A6, r24
}
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <uart_init>:
static FILE mystdout = FDEV_SETUP_STREAM(&uart_stdio_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE mystdin  = FDEV_SETUP_STREAM(NULL, &uart_stdio_getchar, _FDEV_SETUP_READ);

void uart_init(void) {
    /* Set baud rate */
    UBRRH = UBRRH_VALUE;
     960:	10 92 c5 00 	sts	0x00C5, r1
    UBRRL = UBRRL_VALUE;
     964:	82 e2       	ldi	r24, 0x22	; 34
     966:	80 93 c4 00 	sts	0x00C4, r24
    /* Clear TXC and set/clear double speed mode */
    UCSRA = (1<<TXC) | (USE_2X<<U2X);
     96a:	82 e4       	ldi	r24, 0x42	; 66
     96c:	80 93 c0 00 	sts	0x00C0, r24
    /* Set frame format: 8data, no parity & 1 stop bit */
    UCSRC = (1<<UCSZ1) | (1<<UCSZ0);
     970:	86 e0       	ldi	r24, 0x06	; 6
     972:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable receiver and transmitter */
    UCSRB = (1<<RXEN) | (1<<TXEN);
     976:	88 e1       	ldi	r24, 0x18	; 24
     978:	80 93 c1 00 	sts	0x00C1, r24

    stdout = &mystdout;
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	90 93 bf 01 	sts	0x01BF, r25
     984:	80 93 be 01 	sts	0x01BE, r24
    stdin  = &mystdin;
     988:	81 e1       	ldi	r24, 0x11	; 17
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	90 93 bd 01 	sts	0x01BD, r25
     990:	80 93 bc 01 	sts	0x01BC, r24
}
     994:	08 95       	ret

00000996 <uart_stdio_putchar>:

static int uart_stdio_putchar(char c, FILE *stream) {
     996:	1f 93       	push	r17
     998:	18 2f       	mov	r17, r24
	if (c == '\n')
     99a:	8a 30       	cpi	r24, 0x0A	; 10
     99c:	11 f4       	brne	.+4      	; 0x9a2 <uart_stdio_putchar+0xc>
		uart_stdio_putchar('\r', stream);
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	fa df       	rcall	.-12     	; 0x996 <uart_stdio_putchar>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <util/setbaud.h>

inline bool uart_isTXempty(void) {
    return (UCSRA & (1<<UDRE)) ? true : false;
     9a2:	e0 ec       	ldi	r30, 0xC0	; 192
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
    /* Wait for empty transmit buffer */
    while (false == uart_isTXempty())
     9a8:	85 ff       	sbrs	r24, 5
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <uart_stdio_putchar+0x10>
        ;
	UDR = c;
     9ac:	10 93 c6 00 	sts	0x00C6, r17
	return 0;
}
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	1f 91       	pop	r17
     9b6:	08 95       	ret

000009b8 <uart_stdio_getchar>:
}

inline bool uart_isRXempty(void) {
    return (UCSRA & (1<<RXC)) ? false : true;
     9b8:	e0 ec       	ldi	r30, 0xC0	; 192
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z

static int uart_stdio_getchar(FILE *stream) {
    /* Wait for data to be received */
    while (true == uart_isRXempty())
     9be:	88 23       	and	r24, r24
     9c0:	ec f7       	brge	.-6      	; 0x9bc <uart_stdio_getchar+0x4>
        ;
    /* Get and return received data from buffer */
    return UDR;
     9c2:	80 91 c6 00 	lds	r24, 0x00C6
}
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	08 95       	ret

000009ca <SVPWM>:
 * Ts = MAX_PWM
 * Vx is at most Vmax * sqrt(3)/2
 * Vx is a requested size of voltage (a size of requested vector)
 * so the "amp" can be in range 0...MAX_PWM
 */
void SVPWM(uint16_t amp, uint8_t angle_increment, pwm_t *pwm) {
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
     9d4:	8a 01       	movw	r16, r20
	static uint8_t  angle = 0; /* angle in "tab_sin" units */
	uint16_t        tau1, tau2;
	uint16_t        val1, val2_1, val3, val2_2;

	/* Angle increment is too big */
	assert(angle_increment <= ANGLE_INCREMENT_MAX);
     9d6:	67 30       	cpi	r22, 0x07	; 7
     9d8:	18 f0       	brcs	.+6      	; 0x9e0 <SVPWM+0x16>
     9da:	81 e2       	ldi	r24, 0x21	; 33
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	7e dc       	rcall	.-1796   	; 0x2dc <assert_handle>
	/* Amplitude is too big */
	assert(amp <= MAX_PWM);
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	c1 30       	cpi	r28, 0x01	; 1
     9e4:	d8 07       	cpc	r29, r24
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <SVPWM+0x24>
     9e8:	83 e2       	ldi	r24, 0x23	; 35
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	77 dc       	rcall	.-1810   	; 0x2dc <assert_handle>
	/* Data type of "angle" is too small for angle computation */
	cassert(MAX_VALUE(angle) >= MAX_ANGLE + ANGLE_INCREMENT_MAX);
	/* If not fulfilled, 1 sector can be skipped. Current algorithm can't handle it. */
	cassert(MAX_ANGLE >= ANGLE_INCREMENT_MAX);

	angle += angle_increment;
     9ee:	80 91 a8 01 	lds	r24, 0x01A8
     9f2:	68 0f       	add	r22, r24
     9f4:	60 93 a8 01 	sts	0x01A8, r22

	if (angle > MAX_ANGLE) {
     9f8:	6d 37       	cpi	r22, 0x7D	; 125
     9fa:	70 f0       	brcs	.+28     	; 0xa18 <SVPWM+0x4e>
		angle -= MAX_ANGLE;
     9fc:	86 2f       	mov	r24, r22
     9fe:	8c 57       	subi	r24, 0x7C	; 124
     a00:	80 93 a8 01 	sts	0x01A8, r24
		sector_number++;
     a04:	80 91 1f 01 	lds	r24, 0x011F
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	80 93 1f 01 	sts	0x011F, r24

		if (sector_number > 6) {
     a0e:	87 30       	cpi	r24, 0x07	; 7
     a10:	18 f0       	brcs	.+6      	; 0xa18 <SVPWM+0x4e>
			sector_number = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 1f 01 	sts	0x011F, r24
	//tau2 = ((uint32_t)amp * tab_sin[angle]) / TAB_SIN_SCALE;

	/* faster */
	/* call MultiUU16X8toH16 to multiply amp and tab_sin and take high 16bits to divide it by 256 */
	cassert(TAB_SIN_SCALE == 256);
	MultiUU16X8toH16(tau1, amp, tab_sin[MAX_ANGLE - angle]);
     a18:	20 91 a8 01 	lds	r18, 0x01A8
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	8c e7       	ldi	r24, 0x7C	; 124
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	82 1b       	sub	r24, r18
     a24:	93 0b       	sbc	r25, r19
     a26:	e0 e2       	ldi	r30, 0x20	; 32
     a28:	f1 e0       	ldi	r31, 0x01	; 1
     a2a:	df 01       	movw	r26, r30
     a2c:	a8 0f       	add	r26, r24
     a2e:	b9 1f       	adc	r27, r25
     a30:	8c 91       	ld	r24, X
     a32:	d8 9f       	mul	r29, r24
     a34:	a0 01       	movw	r20, r0
     a36:	c8 9f       	mul	r28, r24
     a38:	41 0d       	add	r20, r1
     a3a:	11 24       	eor	r1, r1
     a3c:	51 1d       	adc	r21, r1
	MultiUU16X8toH16(tau2, amp, tab_sin[angle]);
     a3e:	e2 0f       	add	r30, r18
     a40:	f3 1f       	adc	r31, r19
     a42:	80 81       	ld	r24, Z
     a44:	d8 9f       	mul	r29, r24
     a46:	90 01       	movw	r18, r0
     a48:	c8 9f       	mul	r28, r24
     a4a:	21 0d       	add	r18, r1
     a4c:	11 24       	eor	r1, r1
     a4e:	31 1d       	adc	r19, r1
	 *	 val0 = (MAX_PWM - t1 - t2) / 2
	 *   val1 = (MAX_PWM + t1 - t2) / 2
	 *   val2 = (MAX_PWM + t1 + t2) / 2
	 */

	assert(tau1 + tau2 <= MAX_PWM);
     a50:	b9 01       	movw	r22, r18
     a52:	64 0f       	add	r22, r20
     a54:	75 1f       	adc	r23, r21
     a56:	a8 e0       	ldi	r26, 0x08	; 8
     a58:	61 30       	cpi	r22, 0x01	; 1
     a5a:	7a 07       	cpc	r23, r26
     a5c:	18 f0       	brcs	.+6      	; 0xa64 <SVPWM+0x9a>
     a5e:	89 e6       	ldi	r24, 0x69	; 105
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	3c dc       	rcall	.-1928   	; 0x2dc <assert_handle>
	val1   = (MAX_PWM - tau1 - tau2) / 2;
     a64:	88 27       	eor	r24, r24
     a66:	99 27       	eor	r25, r25
     a68:	84 1b       	sub	r24, r20
     a6a:	95 0b       	sbc	r25, r21
     a6c:	82 1b       	sub	r24, r18
     a6e:	93 0b       	sbc	r25, r19
     a70:	80 50       	subi	r24, 0x00	; 0
     a72:	98 4f       	sbci	r25, 0xF8	; 248
     a74:	dc 01       	movw	r26, r24
     a76:	b6 95       	lsr	r27
     a78:	a7 95       	ror	r26
	val2_1 = (MAX_PWM + tau1 - tau2) / 2;
     a7a:	ca 01       	movw	r24, r20
     a7c:	80 50       	subi	r24, 0x00	; 0
     a7e:	98 4f       	sbci	r25, 0xF8	; 248
     a80:	82 1b       	sub	r24, r18
     a82:	93 0b       	sbc	r25, r19
     a84:	fc 01       	movw	r30, r24
     a86:	f6 95       	lsr	r31
     a88:	e7 95       	ror	r30
	val2_2 = (MAX_PWM - tau1 + tau2) / 2;
     a8a:	c9 01       	movw	r24, r18
     a8c:	80 50       	subi	r24, 0x00	; 0
     a8e:	98 4f       	sbci	r25, 0xF8	; 248
     a90:	84 1b       	sub	r24, r20
     a92:	95 0b       	sbc	r25, r21
     a94:	ac 01       	movw	r20, r24
     a96:	56 95       	lsr	r21
     a98:	47 95       	ror	r20
	val3   = (MAX_PWM + tau1 + tau2) / 2;
     a9a:	cb 01       	movw	r24, r22
     a9c:	80 50       	subi	r24, 0x00	; 0
     a9e:	98 4f       	sbci	r25, 0xF8	; 248
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24

	switch (sector_number) {
     aa4:	20 91 1f 01 	lds	r18, 0x011F
     aa8:	23 30       	cpi	r18, 0x03	; 3
     aaa:	f1 f0       	breq	.+60     	; 0xae8 <SVPWM+0x11e>
     aac:	24 30       	cpi	r18, 0x04	; 4
     aae:	28 f4       	brcc	.+10     	; 0xaba <SVPWM+0xf0>
     ab0:	21 30       	cpi	r18, 0x01	; 1
     ab2:	51 f0       	breq	.+20     	; 0xac8 <SVPWM+0xfe>
     ab4:	22 30       	cpi	r18, 0x02	; 2
     ab6:	c1 f5       	brne	.+112    	; 0xb28 <SVPWM+0x15e>
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <SVPWM+0x10e>
     aba:	25 30       	cpi	r18, 0x05	; 5
     abc:	29 f1       	breq	.+74     	; 0xb08 <SVPWM+0x13e>
     abe:	25 30       	cpi	r18, 0x05	; 5
     ac0:	d8 f0       	brcs	.+54     	; 0xaf8 <SVPWM+0x12e>
     ac2:	26 30       	cpi	r18, 0x06	; 6
     ac4:	89 f5       	brne	.+98     	; 0xb28 <SVPWM+0x15e>
     ac6:	28 c0       	rjmp	.+80     	; 0xb18 <SVPWM+0x14e>
		 * MAX_PWM ------------+
		 *
		 * t1 = tau1
		 * t2 = tau2
		 */
		pwm->pwm0 = val1;
     ac8:	e8 01       	movw	r28, r16
     aca:	b9 83       	std	Y+1, r27	; 0x01
     acc:	a8 83       	st	Y, r26
		pwm->pwm1 = val2_1;
     ace:	fb 83       	std	Y+3, r31	; 0x03
     ad0:	ea 83       	std	Y+2, r30	; 0x02
		pwm->pwm2 = val3;
     ad2:	9d 83       	std	Y+5, r25	; 0x05
     ad4:	8c 83       	std	Y+4, r24	; 0x04
     ad6:	2b c0       	rjmp	.+86     	; 0xb2e <SVPWM+0x164>
		 *     val2 --------+  |
		 * MAX_PWM ------------+
		 *
		 * but t1 is now t2 and t2 is t1
		 */
		pwm->pwm0 = val2_2;
     ad8:	f8 01       	movw	r30, r16
     ada:	51 83       	std	Z+1, r21	; 0x01
     adc:	40 83       	st	Z, r20
		pwm->pwm1 = val1;
     ade:	b3 83       	std	Z+3, r27	; 0x03
     ae0:	a2 83       	std	Z+2, r26	; 0x02
		pwm->pwm2 = val3;
     ae2:	95 83       	std	Z+5, r25	; 0x05
     ae4:	84 83       	std	Z+4, r24	; 0x04
     ae6:	23 c0       	rjmp	.+70     	; 0xb2e <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * t1 = tau1
		 * t2 = tau2
		 */
		pwm->pwm0 = val3;
     ae8:	e8 01       	movw	r28, r16
     aea:	99 83       	std	Y+1, r25	; 0x01
     aec:	88 83       	st	Y, r24
		pwm->pwm1 = val1;
     aee:	bb 83       	std	Y+3, r27	; 0x03
     af0:	aa 83       	std	Y+2, r26	; 0x02
		pwm->pwm2 = val2_1;
     af2:	fd 83       	std	Y+5, r31	; 0x05
     af4:	ec 83       	std	Y+4, r30	; 0x04
     af6:	1b c0       	rjmp	.+54     	; 0xb2e <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * but t1 is now t2 and t2 is t1
		 *
		 */
		pwm->pwm0 = val3;
     af8:	f8 01       	movw	r30, r16
     afa:	91 83       	std	Z+1, r25	; 0x01
     afc:	80 83       	st	Z, r24
		pwm->pwm1 = val2_2;
     afe:	53 83       	std	Z+3, r21	; 0x03
     b00:	42 83       	std	Z+2, r20	; 0x02
		pwm->pwm2 = val1;
     b02:	b5 83       	std	Z+5, r27	; 0x05
     b04:	a4 83       	std	Z+4, r26	; 0x04
     b06:	13 c0       	rjmp	.+38     	; 0xb2e <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * t1 = tau1
		 * t2 = tau2
		 */
		pwm->pwm0 = val2_1;
     b08:	e8 01       	movw	r28, r16
     b0a:	f9 83       	std	Y+1, r31	; 0x01
     b0c:	e8 83       	st	Y, r30
		pwm->pwm1 = val3;
     b0e:	9b 83       	std	Y+3, r25	; 0x03
     b10:	8a 83       	std	Y+2, r24	; 0x02
		pwm->pwm2 = val1;
     b12:	bd 83       	std	Y+5, r27	; 0x05
     b14:	ac 83       	std	Y+4, r26	; 0x04
     b16:	0b c0       	rjmp	.+22     	; 0xb2e <SVPWM+0x164>
		 * MAX_PWM ------------+
		 *
		 * but t1 is now t2 and t2 is t1
		 *
		 */
		pwm->pwm0 = val1;
     b18:	f8 01       	movw	r30, r16
     b1a:	b1 83       	std	Z+1, r27	; 0x01
     b1c:	a0 83       	st	Z, r26
		pwm->pwm1 = val3;
     b1e:	93 83       	std	Z+3, r25	; 0x03
     b20:	82 83       	std	Z+2, r24	; 0x02
		pwm->pwm2 = val2_2;
     b22:	55 83       	std	Z+5, r21	; 0x05
     b24:	44 83       	std	Z+4, r20	; 0x04
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <SVPWM+0x164>
		break;
	default:
		assert(0);
     b28:	82 ee       	ldi	r24, 0xE2	; 226
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	d7 db       	rcall	.-2130   	; 0x2dc <assert_handle>
		break;
	}
}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <psc_halt>:
	PSOC1 = (1 << POEN1B) | (1 << POEN1A);
	PSOC2 = (1 << POEN2B) | (1 << POEN2A);
}

void psc_halt(void) {
	PSOC0 &= ~((1 << POEN0B) | (1 << POEN0A));
     b38:	e0 ed       	ldi	r30, 0xD0	; 208
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	8a 7f       	andi	r24, 0xFA	; 250
     b40:	80 83       	st	Z, r24
	PSOC1 &= ~((1 << POEN1B) | (1 << POEN1A));
     b42:	e0 ee       	ldi	r30, 0xE0	; 224
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8a 7f       	andi	r24, 0xFA	; 250
     b4a:	80 83       	st	Z, r24
	PSOC2 &= ~((1 << POEN2B) | (1 << POEN2A));
     b4c:	e0 ef       	ldi	r30, 0xF0	; 240
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	8a 7f       	andi	r24, 0xFA	; 250
     b54:	80 83       	st	Z, r24
}
     b56:	08 95       	ret

00000b58 <psc_load>:

/* Load the PSC 0, 1 and 2 with new values */
void psc_load(uint16_t time0, uint16_t time1, uint16_t time2) {
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
	/* slow */
	//	PCNF0 |= 1 << PLOCK0;
	//	PCNF1 |= 1 << PLOCK1;
	//	PCNF2 |= 1 << PLOCK2;
	/* faster */
	set_bit(PCNF0, PLOCK0);
     b5e:	80 91 da 00 	lds	r24, 0x00DA
     b62:	80 62       	ori	r24, 0x20	; 32
     b64:	80 93 da 00 	sts	0x00DA, r24
	set_bit(PCNF1, PLOCK1);
     b68:	80 91 ea 00 	lds	r24, 0x00EA
     b6c:	80 62       	ori	r24, 0x20	; 32
     b6e:	80 93 ea 00 	sts	0x00EA, r24
	set_bit(PCNF2, PLOCK2);
     b72:	80 91 fa 00 	lds	r24, 0x00FA
     b76:	80 62       	ori	r24, 0x20	; 32
     b78:	80 93 fa 00 	sts	0x00FA, r24

	assert(OCR0RB >= time0 + deadtime);
     b7c:	20 91 d8 00 	lds	r18, 0x00D8
     b80:	30 91 d9 00 	lds	r19, 0x00D9
     b84:	80 91 a9 01 	lds	r24, 0x01A9
     b88:	a8 2f       	mov	r26, r24
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	fe 01       	movw	r30, r28
     b8e:	ea 0f       	add	r30, r26
     b90:	fb 1f       	adc	r31, r27
     b92:	2e 17       	cp	r18, r30
     b94:	3f 07       	cpc	r19, r31
     b96:	18 f4       	brcc	.+6      	; 0xb9e <psc_load+0x46>
     b98:	8a e4       	ldi	r24, 0x4A	; 74
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	9f db       	rcall	.-2242   	; 0x2dc <assert_handle>
	OCR0SA = time0;
     b9e:	d0 93 d3 00 	sts	0x00D3, r29
     ba2:	c0 93 d2 00 	sts	0x00D2, r28
	OCR0SB = time0 + deadtime;
     ba6:	f0 93 d7 00 	sts	0x00D7, r31
     baa:	e0 93 d6 00 	sts	0x00D6, r30

	assert(OCR1RB >= time1 + deadtime);
     bae:	80 91 e8 00 	lds	r24, 0x00E8
     bb2:	90 91 e9 00 	lds	r25, 0x00E9
     bb6:	9b 01       	movw	r18, r22
     bb8:	2a 0f       	add	r18, r26
     bba:	3b 1f       	adc	r19, r27
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	18 f4       	brcc	.+6      	; 0xbc8 <psc_load+0x70>
     bc2:	8e e4       	ldi	r24, 0x4E	; 78
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	8a db       	rcall	.-2284   	; 0x2dc <assert_handle>
	OCR1SA = time1;
     bc8:	70 93 e3 00 	sts	0x00E3, r23
     bcc:	60 93 e2 00 	sts	0x00E2, r22
	OCR1SB = time1 + deadtime;
     bd0:	30 93 e7 00 	sts	0x00E7, r19
     bd4:	20 93 e6 00 	sts	0x00E6, r18

	assert(OCR2RB >= time2 + deadtime);
     bd8:	80 91 f8 00 	lds	r24, 0x00F8
     bdc:	90 91 f9 00 	lds	r25, 0x00F9
     be0:	9a 01       	movw	r18, r20
     be2:	2a 0f       	add	r18, r26
     be4:	3b 1f       	adc	r19, r27
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <psc_load+0x9a>
     bec:	82 e5       	ldi	r24, 0x52	; 82
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	75 db       	rcall	.-2326   	; 0x2dc <assert_handle>
	OCR2SA = time2;
     bf2:	50 93 f3 00 	sts	0x00F3, r21
     bf6:	40 93 f2 00 	sts	0x00F2, r20
	OCR2SB = time2 + deadtime;
     bfa:	30 93 f7 00 	sts	0x00F7, r19
     bfe:	20 93 f6 00 	sts	0x00F6, r18
	/* slow */
	//	PCNF0 &= ~(1 << PLOCK0);
	//	PCNF1 &= ~(1 << PLOCK1);
	//	PCNF2 &= ~(1 << PLOCK2);
	/* faster */
	clr_bit(PCNF0, PLOCK0);
     c02:	80 91 da 00 	lds	r24, 0x00DA
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	80 93 da 00 	sts	0x00DA, r24
	clr_bit(PCNF1, PLOCK1);
     c0c:	80 91 ea 00 	lds	r24, 0x00EA
     c10:	8f 7d       	andi	r24, 0xDF	; 223
     c12:	80 93 ea 00 	sts	0x00EA, r24
	clr_bit(PCNF2, PLOCK2);
     c16:	80 91 fa 00 	lds	r24, 0x00FA
     c1a:	8f 7d       	andi	r24, 0xDF	; 223
     c1c:	80 93 fa 00 	sts	0x00FA, r24
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <psc_init>:
/*
 * Center Aligned Mode
 *
 * PLL should be already started (we drive MCU clock from PLL output)
 */
void psc_init(uint16_t pwm_max_value, uint8_t dead_time) {
     c26:	ac 01       	movw	r20, r24
	deadtime = dead_time;
     c28:	60 93 a9 01 	sts	0x01A9, r22

	/* set PLL output to 64Mhz */
	PLLCSR |= 1 << PLLF;
     c2c:	e9 e4       	ldi	r30, 0x49	; 73
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	84 60       	ori	r24, 0x04	; 4
     c34:	80 83       	st	Z, r24
	assert_soft((PLLCSR & 0x07) == 0x07); /* locked, started and 64Mhz */
     c36:	80 81       	ld	r24, Z
     c38:	87 70       	andi	r24, 0x07	; 7
     c3a:	87 30       	cpi	r24, 0x07	; 7
     c3c:	19 f0       	breq	.+6      	; 0xc44 <psc_init+0x1e>
     c3e:	84 e1       	ldi	r24, 0x14	; 20
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	4c db       	rcall	.-2408   	; 0x2dc <assert_handle>

	assert_soft((1 << 12) > pwm_max_value + deadtime);
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	9b 01       	movw	r18, r22
     c48:	24 0f       	add	r18, r20
     c4a:	35 1f       	adc	r19, r21
     c4c:	80 e1       	ldi	r24, 0x10	; 16
     c4e:	20 30       	cpi	r18, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	18 f0       	brcs	.+6      	; 0xc5a <psc_init+0x34>
     c54:	86 e1       	ldi	r24, 0x16	; 22
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	41 db       	rcall	.-2430   	; 0x2dc <assert_handle>
	OCR0RB = pwm_max_value + deadtime;
     c5a:	30 93 d9 00 	sts	0x00D9, r19
     c5e:	20 93 d8 00 	sts	0x00D8, r18
	OCR1RB = pwm_max_value + deadtime;
     c62:	30 93 e9 00 	sts	0x00E9, r19
     c66:	20 93 e8 00 	sts	0x00E8, r18
	OCR2RB = pwm_max_value + deadtime;
     c6a:	30 93 f9 00 	sts	0x00F9, r19
     c6e:	20 93 f8 00 	sts	0x00F8, r18

	OCR0SA = pwm_max_value;
     c72:	50 93 d3 00 	sts	0x00D3, r21
     c76:	40 93 d2 00 	sts	0x00D2, r20
	OCR1SA = pwm_max_value;
     c7a:	50 93 e3 00 	sts	0x00E3, r21
     c7e:	40 93 e2 00 	sts	0x00E2, r20
	OCR2SA = pwm_max_value;
     c82:	50 93 f3 00 	sts	0x00F3, r21
     c86:	40 93 f2 00 	sts	0x00F2, r20
	OCR0SB = pwm_max_value / 2 + deadtime;
     c8a:	ca 01       	movw	r24, r20
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	86 0f       	add	r24, r22
     c92:	97 1f       	adc	r25, r23
     c94:	90 93 d7 00 	sts	0x00D7, r25
     c98:	80 93 d6 00 	sts	0x00D6, r24
	OCR1SB = pwm_max_value / 2 + deadtime;
     c9c:	90 93 e7 00 	sts	0x00E7, r25
     ca0:	80 93 e6 00 	sts	0x00E6, r24
	OCR2SB = pwm_max_value / 2 + deadtime;
     ca4:	90 93 f7 00 	sts	0x00F7, r25
     ca8:	80 93 f6 00 	sts	0x00F6, r24

	/* Center Aligned Mode, fast clock input, Output Polarity: active LOW. */
	PCNF0 = (1 << PMODE01) | (1 << PMODE00) | (1 << PCLKSEL0);
     cac:	8a e1       	ldi	r24, 0x1A	; 26
     cae:	80 93 da 00 	sts	0x00DA, r24
	PCNF1 = (1 << PMODE11) | (1 << PMODE10) | (1 << PCLKSEL1);
     cb2:	80 93 ea 00 	sts	0x00EA, r24
	PCNF2 = (1 << PMODE21) | (1 << PMODE20) | (1 << PCLKSEL2);
     cb6:	80 93 fa 00 	sts	0x00FA, r24

	/* PSC0 and PSC1 as slave, PSC2 as master */
	PCTL0 = 1 << PARUN0;
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	80 93 db 00 	sts	0x00DB, r24
	PCTL1 = 1 << PARUN1;
     cc0:	80 93 eb 00 	sts	0x00EB, r24
	PCTL2 = 1 << PRUN2;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 fb 00 	sts	0x00FB, r24
//	PCTL0 = (1 << PARUN0) | (1 << PPRE00);
//	PCTL1 = (1 << PARUN1) | (1 << PPRE10);
//	PCTL2 = (1 << PRUN2) | (1 << PPRE20);

	/* PSC2 interrupt at the end of cycle enable */
	PIM2 = 1 << PEOPE2;
     cca:	80 93 a5 00 	sts	0x00A5, r24

	// connect the PSC waveform generator outputs to the port outputs
	PSOC0 = (1 << POEN0B) | (1 << POEN0A);
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	80 93 d0 00 	sts	0x00D0, r24
	PSOC1 = (1 << POEN1B) | (1 << POEN1A);
     cd4:	80 93 e0 00 	sts	0x00E0, r24
	PSOC2 = (1 << POEN2B) | (1 << POEN2A);
     cd8:	80 93 f0 00 	sts	0x00F0, r24
}
     cdc:	08 95       	ret

00000cde <vector_set_new_speed>:
void vector_set_new_speed(
		uint16_t    new_amplitude,
		uint16_t    new_angle_increment_scaled,
		direction_t new_direction)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     cde:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ce0:	f8 94       	cli
		amplitude              = new_amplitude;
     ce2:	90 93 af 01 	sts	0x01AF, r25
     ce6:	80 93 ae 01 	sts	0x01AE, r24
		angle_increment_scaled = new_angle_increment_scaled;
     cea:	70 93 ad 01 	sts	0x01AD, r23
     cee:	60 93 ac 01 	sts	0x01AC, r22
		direction              = new_direction;
     cf2:	40 93 b0 01 	sts	0x01B0, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cf6:	2f bf       	out	0x3f, r18	; 63
	}
}
     cf8:	08 95       	ret

00000cfa <__vector_2>:

/* PSC2 end cycle interrupt handle
 * New vector of magnetization will be calculated and set to PSC in this routine. */
ISR(PSC2_EC_vect) {
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	1f 93       	push	r17
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <__vector_2+0x2a>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <__vector_2+0x2c>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <__vector_2+0x2e>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	uint8_t  angle_units; /* in sin's table "degrees" (units)*/
	pwm_t    pwm;

	/* Prevent overflow */
	cassert(MAX_VALUE(angle_integrator_scaled) >= (ANGLE_INCREMENT_MAX + 1) * ANGLE_SCALE);
	angle_integrator_scaled += angle_increment_scaled;
     d2c:	80 91 ac 01 	lds	r24, 0x01AC
     d30:	90 91 ad 01 	lds	r25, 0x01AD
     d34:	20 91 aa 01 	lds	r18, 0x01AA
     d38:	30 91 ab 01 	lds	r19, 0x01AB
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	90 93 ab 01 	sts	0x01AB, r25
     d44:	80 93 aa 01 	sts	0x01AA, r24

	/* angle_units type is big enough to contain the result
	 * MAX_VALUE(angle_units) >= ((ANGLE_INCREMENT_MAX + 1) * ANGLE_SCALE / ANGLE_SCALE) */
	cassert(MAX_VALUE(angle_units) >= ANGLE_INCREMENT_MAX + 1);
	angle_units = angle_integrator_scaled / ANGLE_SCALE;
     d48:	19 2f       	mov	r17, r25

	if (angle_units) {
     d4a:	99 23       	and	r25, r25
     d4c:	69 f1       	breq	.+90     	; 0xda8 <__vector_2+0xae>
		// ------------- space vector PWN algorithm -----------------
		SVPWM(amplitude, angle_units, &pwm);
     d4e:	80 91 ae 01 	lds	r24, 0x01AE
     d52:	90 91 af 01 	lds	r25, 0x01AF
     d56:	61 2f       	mov	r22, r17
     d58:	ae 01       	movw	r20, r28
     d5a:	4f 5f       	subi	r20, 0xFF	; 255
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	35 de       	rcall	.-918    	; 0x9ca <SVPWM>

#		include "../dac.h" /* TODO */
		dac_set_value_scaled(pwm.pwm1, MAX_PWM); /* TODO */
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	78 e0       	ldi	r23, 0x08	; 8
     d68:	fd da       	rcall	.-2566   	; 0x364 <dac_set_value_scaled>

		// -------- load the PSCs with the new duty cycles -----------
		if (direction == FORWARD) {
     d6a:	80 91 b0 01 	lds	r24, 0x01B0
     d6e:	88 23       	and	r24, r24
     d70:	41 f4       	brne	.+16     	; 0xd82 <__vector_2+0x88>
			psc_load(pwm.pwm0, pwm.pwm1, pwm.pwm2);
     d72:	6b 81       	ldd	r22, Y+3	; 0x03
     d74:	7c 81       	ldd	r23, Y+4	; 0x04
     d76:	4d 81       	ldd	r20, Y+5	; 0x05
     d78:	5e 81       	ldd	r21, Y+6	; 0x06
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	ec de       	rcall	.-552    	; 0xb58 <psc_load>
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <__vector_2+0x96>
		} else {
			psc_load(pwm.pwm0, pwm.pwm2, pwm.pwm1);
     d82:	6d 81       	ldd	r22, Y+5	; 0x05
     d84:	7e 81       	ldd	r23, Y+6	; 0x06
     d86:	4b 81       	ldd	r20, Y+3	; 0x03
     d88:	5c 81       	ldd	r21, Y+4	; 0x04
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	e4 de       	rcall	.-568    	; 0xb58 <psc_load>
		}

		angle_integrator_scaled -= (uint16_t)angle_units * ANGLE_SCALE;
     d90:	31 2f       	mov	r19, r17
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	80 91 aa 01 	lds	r24, 0x01AA
     d98:	90 91 ab 01 	lds	r25, 0x01AB
     d9c:	82 1b       	sub	r24, r18
     d9e:	93 0b       	sbc	r25, r19
     da0:	90 93 ab 01 	sts	0x01AB, r25
     da4:	80 93 aa 01 	sts	0x01AA, r24
	}

	/* test that we are fast enough */
	assert((PIFR2 & (1 << PEOP2)) == 0);
     da8:	80 91 a4 00 	lds	r24, 0x00A4
     dac:	80 ff       	sbrs	r24, 0
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <__vector_2+0xbc>
     db0:	8e e3       	ldi	r24, 0x3E	; 62
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	93 da       	rcall	.-2778   	; 0x2dc <assert_handle>
}
     db6:	26 96       	adiw	r28, 0x06	; 6
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	1f 91       	pop	r17
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <controlVF>:
 * RETURN: PWM max value (will be used in PSC and waveform generation)
 *
 * The return value never exceeds VOLTAGE_MAX, if "angle_increment_scaled"
 * doesn't exceed ANGLE_INCREMENT_MAX.
 */
uint16_t controlVF(uint16_t angle_increment_scaled) {
     de4:	9c 01       	movw	r18, r24
	cassert((uint32_t)ANGLE_INCREMENT_50hz_SCALED * Vf_SLOPE
			<= (uint32_t)MAX_VALUE(angle_increment_scaled));
	/* we will cast it to 8bit */
	cassert(Vf_SLOPE <= UINT8_MAX);

	if (angle_increment_scaled <= ANGLE_INCREMENT_MIN_SCALED) {
     de6:	82 30       	cpi	r24, 0x02	; 2
     de8:	91 05       	cpc	r25, r1
     dea:	18 f4       	brcc	.+6      	; 0xdf2 <controlVF+0xe>
     dec:	23 e0       	ldi	r18, 0x03	; 3
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	16 c0       	rjmp	.+44     	; 0xe1e <controlVF+0x3a>
		/* boost frequency */
		amplitude = AMPLITUDE_MIN; /* boost voltage */
	} else if (angle_increment_scaled >= ANGLE_INCREMENT_50hz_SCALED) {
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	26 36       	cpi	r18, 0x66	; 102
     df6:	38 07       	cpc	r19, r24
     df8:	18 f0       	brcs	.+6      	; 0xe00 <controlVF+0x1c>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	38 e0       	ldi	r19, 0x08	; 8
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <controlVF+0x3a>
		amplitude = AMPLITUDE_MAX; /* rated value */
	} else { /* V/f law */
		/* slow */
		/* amplitude = (angle_increment_scaled * (uint8_t)Vf_SLOPE) / CONTROL_VF_SLOPE_SCALE; */
		/* faster */
		MultiUU16XConst8toL16(amplitude, angle_increment_scaled, Vf_SLOPE);
     e00:	6a e6       	ldi	r22, 0x6A	; 106
     e02:	26 9f       	mul	r18, r22
     e04:	c0 01       	movw	r24, r0
     e06:	36 9f       	mul	r19, r22
     e08:	90 0d       	add	r25, r0
     e0a:	11 24       	eor	r1, r1
		amplitude /= CONTROL_VF_SLOPE_SCALE;
     e0c:	9c 01       	movw	r18, r24
     e0e:	36 95       	lsr	r19
     e10:	27 95       	ror	r18
     e12:	32 95       	swap	r19
     e14:	22 95       	swap	r18
     e16:	2f 70       	andi	r18, 0x0F	; 15
     e18:	23 27       	eor	r18, r19
     e1a:	3f 70       	andi	r19, 0x0F	; 15
     e1c:	23 27       	eor	r18, r19
	}

	return amplitude;
}
     e1e:	82 2f       	mov	r24, r18
     e20:	93 2f       	mov	r25, r19
     e22:	08 95       	ret

00000e24 <current_limitation>:
#include "current_limitation.h"
#include "../adc.h"
#include "../config.h"

int16_t current_limitation(int16_t real_speed, int16_t command) {
     e24:	86 2f       	mov	r24, r22
     e26:	97 2f       	mov	r25, r23
//		return command - ((command - real_speed) / (CURRENT_MAX - CURRENT_TRESHOLD));
//	} else {
//		return real_speed;
//	}
	return command;
}
     e28:	08 95       	ret

00000e2a <dummy_get_real_speed>:
#include "../adc.h"
#include <stdint.h>

int16_t dummy_get_real_speed(void) {
	return 0;
}
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	08 95       	ret

00000e30 <dummy_get_requested_speed>:
 *   -1 = backward F_MAX/COMMAND_MAX hz
 *  511 = forward  F_MAX hz
 * -512 = backward F_MAX + F_MAX/COMMAND_MAX hz
 * */
int16_t dummy_get_requested_speed(void) {
	return adc_get_speed_pot_value();
     e30:	ab d9       	rcall	.-3242   	; 0x188 <adc_get_speed_pot_value>
}
     e32:	08 95       	ret

00000e34 <command_reset>:
#define COMMAND_FILTER_LEN 8

static int32_t command;

void command_reset (void) {
	command = 0;
     e34:	10 92 b1 01 	sts	0x01B1, r1
     e38:	10 92 b2 01 	sts	0x01B2, r1
     e3c:	10 92 b3 01 	sts	0x01B3, r1
     e40:	10 92 b4 01 	sts	0x01B4, r1
}
     e44:	08 95       	ret

00000e46 <command_get_old_value>:


int16_t command_get_old_value (void) {
     e46:	20 91 b1 01 	lds	r18, 0x01B1
     e4a:	30 91 b2 01 	lds	r19, 0x01B2
     e4e:	40 91 b3 01 	lds	r20, 0x01B3
     e52:	50 91 b4 01 	lds	r21, 0x01B4
     e56:	23 2f       	mov	r18, r19
     e58:	34 2f       	mov	r19, r20
     e5a:	45 2f       	mov	r20, r21
     e5c:	55 27       	eor	r21, r21
     e5e:	47 fd       	sbrc	r20, 7
     e60:	5a 95       	dec	r21
	return command >> COMMAND_FILTER_LEN;
}
     e62:	82 2f       	mov	r24, r18
     e64:	93 2f       	mov	r25, r19
     e66:	08 95       	ret

00000e68 <command_get>:

int16_t command_get(int16_t real_speed, int16_t requested_speed) {
	//command = mc_control_speed_16b(Omega_ref,Omega_meas); // for use in closed loop
	//return requested_speed;

	int16_t tmp = command >> COMMAND_FILTER_LEN;
     e68:	20 91 b1 01 	lds	r18, 0x01B1
     e6c:	30 91 b2 01 	lds	r19, 0x01B2
     e70:	40 91 b3 01 	lds	r20, 0x01B3
     e74:	50 91 b4 01 	lds	r21, 0x01B4
     e78:	bb 27       	eor	r27, r27
     e7a:	57 fd       	sbrc	r21, 7
     e7c:	ba 95       	dec	r27
     e7e:	a5 2f       	mov	r26, r21
     e80:	94 2f       	mov	r25, r20
     e82:	83 2f       	mov	r24, r19

	if (tmp < requested_speed) {
     e84:	86 17       	cp	r24, r22
     e86:	97 07       	cpc	r25, r23
     e88:	74 f4       	brge	.+28     	; 0xea6 <command_get+0x3e>
		command++;
     e8a:	da 01       	movw	r26, r20
     e8c:	c9 01       	movw	r24, r18
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	a1 1d       	adc	r26, r1
     e92:	b1 1d       	adc	r27, r1
     e94:	80 93 b1 01 	sts	0x01B1, r24
     e98:	90 93 b2 01 	sts	0x01B2, r25
     e9c:	a0 93 b3 01 	sts	0x01B3, r26
     ea0:	b0 93 b4 01 	sts	0x01B4, r27
     ea4:	10 c0       	rjmp	.+32     	; 0xec6 <command_get+0x5e>
	} else if (tmp > requested_speed) {
     ea6:	68 17       	cp	r22, r24
     ea8:	79 07       	cpc	r23, r25
     eaa:	6c f4       	brge	.+26     	; 0xec6 <command_get+0x5e>
		command--;
     eac:	da 01       	movw	r26, r20
     eae:	c9 01       	movw	r24, r18
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	a1 09       	sbc	r26, r1
     eb4:	b1 09       	sbc	r27, r1
     eb6:	80 93 b1 01 	sts	0x01B1, r24
     eba:	90 93 b2 01 	sts	0x01B2, r25
     ebe:	a0 93 b3 01 	sts	0x01B3, r26
     ec2:	b0 93 b4 01 	sts	0x01B4, r27
     ec6:	20 91 b1 01 	lds	r18, 0x01B1
     eca:	30 91 b2 01 	lds	r19, 0x01B2
     ece:	40 91 b3 01 	lds	r20, 0x01B3
     ed2:	50 91 b4 01 	lds	r21, 0x01B4
     ed6:	23 2f       	mov	r18, r19
     ed8:	34 2f       	mov	r19, r20
     eda:	45 2f       	mov	r20, r21
     edc:	55 27       	eor	r21, r21
     ede:	47 fd       	sbrc	r20, 7
     ee0:	5a 95       	dec	r21
	}

	//return tmp; /* it doesn't matter whether we return old or new value */
	return command >> COMMAND_FILTER_LEN;
}
     ee2:	82 2f       	mov	r24, r18
     ee4:	93 2f       	mov	r25, r19
     ee6:	08 95       	ret

00000ee8 <timer0_init>:
#endif

/* Timer 0 Configuration */
void timer0_init (void) {
	cassert(TIMER0_DIVIDER == 64);
	TCCR0B = (1 << CS01) | (1 << CS00);  // f_quartz = 16 MHz / 64 = 250 kHz
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	85 bd       	out	0x25, r24	; 37
	TCCR0A = (1 << WGM01); // mode CTC : Clear Timer on Compare
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	94 bd       	out	0x24, r25	; 36
	OCR0A  = OCR0A_VAL;
     ef0:	8f e3       	ldi	r24, 0x3F	; 63
     ef2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A); // allow interruption when timer=compare
     ef4:	90 93 6e 00 	sts	0x006E, r25
}
     ef8:	08 95       	ret

00000efa <__vector_16>:
 *
 * Space vector is recalculated every: 2 * (MAX_PWM + DEADTIME) / 64Mhz =>
 *  2 * MAX_PWM / 64Mhz +  2 * DEADTIME / 64Mhz => 66us (15.15kHz)
 *
 */
ISR(TIMER0_COMPA_vect) {
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
	static volatile bool timer0_int_inprocess;
	int16_t     command, real_speed, requested_speed;
	uint16_t    angle_increment_scaled, amplitude;
	direction_t direction;

	assert(false == timer0_int_inprocess);
     f2c:	80 91 b5 01 	lds	r24, 0x01B5
     f30:	88 23       	and	r24, r24
     f32:	19 f0       	breq	.+6      	; 0xf3a <__vector_16+0x40>
     f34:	86 e6       	ldi	r24, 0x66	; 102
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	d1 d9       	rcall	.-3166   	; 0x2dc <assert_handle>
	timer0_int_inprocess = true;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 b5 01 	sts	0x01B5, r24
	sei(); /* enable interrupts! */
     f40:	78 94       	sei

	if (adc_get_voltage_value() > VOLTAGE_MAX) {
     f42:	3a d9       	rcall	.-3468   	; 0x1b8 <adc_get_voltage_value>
     f44:	8d 5b       	subi	r24, 0xBD	; 189
     f46:	92 40       	sbci	r25, 0x02	; 2
     f48:	18 f0       	brcs	.+6      	; 0xf50 <__vector_16+0x56>
		assert(0);
     f4a:	8b e6       	ldi	r24, 0x6B	; 107
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	c6 d9       	rcall	.-3188   	; 0x2dc <assert_handle>
	} else if (adc_get_voltage_value() < VOLTAGE_TRESHOLD_LO) {
     f50:	33 d9       	rcall	.-3482   	; 0x1b8 <adc_get_voltage_value>
     f52:	88 55       	subi	r24, 0x58	; 88
     f54:	92 40       	sbci	r25, 0x02	; 2
     f56:	10 f4       	brcc	.+4      	; 0xf5c <__vector_16+0x62>
		break_off();
     f58:	ef d9       	rcall	.-3106   	; 0x338 <break_off>
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <__vector_16+0x6c>
	} else if (adc_get_voltage_value() > VOLTAGE_TRESHOLD_HI) {
     f5c:	2d d9       	rcall	.-3494   	; 0x1b8 <adc_get_voltage_value>
     f5e:	8b 58       	subi	r24, 0x8B	; 139
     f60:	92 40       	sbci	r25, 0x02	; 2
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__vector_16+0x6c>
		break_on();
     f64:	e3 d9       	rcall	.-3130   	; 0x32c <break_on>
	}

	/* get real speed of rotor */
	real_speed = dummy_get_real_speed();
     f66:	61 df       	rcall	.-318    	; 0xe2a <dummy_get_real_speed>
     f68:	8c 01       	movw	r16, r24
	assert_soft((real_speed >= -SPEED_MAX) && (real_speed <= SPEED_MAX));
     f6a:	80 50       	subi	r24, 0x00	; 0
     f6c:	9e 4f       	sbci	r25, 0xFE	; 254
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	94 40       	sbci	r25, 0x04	; 4
     f72:	18 f0       	brcs	.+6      	; 0xf7a <__vector_16+0x80>
     f74:	84 e7       	ldi	r24, 0x74	; 116
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b1 d9       	rcall	.-3230   	; 0x2dc <assert_handle>

	/* get requested speed from potentiometer  */
	requested_speed = dummy_get_requested_speed();
     f7a:	5a df       	rcall	.-332    	; 0xe30 <dummy_get_requested_speed>
     f7c:	ec 01       	movw	r28, r24
	assert_soft((requested_speed >= -SPEED_MAX) && (requested_speed <= SPEED_MAX));
     f7e:	80 50       	subi	r24, 0x00	; 0
     f80:	9e 4f       	sbci	r25, 0xFE	; 254
     f82:	81 50       	subi	r24, 0x01	; 1
     f84:	94 40       	sbci	r25, 0x04	; 4
     f86:	18 f0       	brcs	.+6      	; 0xf8e <__vector_16+0x94>
     f88:	88 e7       	ldi	r24, 0x78	; 120
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a7 d9       	rcall	.-3250   	; 0x2dc <assert_handle>
	OCR0A  = OCR0A_VAL;
	TIMSK0 = (1 << OCIE0A); // allow interruption when timer=compare
}

static int16_t regulate(int16_t real_speed, int16_t requested_speed) {
	uint8_t current = adc_get_current_value();
     f8e:	22 d9       	rcall	.-3516   	; 0x1d4 <adc_get_current_value>
	int16_t command;

	/* ------------------- regulate speed  --------------------------------- */
	if (current > CURRENT_MAX) {
     f90:	85 3b       	cpi	r24, 0xB5	; 181
     f92:	20 f0       	brcs	.+8      	; 0xf9c <__vector_16+0xa2>
		command_reset();
     f94:	4f df       	rcall	.-354    	; 0xe34 <command_reset>
		command = 0;
		assert(0); /* TODO FIXME  - break needs to be implemented, than remove this line */
     f96:	89 e2       	ldi	r24, 0x29	; 41
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 d9       	rcall	.-3264   	; 0x2dc <assert_handle>
	} else if ((current > CURRENT_TRESHOLD)
     f9c:	89 37       	cpi	r24, 0x79	; 121
     f9e:	00 f1       	brcs	.+64     	; 0xfe0 <__vector_16+0xe6>
     fa0:	52 df       	rcall	.-348    	; 0xe46 <command_get_old_value>
     fa2:	99 23       	and	r25, r25
     fa4:	1c f4       	brge	.+6      	; 0xfac <__vector_16+0xb2>
     fa6:	90 95       	com	r25
     fa8:	81 95       	neg	r24
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	9e 01       	movw	r18, r28
     fae:	dd 23       	and	r29, r29
     fb0:	1c f4       	brge	.+6      	; 0xfb8 <__vector_16+0xbe>
     fb2:	30 95       	com	r19
     fb4:	21 95       	neg	r18
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	28 17       	cp	r18, r24
     fba:	39 07       	cpc	r19, r25
     fbc:	8c f0       	brlt	.+34     	; 0xfe0 <__vector_16+0xe6>
			&& (abs(command_get_old_value()) <= abs(requested_speed)))
	{
#	ifdef DEBUG
		test_overcurrent++;
     fbe:	80 91 b6 01 	lds	r24, 0x01B6
     fc2:	90 91 b7 01 	lds	r25, 0x01B7
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 b7 01 	sts	0x01B7, r25
     fcc:	80 93 b6 01 	sts	0x01B6, r24
#	endif
		command = command_get_old_value();
     fd0:	3a df       	rcall	.-396    	; 0xe46 <command_get_old_value>
     fd2:	ec 01       	movw	r28, r24
	requested_speed = dummy_get_requested_speed();
	assert_soft((requested_speed >= -SPEED_MAX) && (requested_speed <= SPEED_MAX));

	/* regulate the speed and current */
	command = regulate(real_speed, requested_speed);
	assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));
     fd4:	80 50       	subi	r24, 0x00	; 0
     fd6:	9e 4f       	sbci	r25, 0xFE	; 254
     fd8:	81 50       	subi	r24, 0x01	; 1
     fda:	94 40       	sbci	r25, 0x04	; 4
     fdc:	80 f0       	brcs	.+32     	; 0xffe <__vector_16+0x104>
     fde:	0c c0       	rjmp	.+24     	; 0xff8 <__vector_16+0xfe>
#	ifdef DEBUG
		test_overcurrent++;
#	endif
		command = command_get_old_value();
	} else {
		command = command_get(real_speed, requested_speed);
     fe0:	c8 01       	movw	r24, r16
     fe2:	be 01       	movw	r22, r28
     fe4:	41 df       	rcall	.-382    	; 0xe68 <command_get>
     fe6:	ec 01       	movw	r28, r24
		assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));
     fe8:	80 50       	subi	r24, 0x00	; 0
     fea:	9e 4f       	sbci	r25, 0xFE	; 254
     fec:	81 50       	subi	r24, 0x01	; 1
     fee:	94 40       	sbci	r25, 0x04	; 4
     ff0:	30 f0       	brcs	.+12     	; 0xffe <__vector_16+0x104>
     ff2:	83 e3       	ldi	r24, 0x33	; 51
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	72 d9       	rcall	.-3356   	; 0x2dc <assert_handle>
	requested_speed = dummy_get_requested_speed();
	assert_soft((requested_speed >= -SPEED_MAX) && (requested_speed <= SPEED_MAX));

	/* regulate the speed and current */
	command = regulate(real_speed, requested_speed);
	assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));
     ff8:	8c e7       	ldi	r24, 0x7C	; 124
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	6f d9       	rcall	.-3362   	; 0x2dc <assert_handle>
	/* FIXME */
	//cassert(ANGLE_INCREMENT_MAX_NUMERATOR % ANGLE_INCREMENT_MAX_DENOMINATOR == 0); /* prevent rounding errors */
	/* angle_increment = command_abs * (ANGLE_INTEGRATOR_SCALE * ANGLE_INCREMENT_MAX / COMMAND_MAX); */
	cassert((ANGLE_SCALE * ANGLE_INCREMENT_MAX / COMMAND_MAX) <= UINT8_MAX);

	MultiSU16XConst8toL16(angle_increment_scaled, command_abs,
     ffe:	9e 01       	movw	r18, r28
    1000:	dd 23       	and	r29, r29
    1002:	1c f4       	brge	.+6      	; 0x100a <__vector_16+0x110>
    1004:	30 95       	com	r19
    1006:	21 95       	neg	r18
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	63 e0       	ldi	r22, 0x03	; 3
    100c:	26 9f       	mul	r18, r22
    100e:	70 01       	movw	r14, r0
    1010:	36 03       	mulsu	r19, r22
    1012:	f0 0c       	add	r15, r0
    1014:	11 24       	eor	r1, r1
	command = regulate(real_speed, requested_speed);
	assert_soft((command >= -COMMAND_MAX) && (command <= COMMAND_MAX));

	/* convert command to angle speed */
	angle_increment_scaled = command_to_angle_increment_scaled(command);
	assert_soft(angle_increment_scaled <= ANGLE_INCREMENT_SCALED_MAX);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	e8 16       	cp	r14, r24
    101a:	86 e0       	ldi	r24, 0x06	; 6
    101c:	f8 06       	cpc	r15, r24
    101e:	18 f0       	brcs	.+6      	; 0x1026 <__vector_16+0x12c>
    1020:	80 e8       	ldi	r24, 0x80	; 128
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	5b d9       	rcall	.-3402   	; 0x2dc <assert_handle>

	/* V/f law */
	amplitude = controlVF(angle_increment_scaled);
    1026:	c7 01       	movw	r24, r14
    1028:	dd de       	rcall	.-582    	; 0xde4 <controlVF>
    102a:	8c 01       	movw	r16, r24
	assert_soft(amplitude <= AMPLITUDE_MAX);
    102c:	28 e0       	ldi	r18, 0x08	; 8
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	92 07       	cpc	r25, r18
    1032:	18 f0       	brcs	.+6      	; 0x103a <__vector_16+0x140>
    1034:	84 e8       	ldi	r24, 0x84	; 132
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	51 d9       	rcall	.-3422   	; 0x2dc <assert_handle>

	/* set new amplitude and angle speed to SVPWM */
	direction = (command >= 0) ? FORWARD : BACKWARD;
	vector_set_new_speed(amplitude, angle_increment_scaled, direction);
    103a:	20 97       	sbiw	r28, 0x00	; 0
    103c:	6e 01       	movw	r12, r28
    103e:	4d 2d       	mov	r20, r13
    1040:	44 1f       	adc	r20, r20
    1042:	44 27       	eor	r20, r20
    1044:	44 1f       	adc	r20, r20
    1046:	b7 01       	movw	r22, r14
    1048:	4a de       	rcall	.-876    	; 0xcde <vector_set_new_speed>

#	ifdef DEBUG
	test_command = command;
    104a:	d0 93 bb 01 	sts	0x01BB, r29
    104e:	c0 93 ba 01 	sts	0x01BA, r28
	test_amplitude = amplitude;
    1052:	10 93 b9 01 	sts	0x01B9, r17
    1056:	00 93 b8 01 	sts	0x01B8, r16
#	endif

	cli();
    105a:	f8 94       	cli
	timer0_int_inprocess = false;
    105c:	10 92 b5 01 	sts	0x01B5, r1

	/* Match Flag must be still cleared otherwise we are too slow */
	//assert((TIFR0 & (1 << OCF0A)) == 0);
}
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <vfprintf>:
    1092:	ab e0       	ldi	r26, 0x0B	; 11
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ee e4       	ldi	r30, 0x4E	; 78
    1098:	f8 e0       	ldi	r31, 0x08	; 8
    109a:	5f c1       	rjmp	.+702    	; 0x135a <__prologue_saves__+0x8>
    109c:	5c 01       	movw	r10, r24
    109e:	4b 01       	movw	r8, r22
    10a0:	7a 01       	movw	r14, r20
    10a2:	fc 01       	movw	r30, r24
    10a4:	17 82       	std	Z+7, r1	; 0x07
    10a6:	16 82       	std	Z+6, r1	; 0x06
    10a8:	83 81       	ldd	r24, Z+3	; 0x03
    10aa:	81 fd       	sbrc	r24, 1
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <vfprintf+0x2c>
    10ae:	6f ef       	ldi	r22, 0xFF	; 255
    10b0:	7f ef       	ldi	r23, 0xFF	; 255
    10b2:	fe c0       	rjmp	.+508    	; 0x12b0 <vfprintf+0x21e>
    10b4:	42 e0       	ldi	r20, 0x02	; 2
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	e4 0e       	add	r14, r20
    10ba:	f5 1e       	adc	r15, r21
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <vfprintf+0x34>
    10be:	3e 01       	movw	r6, r28
    10c0:	08 94       	sec
    10c2:	61 1c       	adc	r6, r1
    10c4:	71 1c       	adc	r7, r1
    10c6:	f5 01       	movw	r30, r10
    10c8:	d3 80       	ldd	r13, Z+3	; 0x03
    10ca:	f4 01       	movw	r30, r8
    10cc:	d3 fc       	sbrc	r13, 3
    10ce:	85 91       	lpm	r24, Z+
    10d0:	d3 fe       	sbrs	r13, 3
    10d2:	81 91       	ld	r24, Z+
    10d4:	4f 01       	movw	r8, r30
    10d6:	88 23       	and	r24, r24
    10d8:	09 f4       	brne	.+2      	; 0x10dc <vfprintf+0x4a>
    10da:	e7 c0       	rjmp	.+462    	; 0x12aa <vfprintf+0x218>
    10dc:	85 32       	cpi	r24, 0x25	; 37
    10de:	59 f4       	brne	.+22     	; 0x10f6 <vfprintf+0x64>
    10e0:	d3 fc       	sbrc	r13, 3
    10e2:	65 91       	lpm	r22, Z+
    10e4:	d3 fe       	sbrs	r13, 3
    10e6:	61 91       	ld	r22, Z+
    10e8:	4f 01       	movw	r8, r30
    10ea:	65 32       	cpi	r22, 0x25	; 37
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <vfprintf+0x62>
    10ee:	06 2f       	mov	r16, r22
    10f0:	10 e0       	ldi	r17, 0x00	; 0
    10f2:	1a c0       	rjmp	.+52     	; 0x1128 <vfprintf+0x96>
    10f4:	85 e2       	ldi	r24, 0x25	; 37
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	29 c0       	rjmp	.+82     	; 0x114c <vfprintf+0xba>
    10fa:	00 23       	and	r16, r16
    10fc:	09 f4       	brne	.+2      	; 0x1100 <vfprintf+0x6e>
    10fe:	d5 c0       	rjmp	.+426    	; 0x12aa <vfprintf+0x218>
    1100:	87 e4       	ldi	r24, 0x47	; 71
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	60 2f       	mov	r22, r16
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	91 d1       	rcall	.+802    	; 0x142c <strchr_P>
    110a:	89 2b       	or	r24, r25
    110c:	39 f4       	brne	.+14     	; 0x111c <vfprintf+0x8a>
    110e:	03 32       	cpi	r16, 0x23	; 35
    1110:	11 f4       	brne	.+4      	; 0x1116 <vfprintf+0x84>
    1112:	10 61       	ori	r17, 0x10	; 16
    1114:	03 c0       	rjmp	.+6      	; 0x111c <vfprintf+0x8a>
    1116:	0c 36       	cpi	r16, 0x6C	; 108
    1118:	61 f4       	brne	.+24     	; 0x1132 <vfprintf+0xa0>
    111a:	10 68       	ori	r17, 0x80	; 128
    111c:	f4 01       	movw	r30, r8
    111e:	d3 fc       	sbrc	r13, 3
    1120:	05 91       	lpm	r16, Z+
    1122:	d3 fe       	sbrs	r13, 3
    1124:	01 91       	ld	r16, Z+
    1126:	4f 01       	movw	r8, r30
    1128:	17 ff       	sbrs	r17, 7
    112a:	e7 cf       	rjmp	.-50     	; 0x10fa <vfprintf+0x68>
    112c:	00 23       	and	r16, r16
    112e:	09 f4       	brne	.+2      	; 0x1132 <vfprintf+0xa0>
    1130:	bc c0       	rjmp	.+376    	; 0x12aa <vfprintf+0x218>
    1132:	80 e4       	ldi	r24, 0x40	; 64
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	60 2f       	mov	r22, r16
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	78 d1       	rcall	.+752    	; 0x142c <strchr_P>
    113c:	89 2b       	or	r24, r25
    113e:	49 f0       	breq	.+18     	; 0x1152 <vfprintf+0xc0>
    1140:	44 e0       	ldi	r20, 0x04	; 4
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	e4 0e       	add	r14, r20
    1146:	f5 1e       	adc	r15, r21
    1148:	8f e3       	ldi	r24, 0x3F	; 63
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	b5 01       	movw	r22, r10
    114e:	79 d1       	rcall	.+754    	; 0x1442 <fputc>
    1150:	ba cf       	rjmp	.-140    	; 0x10c6 <vfprintf+0x34>
    1152:	03 36       	cpi	r16, 0x63	; 99
    1154:	29 f0       	breq	.+10     	; 0x1160 <vfprintf+0xce>
    1156:	03 37       	cpi	r16, 0x73	; 115
    1158:	71 f0       	breq	.+28     	; 0x1176 <vfprintf+0xe4>
    115a:	03 35       	cpi	r16, 0x53	; 83
    115c:	e1 f4       	brne	.+56     	; 0x1196 <vfprintf+0x104>
    115e:	0a c0       	rjmp	.+20     	; 0x1174 <vfprintf+0xe2>
    1160:	87 01       	movw	r16, r14
    1162:	0e 5f       	subi	r16, 0xFE	; 254
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	f7 01       	movw	r30, r14
    1168:	80 81       	ld	r24, Z
    116a:	91 81       	ldd	r25, Z+1	; 0x01
    116c:	b5 01       	movw	r22, r10
    116e:	69 d1       	rcall	.+722    	; 0x1442 <fputc>
    1170:	78 01       	movw	r14, r16
    1172:	a9 cf       	rjmp	.-174    	; 0x10c6 <vfprintf+0x34>
    1174:	11 60       	ori	r17, 0x01	; 1
    1176:	f7 01       	movw	r30, r14
    1178:	c0 80       	ld	r12, Z
    117a:	d1 80       	ldd	r13, Z+1	; 0x01
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <vfprintf+0xf2>
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	b5 01       	movw	r22, r10
    1182:	5f d1       	rcall	.+702    	; 0x1442 <fputc>
    1184:	f6 01       	movw	r30, r12
    1186:	10 fd       	sbrc	r17, 0
    1188:	85 91       	lpm	r24, Z+
    118a:	10 ff       	sbrs	r17, 0
    118c:	81 91       	ld	r24, Z+
    118e:	6f 01       	movw	r12, r30
    1190:	88 23       	and	r24, r24
    1192:	a9 f7       	brne	.-22     	; 0x117e <vfprintf+0xec>
    1194:	8f cf       	rjmp	.-226    	; 0x10b4 <vfprintf+0x22>
    1196:	04 36       	cpi	r16, 0x64	; 100
    1198:	11 f0       	breq	.+4      	; 0x119e <vfprintf+0x10c>
    119a:	09 36       	cpi	r16, 0x69	; 105
    119c:	39 f5       	brne	.+78     	; 0x11ec <vfprintf+0x15a>
    119e:	17 ff       	sbrs	r17, 7
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <vfprintf+0x120>
    11a2:	f7 01       	movw	r30, r14
    11a4:	20 81       	ld	r18, Z
    11a6:	31 81       	ldd	r19, Z+1	; 0x01
    11a8:	42 81       	ldd	r20, Z+2	; 0x02
    11aa:	53 81       	ldd	r21, Z+3	; 0x03
    11ac:	84 e0       	ldi	r24, 0x04	; 4
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <vfprintf+0x134>
    11b2:	f7 01       	movw	r30, r14
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	9c 01       	movw	r18, r24
    11ba:	44 27       	eor	r20, r20
    11bc:	37 fd       	sbrc	r19, 7
    11be:	40 95       	com	r20
    11c0:	54 2f       	mov	r21, r20
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	e8 0e       	add	r14, r24
    11c8:	f9 1e       	adc	r15, r25
    11ca:	1f 7e       	andi	r17, 0xEF	; 239
    11cc:	57 ff       	sbrs	r21, 7
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <vfprintf+0x14e>
    11d0:	50 95       	com	r21
    11d2:	40 95       	com	r20
    11d4:	30 95       	com	r19
    11d6:	21 95       	neg	r18
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	4f 4f       	sbci	r20, 0xFF	; 255
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	10 64       	ori	r17, 0x40	; 64
    11e0:	ca 01       	movw	r24, r20
    11e2:	b9 01       	movw	r22, r18
    11e4:	a3 01       	movw	r20, r6
    11e6:	2a e0       	ldi	r18, 0x0A	; 10
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	34 c0       	rjmp	.+104    	; 0x1254 <vfprintf+0x1c2>
    11ec:	00 37       	cpi	r16, 0x70	; 112
    11ee:	a9 f0       	breq	.+42     	; 0x121a <vfprintf+0x188>
    11f0:	01 37       	cpi	r16, 0x71	; 113
    11f2:	30 f4       	brcc	.+12     	; 0x1200 <vfprintf+0x16e>
    11f4:	08 35       	cpi	r16, 0x58	; 88
    11f6:	b1 f0       	breq	.+44     	; 0x1224 <vfprintf+0x192>
    11f8:	0f 36       	cpi	r16, 0x6F	; 111
    11fa:	09 f0       	breq	.+2      	; 0x11fe <vfprintf+0x16c>
    11fc:	56 c0       	rjmp	.+172    	; 0x12aa <vfprintf+0x218>
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <vfprintf+0x17a>
    1200:	05 37       	cpi	r16, 0x75	; 117
    1202:	39 f0       	breq	.+14     	; 0x1212 <vfprintf+0x180>
    1204:	08 37       	cpi	r16, 0x78	; 120
    1206:	09 f0       	breq	.+2      	; 0x120a <vfprintf+0x178>
    1208:	50 c0       	rjmp	.+160    	; 0x12aa <vfprintf+0x218>
    120a:	08 c0       	rjmp	.+16     	; 0x121c <vfprintf+0x18a>
    120c:	28 e0       	ldi	r18, 0x08	; 8
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	0c c0       	rjmp	.+24     	; 0x122a <vfprintf+0x198>
    1212:	1f 7e       	andi	r17, 0xEF	; 239
    1214:	2a e0       	ldi	r18, 0x0A	; 10
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	08 c0       	rjmp	.+16     	; 0x122a <vfprintf+0x198>
    121a:	10 61       	ori	r17, 0x10	; 16
    121c:	14 62       	ori	r17, 0x24	; 36
    121e:	20 e1       	ldi	r18, 0x10	; 16
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	03 c0       	rjmp	.+6      	; 0x122a <vfprintf+0x198>
    1224:	14 60       	ori	r17, 0x04	; 4
    1226:	20 e1       	ldi	r18, 0x10	; 16
    1228:	32 e0       	ldi	r19, 0x02	; 2
    122a:	17 ff       	sbrs	r17, 7
    122c:	08 c0       	rjmp	.+16     	; 0x123e <vfprintf+0x1ac>
    122e:	f7 01       	movw	r30, r14
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	44 e0       	ldi	r20, 0x04	; 4
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	08 c0       	rjmp	.+16     	; 0x124e <vfprintf+0x1bc>
    123e:	f7 01       	movw	r30, r14
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	bc 01       	movw	r22, r24
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	42 e0       	ldi	r20, 0x02	; 2
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	e4 0e       	add	r14, r20
    1250:	f5 1e       	adc	r15, r21
    1252:	a3 01       	movw	r20, r6
    1254:	45 d1       	rcall	.+650    	; 0x14e0 <__ultoa_invert>
    1256:	d8 2e       	mov	r13, r24
    1258:	d6 18       	sub	r13, r6
    125a:	01 2f       	mov	r16, r17
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	06 ff       	sbrs	r16, 6
    1260:	04 c0       	rjmp	.+8      	; 0x126a <vfprintf+0x1d8>
    1262:	8d e2       	ldi	r24, 0x2D	; 45
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	b5 01       	movw	r22, r10
    1268:	ec d0       	rcall	.+472    	; 0x1442 <fputc>
    126a:	04 ff       	sbrs	r16, 4
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <vfprintf+0x202>
    126e:	fe 01       	movw	r30, r28
    1270:	ed 0d       	add	r30, r13
    1272:	f1 1d       	adc	r31, r1
    1274:	80 81       	ld	r24, Z
    1276:	80 33       	cpi	r24, 0x30	; 48
    1278:	69 f0       	breq	.+26     	; 0x1294 <vfprintf+0x202>
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	b5 01       	movw	r22, r10
    1280:	e0 d0       	rcall	.+448    	; 0x1442 <fputc>
    1282:	02 ff       	sbrs	r16, 2
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <vfprintf+0x202>
    1286:	00 72       	andi	r16, 0x20	; 32
    1288:	10 70       	andi	r17, 0x00	; 0
    128a:	c8 01       	movw	r24, r16
    128c:	88 5a       	subi	r24, 0xA8	; 168
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	b5 01       	movw	r22, r10
    1292:	d7 d0       	rcall	.+430    	; 0x1442 <fputc>
    1294:	da 94       	dec	r13
    1296:	f3 01       	movw	r30, r6
    1298:	ed 0d       	add	r30, r13
    129a:	f1 1d       	adc	r31, r1
    129c:	80 81       	ld	r24, Z
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b5 01       	movw	r22, r10
    12a2:	cf d0       	rcall	.+414    	; 0x1442 <fputc>
    12a4:	dd 20       	and	r13, r13
    12a6:	b1 f7       	brne	.-20     	; 0x1294 <vfprintf+0x202>
    12a8:	0e cf       	rjmp	.-484    	; 0x10c6 <vfprintf+0x34>
    12aa:	f5 01       	movw	r30, r10
    12ac:	66 81       	ldd	r22, Z+6	; 0x06
    12ae:	77 81       	ldd	r23, Z+7	; 0x07
    12b0:	cb 01       	movw	r24, r22
    12b2:	2b 96       	adiw	r28, 0x0b	; 11
    12b4:	ee e0       	ldi	r30, 0x0E	; 14
    12b6:	6d c0       	rjmp	.+218    	; 0x1392 <__epilogue_restores__+0x8>

000012b8 <__mulsi3>:
    12b8:	62 9f       	mul	r22, r18
    12ba:	d0 01       	movw	r26, r0
    12bc:	73 9f       	mul	r23, r19
    12be:	f0 01       	movw	r30, r0
    12c0:	82 9f       	mul	r24, r18
    12c2:	e0 0d       	add	r30, r0
    12c4:	f1 1d       	adc	r31, r1
    12c6:	64 9f       	mul	r22, r20
    12c8:	e0 0d       	add	r30, r0
    12ca:	f1 1d       	adc	r31, r1
    12cc:	92 9f       	mul	r25, r18
    12ce:	f0 0d       	add	r31, r0
    12d0:	83 9f       	mul	r24, r19
    12d2:	f0 0d       	add	r31, r0
    12d4:	74 9f       	mul	r23, r20
    12d6:	f0 0d       	add	r31, r0
    12d8:	65 9f       	mul	r22, r21
    12da:	f0 0d       	add	r31, r0
    12dc:	99 27       	eor	r25, r25
    12de:	72 9f       	mul	r23, r18
    12e0:	b0 0d       	add	r27, r0
    12e2:	e1 1d       	adc	r30, r1
    12e4:	f9 1f       	adc	r31, r25
    12e6:	63 9f       	mul	r22, r19
    12e8:	b0 0d       	add	r27, r0
    12ea:	e1 1d       	adc	r30, r1
    12ec:	f9 1f       	adc	r31, r25
    12ee:	bd 01       	movw	r22, r26
    12f0:	cf 01       	movw	r24, r30
    12f2:	11 24       	eor	r1, r1
    12f4:	08 95       	ret

000012f6 <__divmodhi4>:
    12f6:	97 fb       	bst	r25, 7
    12f8:	09 2e       	mov	r0, r25
    12fa:	07 26       	eor	r0, r23
    12fc:	0a d0       	rcall	.+20     	; 0x1312 <__divmodhi4_neg1>
    12fe:	77 fd       	sbrc	r23, 7
    1300:	04 d0       	rcall	.+8      	; 0x130a <__divmodhi4_neg2>
    1302:	5e d0       	rcall	.+188    	; 0x13c0 <__udivmodhi4>
    1304:	06 d0       	rcall	.+12     	; 0x1312 <__divmodhi4_neg1>
    1306:	00 20       	and	r0, r0
    1308:	1a f4       	brpl	.+6      	; 0x1310 <__divmodhi4_exit>

0000130a <__divmodhi4_neg2>:
    130a:	70 95       	com	r23
    130c:	61 95       	neg	r22
    130e:	7f 4f       	sbci	r23, 0xFF	; 255

00001310 <__divmodhi4_exit>:
    1310:	08 95       	ret

00001312 <__divmodhi4_neg1>:
    1312:	f6 f7       	brtc	.-4      	; 0x1310 <__divmodhi4_exit>
    1314:	90 95       	com	r25
    1316:	81 95       	neg	r24
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	08 95       	ret

0000131c <__divmodsi4>:
    131c:	97 fb       	bst	r25, 7
    131e:	09 2e       	mov	r0, r25
    1320:	05 26       	eor	r0, r21
    1322:	0e d0       	rcall	.+28     	; 0x1340 <__divmodsi4_neg1>
    1324:	57 fd       	sbrc	r21, 7
    1326:	04 d0       	rcall	.+8      	; 0x1330 <__divmodsi4_neg2>
    1328:	5f d0       	rcall	.+190    	; 0x13e8 <__udivmodsi4>
    132a:	0a d0       	rcall	.+20     	; 0x1340 <__divmodsi4_neg1>
    132c:	00 1c       	adc	r0, r0
    132e:	38 f4       	brcc	.+14     	; 0x133e <__divmodsi4_exit>

00001330 <__divmodsi4_neg2>:
    1330:	50 95       	com	r21
    1332:	40 95       	com	r20
    1334:	30 95       	com	r19
    1336:	21 95       	neg	r18
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	4f 4f       	sbci	r20, 0xFF	; 255
    133c:	5f 4f       	sbci	r21, 0xFF	; 255

0000133e <__divmodsi4_exit>:
    133e:	08 95       	ret

00001340 <__divmodsi4_neg1>:
    1340:	f6 f7       	brtc	.-4      	; 0x133e <__divmodsi4_exit>
    1342:	90 95       	com	r25
    1344:	80 95       	com	r24
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	08 95       	ret

00001352 <__prologue_saves__>:
    1352:	2f 92       	push	r2
    1354:	3f 92       	push	r3
    1356:	4f 92       	push	r4
    1358:	5f 92       	push	r5
    135a:	6f 92       	push	r6
    135c:	7f 92       	push	r7
    135e:	8f 92       	push	r8
    1360:	9f 92       	push	r9
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	ca 1b       	sub	r28, r26
    137c:	db 0b       	sbc	r29, r27
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	09 94       	ijmp

0000138a <__epilogue_restores__>:
    138a:	2a 88       	ldd	r2, Y+18	; 0x12
    138c:	39 88       	ldd	r3, Y+17	; 0x11
    138e:	48 88       	ldd	r4, Y+16	; 0x10
    1390:	5f 84       	ldd	r5, Y+15	; 0x0f
    1392:	6e 84       	ldd	r6, Y+14	; 0x0e
    1394:	7d 84       	ldd	r7, Y+13	; 0x0d
    1396:	8c 84       	ldd	r8, Y+12	; 0x0c
    1398:	9b 84       	ldd	r9, Y+11	; 0x0b
    139a:	aa 84       	ldd	r10, Y+10	; 0x0a
    139c:	b9 84       	ldd	r11, Y+9	; 0x09
    139e:	c8 84       	ldd	r12, Y+8	; 0x08
    13a0:	df 80       	ldd	r13, Y+7	; 0x07
    13a2:	ee 80       	ldd	r14, Y+6	; 0x06
    13a4:	fd 80       	ldd	r15, Y+5	; 0x05
    13a6:	0c 81       	ldd	r16, Y+4	; 0x04
    13a8:	1b 81       	ldd	r17, Y+3	; 0x03
    13aa:	aa 81       	ldd	r26, Y+2	; 0x02
    13ac:	b9 81       	ldd	r27, Y+1	; 0x01
    13ae:	ce 0f       	add	r28, r30
    13b0:	d1 1d       	adc	r29, r1
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	ed 01       	movw	r28, r26
    13be:	08 95       	ret

000013c0 <__udivmodhi4>:
    13c0:	aa 1b       	sub	r26, r26
    13c2:	bb 1b       	sub	r27, r27
    13c4:	51 e1       	ldi	r21, 0x11	; 17
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <__udivmodhi4_ep>

000013c8 <__udivmodhi4_loop>:
    13c8:	aa 1f       	adc	r26, r26
    13ca:	bb 1f       	adc	r27, r27
    13cc:	a6 17       	cp	r26, r22
    13ce:	b7 07       	cpc	r27, r23
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <__udivmodhi4_ep>
    13d2:	a6 1b       	sub	r26, r22
    13d4:	b7 0b       	sbc	r27, r23

000013d6 <__udivmodhi4_ep>:
    13d6:	88 1f       	adc	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	5a 95       	dec	r21
    13dc:	a9 f7       	brne	.-22     	; 0x13c8 <__udivmodhi4_loop>
    13de:	80 95       	com	r24
    13e0:	90 95       	com	r25
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	08 95       	ret

000013e8 <__udivmodsi4>:
    13e8:	a1 e2       	ldi	r26, 0x21	; 33
    13ea:	1a 2e       	mov	r1, r26
    13ec:	aa 1b       	sub	r26, r26
    13ee:	bb 1b       	sub	r27, r27
    13f0:	fd 01       	movw	r30, r26
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <__udivmodsi4_ep>

000013f4 <__udivmodsi4_loop>:
    13f4:	aa 1f       	adc	r26, r26
    13f6:	bb 1f       	adc	r27, r27
    13f8:	ee 1f       	adc	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	a2 17       	cp	r26, r18
    13fe:	b3 07       	cpc	r27, r19
    1400:	e4 07       	cpc	r30, r20
    1402:	f5 07       	cpc	r31, r21
    1404:	20 f0       	brcs	.+8      	; 0x140e <__udivmodsi4_ep>
    1406:	a2 1b       	sub	r26, r18
    1408:	b3 0b       	sbc	r27, r19
    140a:	e4 0b       	sbc	r30, r20
    140c:	f5 0b       	sbc	r31, r21

0000140e <__udivmodsi4_ep>:
    140e:	66 1f       	adc	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	1a 94       	dec	r1
    1418:	69 f7       	brne	.-38     	; 0x13f4 <__udivmodsi4_loop>
    141a:	60 95       	com	r22
    141c:	70 95       	com	r23
    141e:	80 95       	com	r24
    1420:	90 95       	com	r25
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	bd 01       	movw	r22, r26
    1428:	cf 01       	movw	r24, r30
    142a:	08 95       	ret

0000142c <strchr_P>:
    142c:	fc 01       	movw	r30, r24
    142e:	05 90       	lpm	r0, Z+
    1430:	06 16       	cp	r0, r22
    1432:	21 f0       	breq	.+8      	; 0x143c <strchr_P+0x10>
    1434:	00 20       	and	r0, r0
    1436:	d9 f7       	brne	.-10     	; 0x142e <strchr_P+0x2>
    1438:	c0 01       	movw	r24, r0
    143a:	08 95       	ret
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	cf 01       	movw	r24, r30
    1440:	08 95       	ret

00001442 <fputc>:
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	8c 01       	movw	r16, r24
    144c:	eb 01       	movw	r28, r22
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 ff       	sbrs	r24, 1
    1452:	1b c0       	rjmp	.+54     	; 0x148a <fputc+0x48>
    1454:	82 ff       	sbrs	r24, 2
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <fputc+0x30>
    1458:	2e 81       	ldd	r18, Y+6	; 0x06
    145a:	3f 81       	ldd	r19, Y+7	; 0x07
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	28 17       	cp	r18, r24
    1462:	39 07       	cpc	r19, r25
    1464:	64 f4       	brge	.+24     	; 0x147e <fputc+0x3c>
    1466:	e8 81       	ld	r30, Y
    1468:	f9 81       	ldd	r31, Y+1	; 0x01
    146a:	01 93       	st	Z+, r16
    146c:	f9 83       	std	Y+1, r31	; 0x01
    146e:	e8 83       	st	Y, r30
    1470:	06 c0       	rjmp	.+12     	; 0x147e <fputc+0x3c>
    1472:	e8 85       	ldd	r30, Y+8	; 0x08
    1474:	f9 85       	ldd	r31, Y+9	; 0x09
    1476:	80 2f       	mov	r24, r16
    1478:	09 95       	icall
    147a:	89 2b       	or	r24, r25
    147c:	31 f4       	brne	.+12     	; 0x148a <fputc+0x48>
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	9f 83       	std	Y+7, r25	; 0x07
    1486:	8e 83       	std	Y+6, r24	; 0x06
    1488:	02 c0       	rjmp	.+4      	; 0x148e <fputc+0x4c>
    148a:	0f ef       	ldi	r16, 0xFF	; 255
    148c:	1f ef       	ldi	r17, 0xFF	; 255
    148e:	c8 01       	movw	r24, r16
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <printf_P>:
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e2 e5       	ldi	r30, 0x52	; 82
    14a0:	fa e0       	ldi	r31, 0x0A	; 10
    14a2:	67 cf       	rjmp	.-306    	; 0x1372 <__prologue_saves__+0x20>
    14a4:	fe 01       	movw	r30, r28
    14a6:	35 96       	adiw	r30, 0x05	; 5
    14a8:	61 91       	ld	r22, Z+
    14aa:	71 91       	ld	r23, Z+
    14ac:	a0 91 be 01 	lds	r26, 0x01BE
    14b0:	b0 91 bf 01 	lds	r27, 0x01BF
    14b4:	13 96       	adiw	r26, 0x03	; 3
    14b6:	8c 91       	ld	r24, X
    14b8:	13 97       	sbiw	r26, 0x03	; 3
    14ba:	88 60       	ori	r24, 0x08	; 8
    14bc:	13 96       	adiw	r26, 0x03	; 3
    14be:	8c 93       	st	X, r24
    14c0:	80 91 be 01 	lds	r24, 0x01BE
    14c4:	90 91 bf 01 	lds	r25, 0x01BF
    14c8:	af 01       	movw	r20, r30
    14ca:	e3 dd       	rcall	.-1082   	; 0x1092 <vfprintf>
    14cc:	e0 91 be 01 	lds	r30, 0x01BE
    14d0:	f0 91 bf 01 	lds	r31, 0x01BF
    14d4:	23 81       	ldd	r18, Z+3	; 0x03
    14d6:	27 7f       	andi	r18, 0xF7	; 247
    14d8:	23 83       	std	Z+3, r18	; 0x03
    14da:	20 96       	adiw	r28, 0x00	; 0
    14dc:	e2 e0       	ldi	r30, 0x02	; 2
    14de:	65 cf       	rjmp	.-310    	; 0x13aa <__epilogue_restores__+0x20>

000014e0 <__ultoa_invert>:
    14e0:	fa 01       	movw	r30, r20
    14e2:	aa 27       	eor	r26, r26
    14e4:	28 30       	cpi	r18, 0x08	; 8
    14e6:	51 f1       	breq	.+84     	; 0x153c <__ultoa_invert+0x5c>
    14e8:	20 31       	cpi	r18, 0x10	; 16
    14ea:	81 f1       	breq	.+96     	; 0x154c <__ultoa_invert+0x6c>
    14ec:	e8 94       	clt
    14ee:	6f 93       	push	r22
    14f0:	6e 7f       	andi	r22, 0xFE	; 254
    14f2:	6e 5f       	subi	r22, 0xFE	; 254
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	8f 4f       	sbci	r24, 0xFF	; 255
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	af 4f       	sbci	r26, 0xFF	; 255
    14fc:	b1 e0       	ldi	r27, 0x01	; 1
    14fe:	3e d0       	rcall	.+124    	; 0x157c <__ultoa_invert+0x9c>
    1500:	b4 e0       	ldi	r27, 0x04	; 4
    1502:	3c d0       	rcall	.+120    	; 0x157c <__ultoa_invert+0x9c>
    1504:	67 0f       	add	r22, r23
    1506:	78 1f       	adc	r23, r24
    1508:	89 1f       	adc	r24, r25
    150a:	9a 1f       	adc	r25, r26
    150c:	a1 1d       	adc	r26, r1
    150e:	68 0f       	add	r22, r24
    1510:	79 1f       	adc	r23, r25
    1512:	8a 1f       	adc	r24, r26
    1514:	91 1d       	adc	r25, r1
    1516:	a1 1d       	adc	r26, r1
    1518:	6a 0f       	add	r22, r26
    151a:	71 1d       	adc	r23, r1
    151c:	81 1d       	adc	r24, r1
    151e:	91 1d       	adc	r25, r1
    1520:	a1 1d       	adc	r26, r1
    1522:	20 d0       	rcall	.+64     	; 0x1564 <__ultoa_invert+0x84>
    1524:	09 f4       	brne	.+2      	; 0x1528 <__ultoa_invert+0x48>
    1526:	68 94       	set
    1528:	3f 91       	pop	r19
    152a:	2a e0       	ldi	r18, 0x0A	; 10
    152c:	26 9f       	mul	r18, r22
    152e:	11 24       	eor	r1, r1
    1530:	30 19       	sub	r19, r0
    1532:	30 5d       	subi	r19, 0xD0	; 208
    1534:	31 93       	st	Z+, r19
    1536:	de f6       	brtc	.-74     	; 0x14ee <__ultoa_invert+0xe>
    1538:	cf 01       	movw	r24, r30
    153a:	08 95       	ret
    153c:	46 2f       	mov	r20, r22
    153e:	47 70       	andi	r20, 0x07	; 7
    1540:	40 5d       	subi	r20, 0xD0	; 208
    1542:	41 93       	st	Z+, r20
    1544:	b3 e0       	ldi	r27, 0x03	; 3
    1546:	0f d0       	rcall	.+30     	; 0x1566 <__ultoa_invert+0x86>
    1548:	c9 f7       	brne	.-14     	; 0x153c <__ultoa_invert+0x5c>
    154a:	f6 cf       	rjmp	.-20     	; 0x1538 <__ultoa_invert+0x58>
    154c:	46 2f       	mov	r20, r22
    154e:	4f 70       	andi	r20, 0x0F	; 15
    1550:	40 5d       	subi	r20, 0xD0	; 208
    1552:	4a 33       	cpi	r20, 0x3A	; 58
    1554:	18 f0       	brcs	.+6      	; 0x155c <__ultoa_invert+0x7c>
    1556:	49 5d       	subi	r20, 0xD9	; 217
    1558:	31 fd       	sbrc	r19, 1
    155a:	40 52       	subi	r20, 0x20	; 32
    155c:	41 93       	st	Z+, r20
    155e:	02 d0       	rcall	.+4      	; 0x1564 <__ultoa_invert+0x84>
    1560:	a9 f7       	brne	.-22     	; 0x154c <__ultoa_invert+0x6c>
    1562:	ea cf       	rjmp	.-44     	; 0x1538 <__ultoa_invert+0x58>
    1564:	b4 e0       	ldi	r27, 0x04	; 4
    1566:	a6 95       	lsr	r26
    1568:	97 95       	ror	r25
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	ba 95       	dec	r27
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__ultoa_invert+0x86>
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	61 05       	cpc	r22, r1
    1578:	71 05       	cpc	r23, r1
    157a:	08 95       	ret
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	0a 2e       	mov	r0, r26
    1582:	06 94       	lsr	r0
    1584:	57 95       	ror	r21
    1586:	47 95       	ror	r20
    1588:	37 95       	ror	r19
    158a:	27 95       	ror	r18
    158c:	ba 95       	dec	r27
    158e:	c9 f7       	brne	.-14     	; 0x1582 <__ultoa_invert+0xa2>
    1590:	62 0f       	add	r22, r18
    1592:	73 1f       	adc	r23, r19
    1594:	84 1f       	adc	r24, r20
    1596:	95 1f       	adc	r25, r21
    1598:	a0 1d       	adc	r26, r0
    159a:	08 95       	ret

0000159c <_exit>:
    159c:	f8 94       	cli

0000159e <__stop_program>:
    159e:	ff cf       	rjmp	.-2      	; 0x159e <__stop_program>
